androidx.recyclerview.widget.ThreadUtil
okhttp3.internal.cache.FaultHidingSink
okhttp3.internal.http2.Http2Codec
okhttp3.internal.ws.WebSocketProtocol
androidx.core.text.util.FindAddress
okio.Okio$4
okio.ForwardingSink
android.support.v4.media.session.MediaControllerCompat$TransportControlsApi23
androidx.recyclerview.R$string
androidx.media.MediaBrowserServiceCompat$ServiceHandler
okhttp3.internal.http2.Http2Connection$ReaderRunnable$3
androidx.cardview.widget.CardViewBaseImpl
androidx.annotation.ContentView
androidx.core.view.accessibility.AccessibilityViewCommand$MoveHtmlArguments:
    public java.lang.String getHTMLElement()
androidx.core.provider.FontsContractCompat$4$2
androidx.fragment.R$styleable
androidx.camera.camera2.impl.compat.CameraCaptureSessionCompatApi28Impl:
    public int captureSingleRequest(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)
    public int setRepeatingBurstRequests(android.hardware.camera2.CameraCaptureSession,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)
androidx.cardview.widget.CardViewApi21Impl
androidx.slidingpanelayout.R$style
androidx.recyclerview.widget.MessageThreadUtil$1
androidx.collection.SimpleArrayMap:
    public void <init>(androidx.collection.SimpleArrayMap)
    public void putAll(androidx.collection.SimpleArrayMap)
    private static final boolean DEBUG
    private static final java.lang.String TAG
    private static final boolean CONCURRENT_MODIFICATION_EXCEPTIONS
    private static final int BASE_SIZE
    private static final int CACHE_SIZE
androidx.core.graphics.TypefaceCompat:
    private void <init>()
androidx.media.R$drawable
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView:
    public void clearSelection()
    public synthetic bridge int lookForSelectablePosition(int,boolean)
androidx.camera.core.impl.utils.futures.package-info
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21$2
android.support.v4.media.MediaDescriptionCompat:
    public java.lang.String getMediaId()
    public java.lang.CharSequence getTitle()
    public java.lang.CharSequence getSubtitle()
    public java.lang.CharSequence getDescription()
    public android.graphics.Bitmap getIconBitmap()
    public android.net.Uri getIconUri()
    public android.os.Bundle getExtras()
    public android.net.Uri getMediaUri()
    public static final java.lang.String EXTRA_BT_FOLDER_TYPE
    public static final long BT_FOLDER_TYPE_MIXED
    public static final long BT_FOLDER_TYPE_TITLES
    public static final long BT_FOLDER_TYPE_ALBUMS
    public static final long BT_FOLDER_TYPE_ARTISTS
    public static final long BT_FOLDER_TYPE_GENRES
    public static final long BT_FOLDER_TYPE_PLAYLISTS
    public static final long BT_FOLDER_TYPE_YEARS
    public static final java.lang.String EXTRA_DOWNLOAD_STATUS
    public static final long STATUS_NOT_DOWNLOADED
    public static final long STATUS_DOWNLOADING
    public static final long STATUS_DOWNLOADED
    public static final java.lang.String DESCRIPTION_KEY_MEDIA_URI
    public static final java.lang.String DESCRIPTION_KEY_NULL_BUNDLE_FLAG
androidx.viewpager.R$integer
androidx.media.AudioAttributesImplBase:
    void <init>(int,int,int,int)
    public static androidx.media.AudioAttributesImpl fromBundle(android.os.Bundle)
    public java.lang.Object getAudioAttributes()
    public int getVolumeControlStream()
    public int getRawLegacyStreamType()
    public android.os.Bundle toBundle()
androidx.appcompat.widget.ActionMenuView$LayoutParams:
    void <init>(int,int,boolean)
com.facebook.fbjni.BuildConfig
androidx.core.text.util.LinkifyCompat$LinkifyMask
androidx.media.MediaBrowserServiceCompatApi21$ResultWrapper
androidx.recyclerview.selection.BandSelectionHelper$BandHost
androidx.cardview.widget.RoundRectDrawableWithShadow$RoundRectHelper
androidx.appcompat.widget.PopupMenu$OnDismissListener
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21$3
androidx.camera.camera2.impl.Camera2DeviceSurfaceManager$Operation
androidx.camera.core.Observable:
    public abstract com.google.common.util.concurrent.ListenableFuture fetchData()
androidx.camera.core.ImageReaderProxys:
    private static final int SHARED_IMAGE_FORMAT
    private static final int SHARED_MAX_IMAGES
okhttp3.Connection
androidx.vectordrawable.R$layout
com.squareup.picasso.DeferredRequestCreator
androidx.core.accessibilityservice.AccessibilityServiceInfoCompat
okhttp3.internal.ws.WebSocketWriter$FrameSink
androidx.media.R$dimen
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompat:
    public void <init>(android.util.Size,java.lang.Class)
    public void enableSurfaceSharing()
    public void setPhysicalCameraId(java.lang.String)
    public void addSurface(android.view.Surface)
    public void removeSurface(android.view.Surface)
    public int getMaxSharedSurfaceCount()
    public java.util.List getSurfaces()
    public int getSurfaceGroupId()
    public static final int SURFACE_GROUP_ID_NONE
okhttp3.internal.http.CallServerInterceptor$CountingSink
android.support.v4.media.session.PlaybackStateCompat$Builder
androidx.camera.core.CameraCaptureCallbacks
androidx.drawerlayout.R$string
androidx.camera.core.impl.utils.futures.ChainingListenableFuture
androidx.appcompat.widget.DrawableUtils:
    private void <init>()
    public static android.graphics.Rect getOpticalBounds(android.graphics.drawable.Drawable)
    private static final java.lang.String TAG
    private static final java.lang.String VECTOR_DRAWABLE_CLAZZ_NAME
androidx.core.app.ComponentActivity:
    public void putExtraData(androidx.core.app.ComponentActivity$ExtraData)
    public androidx.core.app.ComponentActivity$ExtraData getExtraData(java.lang.Class)
    public androidx.lifecycle.Lifecycle getLifecycle()
okhttp3.internal.platform.JdkWithJettyBootPlatform
android.support.v4.media.MediaMetadataCompatApi21$Builder
okhttp3.internal.connection.RealConnection$1
androidx.camera.core.ImageCapture$19$1
androidx.core.view.ScrollingView
androidx.camera.core.impl.utils.package-info
androidx.media.MediaBrowserServiceCompat$2
androidx.legacy.coreui.R$drawable
androidx.appcompat.R$color:
    private void <init>()
androidx.camera.core.R$id
okhttp3.RequestBody$1
androidx.lifecycle.MediatorLiveData$Source
android.support.v4.media.session.PlaybackStateCompat:
    public static int toKeyCode(long)
    public int getState()
    public long getPosition()
    public long getLastPositionUpdateTime()
    public long getCurrentPosition(java.lang.Long)
    public long getBufferedPosition()
    public float getPlaybackSpeed()
    public long getActions()
    public java.util.List getCustomActions()
    public int getErrorCode()
    public java.lang.CharSequence getErrorMessage()
    public long getActiveQueueItemId()
    public android.os.Bundle getExtras()
    public java.lang.Object getPlaybackState()
    public static final long ACTION_STOP
    public static final long ACTION_PAUSE
    public static final long ACTION_PLAY
    public static final long ACTION_REWIND
    public static final long ACTION_SKIP_TO_PREVIOUS
    public static final long ACTION_SKIP_TO_NEXT
    public static final long ACTION_FAST_FORWARD
    public static final long ACTION_SET_RATING
    public static final long ACTION_SEEK_TO
    public static final long ACTION_PLAY_PAUSE
    public static final long ACTION_PLAY_FROM_MEDIA_ID
    public static final long ACTION_PLAY_FROM_SEARCH
    public static final long ACTION_SKIP_TO_QUEUE_ITEM
    public static final long ACTION_PLAY_FROM_URI
    public static final long ACTION_PREPARE
    public static final long ACTION_PREPARE_FROM_MEDIA_ID
    public static final long ACTION_PREPARE_FROM_SEARCH
    public static final long ACTION_PREPARE_FROM_URI
    public static final long ACTION_SET_REPEAT_MODE
    public static final long ACTION_SET_SHUFFLE_MODE_ENABLED
    public static final long ACTION_SET_CAPTIONING_ENABLED
    public static final long ACTION_SET_SHUFFLE_MODE
    public static final int STATE_NONE
    public static final int STATE_STOPPED
    public static final int STATE_PAUSED
    public static final int STATE_PLAYING
    public static final int STATE_FAST_FORWARDING
    public static final int STATE_REWINDING
    public static final int STATE_BUFFERING
    public static final int STATE_ERROR
    public static final int STATE_CONNECTING
    public static final int STATE_SKIPPING_TO_PREVIOUS
    public static final int STATE_SKIPPING_TO_NEXT
    public static final int STATE_SKIPPING_TO_QUEUE_ITEM
    public static final long PLAYBACK_POSITION_UNKNOWN
    public static final int REPEAT_MODE_INVALID
    public static final int REPEAT_MODE_NONE
    public static final int REPEAT_MODE_ONE
    public static final int REPEAT_MODE_ALL
    public static final int REPEAT_MODE_GROUP
    public static final int SHUFFLE_MODE_INVALID
    public static final int SHUFFLE_MODE_NONE
    public static final int SHUFFLE_MODE_ALL
    public static final int SHUFFLE_MODE_GROUP
    public static final int ERROR_CODE_UNKNOWN_ERROR
    public static final int ERROR_CODE_APP_ERROR
    public static final int ERROR_CODE_NOT_SUPPORTED
    public static final int ERROR_CODE_AUTHENTICATION_EXPIRED
    public static final int ERROR_CODE_PREMIUM_ACCOUNT_REQUIRED
    public static final int ERROR_CODE_CONCURRENT_STREAM_LIMIT
    public static final int ERROR_CODE_PARENTAL_CONTROL_RESTRICTED
    public static final int ERROR_CODE_NOT_AVAILABLE_IN_REGION
    public static final int ERROR_CODE_CONTENT_ALREADY_PLAYING
    public static final int ERROR_CODE_SKIP_LIMIT_REACHED
    public static final int ERROR_CODE_ACTION_ABORTED
    public static final int ERROR_CODE_END_OF_QUEUE
    private static final int KEYCODE_MEDIA_PAUSE
    private static final int KEYCODE_MEDIA_PLAY
androidx.camera.camera2.impl.CameraAvailabilityRegistry:
    private static final boolean DEBUG
    private static final java.lang.String TAG
okhttp3.CookieJar$1
androidx.savedstate.Recreator:
    static final java.lang.String CLASSES_KEY
    static final java.lang.String COMPONENT_KEY
androidx.core.view.accessibility.AccessibilityManagerCompat
androidx.recyclerview.widget.ThreadUtil$BackgroundCallback
androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplJellybeanMr2
okhttp3.RealCall$AsyncCall
org.pytorch.torchvision.R$attr
androidx.customview.R$color
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi28
com.squareup.picasso.Dispatcher$1
androidx.core.view.NestedScrollingChild:
    public abstract void setNestedScrollingEnabled(boolean)
    public abstract boolean isNestedScrollingEnabled()
    public abstract boolean startNestedScroll(int)
    public abstract boolean hasNestedScrollingParent()
    public abstract boolean dispatchNestedScroll(int,int,int,int,int[])
    public abstract boolean dispatchNestedPreScroll(int,int,int[],int[])
    public abstract boolean dispatchNestedFling(float,float,boolean)
    public abstract boolean dispatchNestedPreFling(float,float)
okhttp3.internal.http.CallServerInterceptor
androidx.media.R$style
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplApi19
androidx.core.view.animation.PathInterpolatorCompat
okhttp3.internal.http2.Http2Connection$ReaderRunnable
android.support.v4.media.RatingCompat$Style
androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback
androidx.camera.core.impl.utils.executor.package-info
okhttp3.OkHttpClient
androidx.core.view.accessibility.AccessibilityViewCommand$MoveWindowArguments:
    public int getX()
    public int getY()
androidx.core.app.ActivityCompat$SharedElementCallback21Impl
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatBaseImpl:
    public void enableSurfaceSharing()
    boolean isSurfaceSharingEnabled()
    public void setPhysicalCameraId(java.lang.String)
    public void addSurface(android.view.Surface)
    public void removeSurface(android.view.Surface)
    public int getMaxSharedSurfaceCount()
    public java.util.List getSurfaces()
    public int getSurfaceGroupId()
    static final java.lang.String TAG
androidx.camera.core.CameraXThreads
androidx.camera.core.impl.utils.executor.IoExecutor
androidx.media.MediaBrowserServiceCompat$ServiceBinderImpl$6
androidx.camera.core.ImageCapture$ImageCaptureRequest$2
androidx.versionedparcelable.VersionedParcelParcel:
    public void writeByteArray(byte[],int,int)
    public void writeLong(long)
    public void writeFloat(float)
    public void writeDouble(double)
    public void writeStrongBinder(android.os.IBinder)
    public void writeStrongInterface(android.os.IInterface)
    public void writeBundle(android.os.Bundle)
    public long readLong()
    public float readFloat()
    public double readDouble()
    public android.os.IBinder readStrongBinder()
    public android.os.Bundle readBundle()
    private static final boolean DEBUG
    private static final java.lang.String TAG
androidx.recyclerview.widget.AsyncListDiffer$ListListener
androidx.recyclerview.widget.MessageThreadUtil$1$1
okio.AsyncTimeout
org.pytorch.torchvision.R$anim
androidx.lifecycle.R
androidx.core.app.RemoteInput$Builder
androidx.collection.ArrayMap:
    public void <init>(androidx.collection.SimpleArrayMap)
    public boolean containsAll(java.util.Collection)
    public boolean removeAll(java.util.Collection)
android.support.v4.media.MediaBrowserCompat$MediaItem$Flags
androidx.camera.core.FocusMeteringAction$1
androidx.asynclayoutinflater.R$color
androidx.media.MediaBrowserServiceCompat$ServiceBinderImpl
androidx.asynclayoutinflater.R$layout
androidx.camera.core.Preview$Defaults:
    private static final int DEFAULT_SURFACE_OCCUPANCY_PRIORITY
androidx.recyclerview.widget.DiffUtil$1
androidx.core.content.IntentCompat
androidx.camera.core.SettableImageProxyBundle:
    public java.util.List getCaptureIds()
okio.AsyncTimeout$1
androidx.fragment.R$style
androidx.core.database.CursorWindowCompat
androidx.fragment.app.FragmentStatePagerAdapter
okio.Options
androidx.annotation.InspectableProperty$FlagEntry
okhttp3.internal.Internal
androidx.camera.core.CameraDeviceConfig$Builder
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplApi21$ExtraSession
androidx.legacy.v4.R$color
com.squareup.picasso.Cache$1
androidx.camera.core.ImageFormatConstants
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat
androidx.core.widget.TextViewCompat$OreoCallback:
    private static final int MENU_ITEM_ORDER_PROCESS_TEXT_INTENT_ACTIONS_START
androidx.core.net.DatagramSocketWrapper
androidx.recyclerview.selection.BandPredicate$NonDraggableArea
io.github.prabhuomkar.pytorchandroid.R$menu
androidx.recyclerview.widget.ItemTouchHelper$Callback$1
androidx.core.view.inputmethod.InputConnectionCompat
androidx.slidingpanelayout.R$dimen
androidx.core.app.NotificationCompat$Style
androidx.recyclerview.widget.ItemTouchHelper$4
androidx.vectordrawable.graphics.drawable.AndroidResources:
    private void <init>()
    static final int STYLEABLE_VECTOR_DRAWABLE_ALPHA
    static final int STYLEABLE_VECTOR_DRAWABLE_AUTO_MIRRORED
    static final int STYLEABLE_VECTOR_DRAWABLE_HEIGHT
    static final int STYLEABLE_VECTOR_DRAWABLE_NAME
    static final int STYLEABLE_VECTOR_DRAWABLE_TINT
    static final int STYLEABLE_VECTOR_DRAWABLE_TINT_MODE
    static final int STYLEABLE_VECTOR_DRAWABLE_VIEWPORT_HEIGHT
    static final int STYLEABLE_VECTOR_DRAWABLE_VIEWPORT_WIDTH
    static final int STYLEABLE_VECTOR_DRAWABLE_WIDTH
    static final int STYLEABLE_VECTOR_DRAWABLE_GROUP_NAME
    static final int STYLEABLE_VECTOR_DRAWABLE_GROUP_PIVOT_X
    static final int STYLEABLE_VECTOR_DRAWABLE_GROUP_PIVOT_Y
    static final int STYLEABLE_VECTOR_DRAWABLE_GROUP_ROTATION
    static final int STYLEABLE_VECTOR_DRAWABLE_GROUP_SCALE_X
    static final int STYLEABLE_VECTOR_DRAWABLE_GROUP_SCALE_Y
    static final int STYLEABLE_VECTOR_DRAWABLE_GROUP_TRANSLATE_X
    static final int STYLEABLE_VECTOR_DRAWABLE_GROUP_TRANSLATE_Y
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_FILL_ALPHA
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_FILL_COLOR
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_NAME
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_PATH_DATA
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_STROKE_ALPHA
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_STROKE_COLOR
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_STROKE_LINE_CAP
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_STROKE_LINE_JOIN
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_STROKE_MITER_LIMIT
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_STROKE_WIDTH
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_TRIM_PATH_END
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_TRIM_PATH_OFFSET
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_TRIM_PATH_START
    static final int STYLEABLE_VECTOR_DRAWABLE_PATH_TRIM_PATH_FILLTYPE
    static final int STYLEABLE_VECTOR_DRAWABLE_CLIP_PATH_NAME
    static final int STYLEABLE_VECTOR_DRAWABLE_CLIP_PATH_PATH_DATA
    static final int STYLEABLE_VECTOR_DRAWABLE_CLIP_PATH_FILLTYPE
    static final int STYLEABLE_ANIMATED_VECTOR_DRAWABLE_DRAWABLE
    static final int STYLEABLE_ANIMATED_VECTOR_DRAWABLE_TARGET_ANIMATION
    static final int STYLEABLE_ANIMATED_VECTOR_DRAWABLE_TARGET_NAME
    public static final int STYLEABLE_ANIMATOR_INTERPOLATOR
    public static final int STYLEABLE_ANIMATOR_DURATION
    public static final int STYLEABLE_ANIMATOR_START_OFFSET
    public static final int STYLEABLE_ANIMATOR_REPEAT_COUNT
    public static final int STYLEABLE_ANIMATOR_REPEAT_MODE
    public static final int STYLEABLE_ANIMATOR_VALUE_FROM
    public static final int STYLEABLE_ANIMATOR_VALUE_TO
    public static final int STYLEABLE_ANIMATOR_VALUE_TYPE
    public static final int STYLEABLE_ANIMATOR_SET_ORDERING
    public static final int STYLEABLE_PROPERTY_VALUES_HOLDER_VALUE_FROM
    public static final int STYLEABLE_PROPERTY_VALUES_HOLDER_VALUE_TO
    public static final int STYLEABLE_PROPERTY_VALUES_HOLDER_VALUE_TYPE
    public static final int STYLEABLE_PROPERTY_VALUES_HOLDER_PROPERTY_NAME
    public static final int STYLEABLE_KEYFRAME_VALUE
    public static final int STYLEABLE_KEYFRAME_INTERPOLATOR
    public static final int STYLEABLE_KEYFRAME_VALUE_TYPE
    public static final int STYLEABLE_KEYFRAME_FRACTION
    public static final int STYLEABLE_PROPERTY_ANIMATOR_PROPERTY_NAME
    public static final int STYLEABLE_PROPERTY_ANIMATOR_PATH_DATA
    public static final int STYLEABLE_PROPERTY_ANIMATOR_PROPERTY_X_NAME
    public static final int STYLEABLE_PROPERTY_ANIMATOR_PROPERTY_Y_NAME
    public static final int STYLEABLE_PATH_INTERPOLATOR_CONTROL_X_1
    public static final int STYLEABLE_PATH_INTERPOLATOR_CONTROL_Y_1
    public static final int STYLEABLE_PATH_INTERPOLATOR_CONTROL_X_2
    public static final int STYLEABLE_PATH_INTERPOLATOR_CONTROL_Y_2
    public static final int STYLEABLE_PATH_INTERPOLATOR_PATH_DATA
    public static final int FAST_OUT_LINEAR_IN
    public static final int FAST_OUT_SLOW_IN
    public static final int LINEAR_OUT_SLOW_IN
okhttp3.Headers
androidx.media.MediaBrowserServiceCompatApi21$ServiceCompatProxy
androidx.camera.core.ImageAnalysis:
    public void removeAnalyzer()
    public void setTargetRotation(int)
    public androidx.camera.core.ImageAnalysis$Analyzer getAnalyzer()
    private static final java.lang.String TAG
    private static final int NON_BLOCKING_IMAGE_DEPTH
androidx.core.R$layout
okhttp3.internal.cache.DiskLruCache
androidx.camera.core.Exif$3
androidx.lifecycle.Transformations$2
androidx.core.os.EnvironmentCompat
com.downloader.Constants
androidx.camera.core.ImageAnalysisNonBlockingAnalyzer:
    private static final java.lang.String TAG
androidx.camera.core.ImageOutputConfig:
    public abstract android.util.Rational getTargetAspectRatioCustom()
    public abstract androidx.camera.core.AspectRatio getTargetAspectRatio()
    public abstract int getTargetRotation()
    public abstract android.util.Size getTargetResolution()
    public abstract android.util.Size getDefaultResolution()
    public abstract android.util.Size getMaxResolution()
    public abstract java.util.List getSupportedResolutions()
    public static final int INVALID_ROTATION
androidx.legacy.app.ActionBarDrawerToggle$SetIndicatorInfo
androidx.camera.camera2.impl.ImageCaptureConfigProvider:
    private static final java.lang.String TAG
android.support.v4.media.MediaBrowserCompat$ConnectionCallback$ConnectionCallbackInternal
com.squareup.picasso.ContentStreamRequestHandler
androidx.core.widget.TintableCompoundDrawablesView:
    public abstract android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
    public abstract android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
androidx.legacy.coreui.R$string
androidx.camera.camera2.R$drawable
androidx.viewpager.widget.ViewPager$SavedState$1
androidx.appcompat.app.ToolbarActionBar$1
androidx.camera.core.ImageCapture$13
androidx.swiperefreshlayout.widget.CircularProgressDrawable$1
androidx.recyclerview.widget.LinearSnapHelper
com.downloader.PRDownloaderConfig$Builder
androidx.vectordrawable.R$styleable
androidx.appcompat.view.ContextThemeWrapper:
    public void applyOverrideConfiguration(android.content.res.Configuration)
androidx.drawerlayout.R$id
androidx.recyclerview.widget.AsyncListUtil$DataCallback
androidx.camera.core.UseCaseGroup:
    private static final java.lang.String TAG
androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl
androidx.loader.content.ModernAsyncTask$4
androidx.recyclerview.widget.AdapterListUpdateCallback
androidx.camera.core.ImageCapture:
    public void <init>(androidx.camera.core.ImageCaptureConfig)
    private androidx.camera.core.CameraControlInternal getCurrentCameraControl()
    private void sendImageCaptureRequest(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedListener)
    private void takePictureInternal()
    private com.google.common.util.concurrent.ListenableFuture preTakePicture(androidx.camera.core.ImageCapture$TakePictureState)
    private com.google.common.util.concurrent.ListenableFuture getPreCaptureStateIfNeeded()
    private void triggerAf(androidx.camera.core.ImageCapture$TakePictureState)
    public androidx.camera.core.FlashMode getFlashMode()
    public void setFlashMode(androidx.camera.core.FlashMode)
    public void setTargetAspectRatioCustom(android.util.Rational)
    public void setTargetRotation(int)
    public void takePicture(java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedListener)
    public void takePicture(java.io.File,java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageSavedListener)
    public void takePicture(java.io.File,androidx.camera.core.ImageCapture$Metadata,java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageSavedListener)
    void issueImageCaptureRequests()
    com.google.common.util.concurrent.ListenableFuture postTakePicture(androidx.camera.core.ImageCapture$TakePictureState)
    boolean isFlashRequired(androidx.camera.core.ImageCapture$TakePictureState)
    com.google.common.util.concurrent.ListenableFuture check3AConverged(androidx.camera.core.ImageCapture$TakePictureState)
    boolean is3AConverged(androidx.camera.core.CameraCaptureResult)
    void triggerAfIfNeeded(androidx.camera.core.ImageCapture$TakePictureState)
    void triggerAePrecapture(androidx.camera.core.ImageCapture$TakePictureState)
    void cancelAfAeTrigger(androidx.camera.core.ImageCapture$TakePictureState)
    com.google.common.util.concurrent.ListenableFuture issueTakePicture(androidx.camera.core.ImageCapture$TakePictureState)
    final android.os.Handler mMainHandler
    private final androidx.camera.core.CaptureConfig mCaptureConfig
    private final androidx.camera.core.ImageCapture$CaptureMode mCaptureMode
    private final androidx.camera.core.ImageCaptureConfig$Builder mUseCaseConfigBuilder
    private boolean mEnableCheck3AConverged
    private static final java.lang.String TAG
    private static final long CHECK_3A_TIMEOUT_IN_MS
    private static final int MAX_IMAGES
androidx.viewpager.widget.ViewPager$PageTransformer
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatBaseImpl$OutputConfigurationParamsApi21:
    static final int MAX_SURFACES_COUNT
    private static final java.lang.String LEGACY_CAMERA_DEVICE_CLASS
    private static final java.lang.String GET_SURFACE_SIZE_METHOD
    private static final java.lang.String DETECT_SURFACE_TYPE_METHOD
    private static final java.lang.String GET_GENERATION_ID_METHOD
androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener
com.downloader.internal.DownloadRequestQueue:
    public static void initialize()
    public void pause(int)
    public void resume(int)
    public void cancel(int)
    public void cancelAll()
    public com.downloader.Status getStatus(int)
androidx.appcompat.resources.R$string
androidx.recyclerview.selection.SelectionTracker$Builder$4
androidx.collection.SparseArrayCompat:
    public void delete(int)
    public boolean remove(int,java.lang.Object)
    public void removeAt(int)
    public void removeAtRange(int,int)
    public java.lang.Object replace(int,java.lang.Object)
    public boolean replace(int,java.lang.Object,java.lang.Object)
    public void putAll(androidx.collection.SparseArrayCompat)
    public java.lang.Object putIfAbsent(int,java.lang.Object)
    public boolean isEmpty()
    public void setValueAt(int,java.lang.Object)
    public int indexOfKey(int)
    public int indexOfValue(java.lang.Object)
    public boolean containsKey(int)
    public boolean containsValue(java.lang.Object)
androidx.appcompat.R$id:
    private void <init>()
androidx.recyclerview.widget.AsyncListDiffer$1
androidx.core.view.accessibility.AccessibilityViewCommand$SetProgressArguments:
    public float getProgress()
com.squareup.picasso.Picasso
androidx.recyclerview.selection.AutoScroller
androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks:
    public void <init>()
androidx.cardview.widget.RoundRectDrawable
androidx.lifecycle.ComputableLiveData$2
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraBinderRequestResultReceiver:
    void <init>(android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21)
okhttp3.internal.cache2.FileOperator
androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation$1
androidx.core.util.DebugUtils:
    private void <init>()
androidx.core.app.NotificationCompat
io.github.prabhuomkar.pytorchandroid.helpers.FragmentHelper:
    public void <init>()
android.support.v4.media.session.MediaControllerCompat$Callback$MessageHandler:
    void <init>(android.support.v4.media.session.MediaControllerCompat$Callback,android.os.Looper)
    public void handleMessage(android.os.Message)
    boolean mRegistered
    final synthetic android.support.v4.media.session.MediaControllerCompat$Callback this$0
    private static final int MSG_EVENT
    private static final int MSG_UPDATE_PLAYBACK_STATE
    private static final int MSG_UPDATE_METADATA
    private static final int MSG_UPDATE_VOLUME
    private static final int MSG_UPDATE_QUEUE
    private static final int MSG_UPDATE_QUEUE_TITLE
    private static final int MSG_UPDATE_EXTRAS
    private static final int MSG_DESTROYED
    private static final int MSG_UPDATE_REPEAT_MODE
    private static final int MSG_UPDATE_CAPTIONING_ENABLED
    private static final int MSG_UPDATE_SHUFFLE_MODE
    private static final int MSG_SESSION_READY
androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager:
    boolean isListening()
androidx.camera.camera2.impl.ImageCaptureOptionUnpacker:
    private void applyPixelHdrPlusChangeForCaptureMode(androidx.camera.core.ImageCapture$CaptureMode,androidx.camera.camera2.Camera2Config$Builder)
    public void unpack(androidx.camera.core.UseCaseConfig,androidx.camera.core.CaptureConfig$Builder)
    void setDeviceProperty(androidx.camera.core.DeviceProperties)
com.squareup.picasso.Transformation
okio.GzipSource
android.support.v4.media.session.PlaybackStateCompatApi21:
    public static java.lang.Object newInstance(int,long,long,float,long,java.lang.CharSequence,long,java.util.List,long)
    private void <init>()
okhttp3.internal.http2.Http2Connection$Listener
androidx.collection.LongSparseArray:
    public boolean remove(long,java.lang.Object)
    public java.lang.Object replace(long,java.lang.Object)
    public boolean replace(long,java.lang.Object,java.lang.Object)
    public void putAll(androidx.collection.LongSparseArray)
    public java.lang.Object putIfAbsent(long,java.lang.Object)
    public boolean isEmpty()
    public void setValueAt(int,java.lang.Object)
    public int indexOfKey(long)
    public int indexOfValue(java.lang.Object)
    public boolean containsKey(long)
    public boolean containsValue(java.lang.Object)
androidx.recyclerview.widget.OrientationHelper$2:
    public void offsetChild(android.view.View,int)
androidx.media.MediaSessionManagerImplApi21
androidx.drawerlayout.widget.DrawerLayout$DrawerListener
org.pytorch.R$color
androidx.core.view.NestedScrollingChild2:
    public abstract boolean startNestedScroll(int,int)
    public abstract void stopNestedScroll(int)
    public abstract boolean hasNestedScrollingParent(int)
    public abstract boolean dispatchNestedScroll(int,int,int,int,int[],int)
    public abstract boolean dispatchNestedPreScroll(int,int,int[],int[],int)
androidx.annotation.InterpolatorRes
androidx.core.app.RemoteInput
androidx.core.view.ActionProvider$SubUiVisibilityListener:
    public abstract void onSubUiVisibilityChanged(boolean)
androidx.core.app.NotificationCompatBuilder
org.pytorch.NativePeer:
    public void resetNative()
    public varargs native org.pytorch.IValue runMethod(java.lang.String,org.pytorch.IValue[])
androidx.appcompat.view.menu.MenuAdapter:
    public boolean getForceShowIcon()
androidx.annotation.RestrictTo
androidx.appcompat.R$drawable:
    private void <init>()
android.support.v4.media.MediaMetadataCompat$TextKey
okhttp3.ResponseBody
android.support.v4.media.MediaBrowserCompatApi23$ItemCallback
androidx.legacy.v4.R$integer
androidx.interpolator.R
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState:
    int[] mCachedThemeAttrs
androidx.loader.content.Loader$ForceLoadContentObserver
androidx.asynclayoutinflater.R$drawable
android.support.v4.os.IResultReceiver$Stub$Proxy:
    public java.lang.String getInterfaceDescriptor()
androidx.camera.core.ImageSaver$2
androidx.appcompat.view.SupportMenuInflater:
    static final java.lang.String LOG_TAG
    private static final java.lang.String XML_MENU
    private static final java.lang.String XML_GROUP
    private static final java.lang.String XML_ITEM
    static final int NO_ID
com.squareup.picasso.Dispatcher$DispatcherHandler$1
androidx.drawerlayout.R$drawable
io.github.prabhuomkar.pytorchandroid.R$id
androidx.appcompat.widget.TintTypedArray:
    public int length()
    public int getIndexCount()
    public int getIndex(int)
    public android.content.res.Resources getResources()
    public java.lang.String getNonResourceString(int)
    public float getDimension(int,float)
    public int getLayoutDimension(int,java.lang.String)
    public float getFraction(int,int,int,float)
    public boolean getValue(int,android.util.TypedValue)
    public int getType(int)
    public android.util.TypedValue peekValue(int)
    public java.lang.String getPositionDescription()
    public int getChangingConfigurations()
androidx.camera.core.impl.utils.executor.SequentialExecutor:
    private static final java.lang.String TAG
org.pytorch.R$style
androidx.legacy.coreutils.R$integer
androidx.camera.core.FixedSizeSurfaceTexture:
    void <init>(int,boolean,android.util.Size)
    void <init>(boolean,android.util.Size)
androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState$1
androidx.recyclerview.selection.PointerDragEventInterceptor
androidx.camera.core.ImageCapture$15$1
android.support.v4.media.MediaDescriptionCompatApi23:
    private void <init>()
androidx.appcompat.view.menu.MenuDialogHelper:
    public void setPresenterCallback(androidx.appcompat.view.menu.MenuPresenter$Callback)
androidx.coordinatorlayout.R$layout
androidx.customview.R
org.pytorch.INativePeer:
    public abstract void resetNative()
    public varargs abstract org.pytorch.IValue runMethod(java.lang.String,org.pytorch.IValue[])
androidx.core.app.NotificationCompat$Action$SemanticAction
androidx.appcompat.widget.ActivityChooserModel$ActivityChooserModelClient
okhttp3.Cache$CacheRequestImpl$1
androidx.camera.core.ImageCapture$OnImageCapturedListener:
    public void <init>()
    public void onError(androidx.camera.core.ImageCapture$ImageCaptureError,java.lang.String,java.lang.Throwable)
androidx.vectordrawable.R$dimen
androidx.camera.camera2.R$attr
androidx.annotation.RawRes
androidx.appcompat.app.ActionBarDrawerToggle$ToolbarCompatDelegate
androidx.fragment.R$dimen
androidx.annotation.VisibleForTesting
androidx.core.util.Consumer
androidx.lifecycle.Lifecycling:
    static androidx.lifecycle.GenericLifecycleObserver getCallback(java.lang.Object)
    private void <init>()
    private static final int REFLECTIVE_CALLBACK
    private static final int GENERATED_CALLBACK
androidx.camera.core.CameraDeviceSurfaceManager:
    public abstract boolean checkSupported(java.lang.String,java.util.List)
    public abstract androidx.camera.core.SurfaceConfig transformSurfaceConfig(java.lang.String,int,android.util.Size)
androidx.appcompat.app.TwilightCalculator:
    public static final int DAY
    public static final int NIGHT
    private static final float DEGREES_TO_RADIANS
    private static final float J0
    private static final float ALTIDUTE_CORRECTION_CIVIL_TWILIGHT
    private static final float C1
    private static final float C2
    private static final float C3
    private static final float OBLIQUITY
    private static final long UTC_2000
androidx.appcompat.graphics.drawable.StateListDrawable:
    void <init>()
    private void updateStateFromTypedArray(android.content.res.TypedArray)
    private void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public void addState(int[],android.graphics.drawable.Drawable)
    public void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    androidx.appcompat.graphics.drawable.StateListDrawable$StateListState getStateListState()
    int getStateCount()
    int[] getStateSet(int)
    android.graphics.drawable.Drawable getStateDrawable(int)
    int getStateDrawableIndex(int[])
    void clearMutated()
    private static final java.lang.String TAG
    private static final boolean DEBUG
androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback$1
androidx.core.view.inputmethod.InputContentInfoCompat
androidx.core.app.NotificationCompat$BigPictureStyle
org.pytorch.torchvision.R$string
androidx.legacy.coreutils.R$attr
androidx.core.content.pm.ShortcutInfoCompatSaver$NoopImpl
androidx.recyclerview.selection.ItemDetailsLookup$ItemDetails
androidx.activity.R
androidx.print.PrintHelper$PrintUriAdapter$1
androidx.media.session.MediaButtonReceiver$MediaButtonConnectionCallback
androidx.core.app.NotificationCompat$BigTextStyle
androidx.camera.core.CameraX:
    public static boolean isBound(androidx.camera.core.UseCase)
    public static boolean hasCameraWithLensFacing(androidx.camera.core.CameraX$LensFacing)
    public static androidx.camera.core.CameraInfo getCameraInfo(androidx.camera.core.CameraX$LensFacing)
    public static androidx.camera.core.CameraControl getCameraControl(androidx.camera.core.CameraX$LensFacing)
    public static void setErrorListener(androidx.camera.core.CameraX$ErrorListener,android.os.Handler)
    public static com.google.common.util.concurrent.ListenableFuture deinit()
    public static android.content.Context getContext()
    public static java.util.Collection getActiveUseCases()
    private com.google.common.util.concurrent.ListenableFuture deinitInternal()
androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatBaseImpl
androidx.annotation.AnyThread
androidx.core.content.FileProvider$PathStrategy
androidx.drawerlayout.widget.DrawerLayout$AccessibilityDelegate
androidx.core.widget.ImageViewCompat:
    private void <init>()
androidx.appcompat.widget.AppCompatTextHelper:
    private static final int TEXT_FONT_WEIGHT_UNSPECIFIED
    private static final int SANS
    private static final int SERIF
    private static final int MONOSPACE
androidx.annotation.RestrictTo$Scope
androidx.core.widget.ContentLoadingProgressBar
androidx.recyclerview.selection.GridModel$GridHost
okhttp3.internal.http2.Http2Connection$6
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath:
    public boolean canApplyTheme()
    public void applyTheme(android.content.res.Resources$Theme)
androidx.appcompat.widget.TooltipCompatHandler:
    private static final java.lang.String TAG
    private static final long LONG_CLICK_HIDE_TIMEOUT_MS
    private static final long HOVER_HIDE_TIMEOUT_MS
    private static final long HOVER_HIDE_TIMEOUT_SHORT_MS
androidx.core.app.NotificationCompatJellybean
androidx.camera.camera2.impl.Camera2CameraControl$10
androidx.constraintlayout.solver.widgets.Analyzer:
    private void <init>()
androidx.constraintlayout.solver.Pools
androidx.appcompat.graphics.drawable.DrawableContainer:
    public void setEnterFadeDuration(int)
    public void setExitFadeDuration(int)
    public boolean isStateful()
    void setCurrentIndex(int)
    void clearMutated()
    private static final boolean DEBUG
    private static final java.lang.String TAG
    private static final boolean DEFAULT_DITHER
android.support.v4.media.MediaBrowserCompat$ConnectionCallback$StubApi21
androidx.fragment.R$color
androidx.appcompat.widget.ThemedSpinnerAdapter$Helper
androidx.camera.camera2.impl.Camera$6
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21$3
androidx.fragment.app.FragmentManagerImpl$PopBackStackState
androidx.core.app.JobIntentService
androidx.appcompat.widget.ActivityChooserView$1
android.support.v4.media.session.MediaControllerCompatApi24$TransportControls
androidx.recyclerview.widget.BatchingListUpdateCallback
okhttp3.internal.cache.DiskLruCache$Editor$1
androidx.core.os.HandlerCompat:
    public static android.os.Handler createAsync(android.os.Looper,android.os.Handler$Callback)
    public static boolean postDelayed(android.os.Handler,java.lang.Runnable,java.lang.Object,long)
    private void <init>()
    private static final java.lang.String TAG
androidx.camera.core.ImageSaver
androidx.media.MediaSessionManager$MediaSessionManagerImpl
androidx.constraintlayout.solver.widgets.ResolutionNode:
    public void invalidateAnchors()
    public void remove(androidx.constraintlayout.solver.widgets.ResolutionDimension)
    public static final int UNRESOLVED
    public static final int RESOLVED
    public static final int REMOVED
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$5
com.squareup.picasso.TargetAction
okhttp3.internal.platform.AndroidPlatform$CloseGuard
androidx.loader.R$id
android.support.v4.media.session.MediaSessionCompatApi24$Callback
androidx.viewpager.widget.ViewPager$2
androidx.legacy.coreui.R$id
androidx.fragment.R$attr
androidx.legacy.v4.R$style
androidx.recyclerview.selection.MouseInputHandler
androidx.core.view.accessibility.AccessibilityClickableSpanCompat:
    public static final java.lang.String SPAN_ID
androidx.customview.widget.ViewDragHelper
androidx.cardview.widget.RoundRectDrawableWithShadow
okhttp3.OkHttpClient$Builder
okhttp3.internal.http1.Http1Codec$UnknownLengthSource
org.pytorch.Tensor:
    public static java.nio.ByteBuffer allocateByteBuffer(int)
    public static java.nio.IntBuffer allocateIntBuffer(int)
    public static java.nio.LongBuffer allocateLongBuffer(int)
    public static java.nio.DoubleBuffer allocateDoubleBuffer(int)
    public static org.pytorch.Tensor fromBlobUnsigned(byte[],long[])
    public static org.pytorch.Tensor fromBlob(byte[],long[])
    public static org.pytorch.Tensor fromBlob(int[],long[])
    public static org.pytorch.Tensor fromBlob(float[],long[])
    public static org.pytorch.Tensor fromBlob(long[],long[])
    public static org.pytorch.Tensor fromBlob(long[],double[])
    public static org.pytorch.Tensor fromBlobUnsigned(java.nio.ByteBuffer,long[])
    public static org.pytorch.Tensor fromBlob(java.nio.ByteBuffer,long[])
    public static org.pytorch.Tensor fromBlob(java.nio.IntBuffer,long[])
    public static org.pytorch.Tensor fromBlob(java.nio.LongBuffer,long[])
    public static org.pytorch.Tensor fromBlob(java.nio.DoubleBuffer,long[])
    private static org.pytorch.Tensor nativeNewTensor(java.nio.ByteBuffer,long[],int)
    public long numel()
    public long[] shape()
    public abstract org.pytorch.DType dtype()
    int dtypeJniCode()
    public byte[] getDataAsByteArray()
    public byte[] getDataAsUnsignedByteArray()
    public int[] getDataAsIntArray()
    public long[] getDataAsLongArray()
    public double[] getDataAsDoubleArray()
    java.nio.Buffer getRawDataBuffer()
    private static final java.lang.String ERROR_MSG_DATA_BUFFER_NOT_NULL
    private static final java.lang.String ERROR_MSG_DATA_ARRAY_NOT_NULL
    private static final java.lang.String ERROR_MSG_SHAPE_NOT_NULL
    private static final java.lang.String ERROR_MSG_SHAPE_NOT_EMPTY
    private static final java.lang.String ERROR_MSG_SHAPE_NON_NEGATIVE
    private static final java.lang.String ERROR_MSG_DATA_BUFFER_MUST_HAVE_NATIVE_BYTE_ORDER
    private static final java.lang.String ERROR_MSG_DATA_BUFFER_MUST_BE_DIRECT
    private static final int INT_SIZE_BYTES
    private static final int FLOAT_SIZE_BYTES
    private static final int LONG_SIZE_BYTES
    private static final int DOUBLE_SIZE_BYTES
androidx.customview.R$style
androidx.appcompat.widget.LinearLayoutCompat:
    public boolean isBaselineAligned()
    public boolean isMeasureWithLargestChildEnabled()
    public static final int HORIZONTAL
    public static final int VERTICAL
    public static final int SHOW_DIVIDER_NONE
    public static final int SHOW_DIVIDER_BEGINNING
    public static final int SHOW_DIVIDER_MIDDLE
    public static final int SHOW_DIVIDER_END
    private static final int VERTICAL_GRAVITY_COUNT
    private static final int INDEX_CENTER_VERTICAL
    private static final int INDEX_TOP
    private static final int INDEX_BOTTOM
    private static final int INDEX_FILL
    private static final java.lang.String ACCESSIBILITY_CLASS_NAME
androidx.lifecycle.Transformations$3
android.support.v4.media.session.MediaControllerCompat$MediaControllerExtraData
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat:
    public static androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat create(android.content.Context,int,android.content.res.Resources$Theme)
    public void addState(int[],android.graphics.drawable.Drawable,int)
    public void addTransition(int,int,android.graphics.drawable.Drawable,boolean)
    void clearMutated()
    public synthetic bridge void addState(int[],android.graphics.drawable.Drawable)
    public synthetic bridge void setExitFadeDuration(int)
    public synthetic bridge void setEnterFadeDuration(int)
    private static final java.lang.String ELEMENT_TRANSITION
    private static final java.lang.String ELEMENT_ITEM
    private static final java.lang.String TRANSITION_MISSING_DRAWABLE_ERROR
    private static final java.lang.String TRANSITION_MISSING_FROM_TO_ID
    private static final java.lang.String ITEM_MISSING_DRAWABLE_ERROR
com.squareup.picasso.RequestHandler
androidx.appcompat.app.ActionBarDrawerToggle
androidx.camera.camera2.impl.Camera2CameraControl$4
androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams
android.support.v4.media.session.MediaSessionCompatApi24
androidx.cardview.R$styleable
org.pytorch.R$dimen
androidx.camera.core.impl.utils.Absent
android.support.v4.media.MediaBrowserCompat$CallbackHandler
androidx.collection.ContainerHelpers:
    private void <init>()
androidx.camera.camera2.R$layout
org.pytorch.DType
androidx.core.R$styleable:
    private void <init>()
androidx.core.view.ViewCompat$ScrollAxis
androidx.annotation.HalfFloat
okio.Okio$3
androidx.viewpager.widget.PagerTabStrip
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$6
okhttp3.internal.http2.Http2Connection$Listener$1
com.downloader.PRDownloader:
    private void <init>()
    public static void initialize(android.content.Context)
    public static void initialize(android.content.Context,com.downloader.PRDownloaderConfig)
    public static void pause(int)
    public static void resume(int)
    public static void cancel(int)
    public static void cancelAll()
    public static com.downloader.Status getStatus(int)
    public static void shutDown()
androidx.recyclerview.selection.ViewAutoScroller$1
androidx.annotation.LayoutRes
androidx.cardview.widget.CardViewApi17Impl$1
androidx.core.provider.FontsContractCompat$4$3
androidx.media.MediaBrowserServiceCompat$3
androidx.core.app.RemoteActionCompat:
    public void <init>(androidx.core.graphics.drawable.IconCompat,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)
    public void <init>(androidx.core.app.RemoteActionCompat)
    public static androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction)
    public void setEnabled(boolean)
    public boolean isEnabled()
    public void setShouldShowIcon(boolean)
    public boolean shouldShowIcon()
    public androidx.core.graphics.drawable.IconCompat getIcon()
    public java.lang.CharSequence getTitle()
    public java.lang.CharSequence getContentDescription()
    public android.app.PendingIntent getActionIntent()
    public android.app.RemoteAction toRemoteAction()
androidx.core.graphics.BitmapCompat
androidx.recyclerview.selection.ToolHandlerRegistry
androidx.core.provider.SelfDestructiveThread:
    public boolean isRunning()
    public int getGeneration()
    private static final int MSG_INVOKE_RUNNABLE
    private static final int MSG_DESTRUCTION
android.support.v4.media.session.MediaControllerCompatApi21:
    public static java.lang.Object fromToken(android.content.Context,java.lang.Object)
    public static void registerCallback(java.lang.Object,java.lang.Object,android.os.Handler)
    public static void unregisterCallback(java.lang.Object,java.lang.Object)
    public static void setMediaController(android.app.Activity,java.lang.Object)
    public static java.lang.Object getMediaController(android.app.Activity)
    public static java.lang.Object getSessionToken(java.lang.Object)
    public static java.lang.Object getTransportControls(java.lang.Object)
    public static java.lang.Object getPlaybackState(java.lang.Object)
    public static java.lang.Object getMetadata(java.lang.Object)
    public static java.util.List getQueue(java.lang.Object)
    public static java.lang.CharSequence getQueueTitle(java.lang.Object)
    public static android.os.Bundle getExtras(java.lang.Object)
    public static int getRatingType(java.lang.Object)
    public static long getFlags(java.lang.Object)
    public static java.lang.Object getPlaybackInfo(java.lang.Object)
    public static android.app.PendingIntent getSessionActivity(java.lang.Object)
    public static boolean dispatchMediaButtonEvent(java.lang.Object,android.view.KeyEvent)
    public static void setVolumeTo(java.lang.Object,int,int)
    public static void adjustVolume(java.lang.Object,int,int)
    public static void sendCommand(java.lang.Object,java.lang.String,android.os.Bundle,android.os.ResultReceiver)
    public static java.lang.String getPackageName(java.lang.Object)
    private void <init>()
androidx.fragment.R$string
okhttp3.internal.connection.RouteSelector$Selection
androidx.vectordrawable.R$style
androidx.annotation.UiThread
androidx.recyclerview.selection.ItemDetailsLookup
androidx.appcompat.app.TwilightManager:
    static void setInstance(androidx.appcompat.app.TwilightManager)
    private static final java.lang.String TAG
    private static final int SUNRISE
    private static final int SUNSET
android.support.v4.media.MediaBrowserCompatApi23$ItemCallbackProxy
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatApi26Impl:
    private static int getMaxSharedSurfaceCountApi26()
    private static java.util.List getMutableSurfaceListApi26(android.hardware.camera2.params.OutputConfiguration)
    public void enableSurfaceSharing()
    final boolean isSurfaceSharingEnabled()
    public void addSurface(android.view.Surface)
    public void setPhysicalCameraId(java.lang.String)
    public void removeSurface(android.view.Surface)
    public int getMaxSharedSurfaceCount()
    public java.util.List getSurfaces()
    private static final java.lang.String MAX_SHARED_SURFACES_COUNT_FIELD
    private static final java.lang.String SURFACES_FIELD
com.downloader.database.NoOpsDbHelper:
    public void update(com.downloader.database.DownloadModel)
    public void clear()
androidx.appcompat.widget.VectorEnabledTintResources:
    public static void setCompatVectorFromResourcesEnabled(boolean)
    public static final int MAX_SDK_WHERE_REQUIRED
com.squareup.picasso.NetworkRequestHandler$ResponseException
android.support.v4.media.MediaDescriptionCompatApi21$Builder:
    private void <init>()
androidx.cursoradapter.widget.ResourceCursorAdapter:
    public void <init>(android.content.Context,int,android.database.Cursor)
    public void <init>(android.content.Context,int,android.database.Cursor,int)
    public void setViewResource(int)
    public void setDropDownViewResource(int)
androidx.camera.core.impl.utils.executor.CameraXExecutors:
    private void <init>()
    public static java.util.concurrent.Executor ioExecutor()
androidx.constraintlayout.solver.widgets.Barrier:
    public boolean allowsGoneWidget()
    public static final int LEFT
    public static final int RIGHT
    public static final int TOP
    public static final int BOTTOM
androidx.media.R$styleable
androidx.viewpager.widget.ViewPager$OnAdapterChangeListener
androidx.arch.core.executor.ArchTaskExecutor:
    public static java.util.concurrent.Executor getMainThreadExecutor()
    public static java.util.concurrent.Executor getIOThreadExecutor()
    public void setDelegate(androidx.arch.core.executor.TaskExecutor)
androidx.annotation.InspectableProperty
com.squareup.picasso.ImageViewAction
okhttp3.internal.http2.Http2
androidx.camera.camera2.impl.UseCaseSurfaceOccupancyManager:
    private void <init>()
androidx.camera.core.MeteringPoint
androidx.appcompat.widget.DecorToolbar:
    public abstract void setTitle(java.lang.CharSequence)
    public abstract java.lang.CharSequence getSubtitle()
    public abstract void setSubtitle(java.lang.CharSequence)
    public abstract boolean hasIcon()
    public abstract boolean hasLogo()
    public abstract void setLogo(android.graphics.drawable.Drawable)
    public abstract boolean hasEmbeddedTabs()
    public abstract boolean isTitleTruncated()
    public abstract void setNavigationMode(int)
    public abstract void setDropdownParams(android.widget.SpinnerAdapter,android.widget.AdapterView$OnItemSelectedListener)
    public abstract void setDropdownSelectedPosition(int)
    public abstract int getDropdownSelectedPosition()
    public abstract int getDropdownItemCount()
    public abstract android.view.View getCustomView()
    public abstract void animateToVisibility(int)
    public abstract void setNavigationIcon(android.graphics.drawable.Drawable)
    public abstract void setNavigationIcon(int)
    public abstract void setNavigationContentDescription(java.lang.CharSequence)
    public abstract void setNavigationContentDescription(int)
    public abstract void setDefaultNavigationContentDescription(int)
    public abstract void setDefaultNavigationIcon(android.graphics.drawable.Drawable)
    public abstract void saveHierarchyState(android.util.SparseArray)
    public abstract void restoreHierarchyState(android.util.SparseArray)
    public abstract void setBackgroundDrawable(android.graphics.drawable.Drawable)
    public abstract int getHeight()
    public abstract int getVisibility()
    public abstract void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter$Callback,androidx.appcompat.view.menu.MenuBuilder$Callback)
    public abstract android.view.Menu getMenu()
androidx.core.os.LocaleListInterface
androidx.camera.core.QueuedImageReaderProxy:
    synchronized int getCurrentImages()
androidx.recyclerview.selection.Resettable
androidx.core.widget.ContentLoadingProgressBar$2
org.pytorch.torchvision.R$integer
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplApi19$1
androidx.camera.core.CameraCaptureResultImageInfo:
    androidx.camera.core.CameraCaptureResult getCameraCaptureResult()
androidx.camera.core.ImageCapture$CaptureCallbackChecker$CaptureResultChecker
okhttp3.internal.http2.Http2Stream$StreamTimeout
androidx.appcompat.widget.AppCompatPopupWindow:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
com.downloader.request.DownloadRequest:
    public void setPriority(com.downloader.Priority)
    public void setTag(java.lang.Object)
    public void setDirPath(java.lang.String)
    public void setFileName(java.lang.String)
    public java.util.concurrent.Future getFuture()
    public void setReadTimeout(int)
    public void setConnectTimeout(int)
    public void setUserAgent(java.lang.String)
    public void setDownloadId(int)
    public com.downloader.request.DownloadRequest setOnStartOrResumeListener(com.downloader.OnStartOrResumeListener)
    public com.downloader.request.DownloadRequest setOnPauseListener(com.downloader.OnPauseListener)
    public com.downloader.Response executeSync()
androidx.recyclerview.widget.ChildHelper$Bucket:
    static final int BITS_PER_WORD
    static final long LAST_BIT
androidx.annotation.BinderThread
okio.AsyncTimeout$2
androidx.swiperefreshlayout.widget.CircularProgressDrawable$2
androidx.camera.core.ImageCapture$14
androidx.recyclerview.widget.PagerSnapHelper$1
androidx.fragment.app.FragmentTabHost$SavedState
androidx.core.content.pm.ShortcutManagerCompat$1
androidx.core.app.JobIntentService$CompatWorkItem
androidx.core.text.TextDirectionHeuristicsCompat
androidx.asynclayoutinflater.view.AsyncLayoutInflater$BasicInflater
androidx.annotation.Nullable
androidx.coordinatorlayout.R$styleable
io.github.prabhuomkar.pytorchandroid.ui.fragments.TaskFragment:
    private static final java.lang.String ARG_NAME
    private static final java.lang.String ARG_DESCRIPTION
    private static final java.lang.String ARG_IMAGELINK
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplApi18
androidx.media.VolumeProviderCompatApi21$1
io.github.prabhuomkar.pytorchandroid.R$attr
androidx.camera.core.VideoCapture$Metadata:
    public android.location.Location location
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21$2
androidx.recyclerview.widget.RecyclerView$RecyclerViewDataObserver:
    public void onChanged()
    public void onItemRangeChanged(int,int,java.lang.Object)
    public void onItemRangeInserted(int,int)
    public void onItemRangeRemoved(int,int)
    public void onItemRangeMoved(int,int,int)
    void triggerUpdateProcessor()
com.facebook.jni.DestructorThread$DestructorList
androidx.coordinatorlayout.widget.ViewGroupUtils
androidx.camera.core.VideoCapture$Defaults:
    private static final int DEFAULT_VIDEO_FRAME_RATE
    private static final int DEFAULT_BIT_RATE
    private static final int DEFAULT_INTRA_FRAME_INTERVAL
    private static final int DEFAULT_AUDIO_BIT_RATE
    private static final int DEFAULT_AUDIO_SAMPLE_RATE
    private static final int DEFAULT_AUDIO_CHANNEL_COUNT
    private static final int DEFAULT_AUDIO_RECORD_SOURCE
    private static final int DEFAULT_AUDIO_MIN_BUFFER_SIZE
    private static final int DEFAULT_SURFACE_OCCUPANCY_PRIORITY
androidx.media.MediaBrowserServiceCompat$ServiceBinderImpl$7
androidx.recyclerview.widget.ItemTouchUIUtil
androidx.core.internal.package-info
androidx.annotation.AttrRes
androidx.core.content.pm.ActivityInfoCompat
androidx.core.view.GestureDetectorCompat
androidx.core.app.Person
androidx.slidingpanelayout.R$attr
androidx.annotation.ArrayRes
androidx.annotation.StyleRes
androidx.camera.core.ImageCapture$12$1
androidx.core.content.MimeTypeFilter
androidx.core.app.NotificationCompat$NotificationVisibility
androidx.recyclerview.widget.MessageThreadUtil$2
androidx.camera.camera2.impl.Camera$15
androidx.appcompat.widget.ActivityChooserView
androidx.core.view.VelocityTrackerCompat
com.squareup.picasso.RequestHandler$Result
androidx.core.text.PrecomputedTextCompat$PrecomputedTextFutureTask$PrecomputedTextCallback
androidx.recyclerview.widget.SortedList$BatchedCallback
androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat
androidx.print.PrintHelper$PrintUriAdapter$1$1
okhttp3.internal.cache.CacheRequest
androidx.camera.camera2.impl.Camera2CaptureOptionUnpacker:
    public void unpack(androidx.camera.core.UseCaseConfig,androidx.camera.core.CaptureConfig$Builder)
androidx.slidingpanelayout.R
okhttp3.CipherSuite
androidx.viewpager.R$drawable
com.downloader.database.AppDbHelper
com.squareup.picasso.Picasso$LoadedFrom
okio.Pipe$PipeSink
androidx.core.R$color
org.pytorch.Tensor$Tensor_float64
androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplBase$GestureHandler
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$MediaSessionStub
androidx.camera.core.MetadataImageReader:
    void <init>(androidx.camera.core.ImageReaderProxy,android.os.Handler)
    private static final java.lang.String TAG
okhttp3.internal.http.HttpCodec
androidx.recyclerview.widget.RecyclerView$Recycler:
    public void bindViewToPosition(android.view.View,int)
    static final int DEFAULT_CACHE_SIZE
androidx.recyclerview.selection.ViewAutoScroller$RuntimeHost
androidx.recyclerview.widget.ItemTouchHelper$3
androidx.camera.core.UseCaseGroupRepository$1
androidx.recyclerview.selection.SelectionTracker$SelectionObserver
androidx.appcompat.app.ActionBarDrawerToggle$1
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompat$OutputConfigurationCompatImpl:
    public abstract void enableSurfaceSharing()
    public abstract void setPhysicalCameraId(java.lang.String)
    public abstract void addSurface(android.view.Surface)
    public abstract void removeSurface(android.view.Surface)
    public abstract int getMaxSharedSurfaceCount()
    public abstract java.util.List getSurfaces()
    public abstract int getSurfaceGroupId()
androidx.core.text.util.LinkifyCompat$LinkSpec
androidx.core.app.NotificationCompat$WearableExtender
androidx.recyclerview.selection.GridModel
okhttp3.Response$Builder
androidx.annotation.BoolRes
androidx.recyclerview.selection.DefaultBandHost
android.support.v4.media.session.MediaControllerCompat$TransportControlsBase
androidx.lifecycle.AndroidViewModel
okio.RealBufferedSource
androidx.loader.app.LoaderManagerImpl$LoaderViewModel:
    void startCreatingLoader()
    boolean isCreatingLoader()
    void finishCreatingLoader()
    void putLoader(int,androidx.loader.app.LoaderManagerImpl$LoaderInfo)
    androidx.loader.app.LoaderManagerImpl$LoaderInfo getLoader(int)
    void removeLoader(int)
    boolean hasRunningLoaders()
androidx.core.app.NotificationBuilderWithBuilderAccessor
androidx.viewpager.widget.ViewPager$3
androidx.core.app.FrameMetricsAggregator$FrameMetricsBaseImpl
androidx.constraintlayout.solver.widgets.WidgetContainer:
    public void <init>(int,int,int,int)
    public void <init>(int,int)
    public static androidx.constraintlayout.solver.widgets.Rectangle getBounds(java.util.ArrayList)
    public varargs void add(androidx.constraintlayout.solver.widgets.ConstraintWidget[])
    public java.util.ArrayList getChildren()
    public androidx.constraintlayout.solver.widgets.ConstraintWidget findWidget(float,float)
    public java.util.ArrayList findWidgets(int,int,int,int)
androidx.camera.camera2.impl.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl:
    public abstract int captureSingleRequest(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)
    public abstract int setRepeatingBurstRequests(android.hardware.camera2.CameraCaptureSession,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)
androidx.appcompat.widget.ActionMenuView:
    private static final java.lang.String TAG
    static final int MIN_CELL_SIZE
    static final int GENERATED_ITEM_PADDING
androidx.annotation.FontRes
okio.BufferedSource
androidx.camera.core.R$attr
androidx.slidingpanelayout.R$string
android.support.v4.media.MediaBrowserCompat$MediaBrowserImpl
androidx.core.app.AppLaunchChecker
okio.Source
androidx.media.AudioAttributesCompat$AttributeContentType
androidx.recyclerview.selection.GestureSelectionHelper
androidx.recyclerview.widget.ViewInfoStore:
    private static final boolean DEBUG
androidx.recyclerview.selection.OperationMonitor$OnChangeListener
androidx.loader.content.ModernAsyncTask$3
androidx.recyclerview.widget.RecyclerView$SmoothScroller$ScrollVectorProvider
io.github.prabhuomkar.pytorchandroid.R$anim
androidx.recyclerview.widget.LinearSmoothScroller
android.support.v4.media.session.MediaSessionCompat$MediaSessionImpl
androidx.core.text.util.LinkifyCompat$1
com.facebook.jni.annotations.DoNotStrip
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper:
    public void <init>(android.os.ResultReceiver)
androidx.core.util.Pools
androidx.annotation.MenuRes
android.support.v4.media.MediaMetadataCompat$Builder
androidx.recyclerview.selection.SelectionTracker$Builder$5
androidx.constraintlayout.solver.widgets.ResolutionAnchor:
    public void remove(androidx.constraintlayout.solver.widgets.ResolutionDimension)
    public static final int UNCONNECTED
    public static final int DIRECT_CONNECTION
    public static final int CENTER_CONNECTION
    public static final int MATCH_CONNECTION
    public static final int CHAIN_CONNECTION
    public static final int BARRIER_CONNECTION
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$2
androidx.lifecycle.ComputableLiveData
androidx.core.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable
androidx.recyclerview.widget.AsyncListUtil$ViewCallback
androidx.coordinatorlayout.R$drawable
androidx.recyclerview.widget.SimpleItemAnimator:
    public boolean getSupportsChangeAnimations()
    public void setSupportsChangeAnimations(boolean)
    private static final boolean DEBUG
    private static final java.lang.String TAG
androidx.core.app.JobIntentService$CommandProcessor
androidx.legacy.coreui.R$integer
androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatImpl
androidx.core.view.accessibility.AccessibilityNodeProviderCompat:
    public void <init>()
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int)
    public boolean performAction(int,int,android.os.Bundle)
    public java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat findFocus(int)
    public static final int HOST_VIEW_ID
androidx.annotation.AnimatorRes
androidx.versionedparcelable.ParcelField
androidx.camera.core.VideoCapture$VideoSavedListenerWrapper
android.support.v4.media.session.MediaSessionCompat$1
androidx.appcompat.app.AlertDialog$Builder:
    public androidx.appcompat.app.AlertDialog$Builder setTitle(int)
    public androidx.appcompat.app.AlertDialog$Builder setMessage(int)
    public androidx.appcompat.app.AlertDialog$Builder setIcon(int)
    public androidx.appcompat.app.AlertDialog$Builder setIconAttribute(int)
    public androidx.appcompat.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setPositiveButtonIcon(android.graphics.drawable.Drawable)
    public androidx.appcompat.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setNegativeButtonIcon(android.graphics.drawable.Drawable)
    public androidx.appcompat.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setNeutralButtonIcon(android.graphics.drawable.Drawable)
    public androidx.appcompat.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)
    public androidx.appcompat.app.AlertDialog$Builder setOnDismissListener(android.content.DialogInterface$OnDismissListener)
    public androidx.appcompat.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)
    public androidx.appcompat.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)
    public androidx.appcompat.app.AlertDialog$Builder setView(int)
    public androidx.appcompat.app.AlertDialog$Builder setView(android.view.View)
    public androidx.appcompat.app.AlertDialog$Builder setView(android.view.View,int,int,int,int)
    public androidx.appcompat.app.AlertDialog$Builder setInverseBackgroundForced(boolean)
    public androidx.appcompat.app.AlertDialog$Builder setRecycleOnMeasureEnabled(boolean)
    public androidx.appcompat.app.AlertDialog show()
androidx.core.provider.FontsContractCompat$FontRequestCallback
androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord
androidx.slidingpanelayout.R$id
androidx.core.view.MenuItemCompat$OnActionExpandListener
androidx.camera.core.ImageSaver$3
androidx.constraintlayout.widget.ConstraintHelper:
    public void <init>(android.content.Context,android.util.AttributeSet)
    public void <init>(android.content.Context,android.util.AttributeSet,int)
androidx.recyclerview.selection.GridModel$SelectionObserver
androidx.loader.app.LoaderManagerImpl$LoaderObserver:
    void <init>(androidx.loader.content.Loader,androidx.loader.app.LoaderManager$LoaderCallbacks)
    public void onChanged(java.lang.Object)
    public java.lang.String toString()
    private final androidx.loader.content.Loader mLoader
    private final androidx.loader.app.LoaderManager$LoaderCallbacks mCallback
    private boolean mDeliveredData
androidx.coordinatorlayout.R$color
androidx.camera.core.SurfaceCombination:
    public boolean removeSurfaceConfig(androidx.camera.core.SurfaceConfig)
    public java.util.List getSurfaceConfigList()
androidx.viewpager.widget.ViewPager$SavedState
androidx.recyclerview.widget.RecyclerView$ItemAnimator$AdapterChanges
androidx.camera.core.MeteringPointFactory
androidx.loader.content.Loader$OnLoadCanceledListener
androidx.core.graphics.TypefaceCompatBaseImpl:
    private static final java.lang.String TAG
    private static final int INVALID_KEY
android.support.v4.media.MediaBrowserCompatApi23
androidx.core.view.ViewCompat$NestedScrollType
androidx.recyclerview.selection.GridModel$RelativePoint
okhttp3.internal.http2.Http2Connection$5
androidx.loader.R$styleable
androidx.appcompat.app.AppCompatViewInflater:
    private static final java.lang.String LOG_TAG
androidx.recyclerview.widget.RecyclerView$ViewHolder:
    public final int getPosition()
    void stopIgnoring()
    static final int FLAG_BOUND
    static final int FLAG_UPDATE
    static final int FLAG_INVALID
    static final int FLAG_REMOVED
    static final int FLAG_NOT_RECYCLABLE
    static final int FLAG_RETURNED_FROM_SCRAP
    static final int FLAG_IGNORE
    static final int FLAG_TMP_DETACHED
    static final int FLAG_ADAPTER_POSITION_UNKNOWN
    static final int FLAG_ADAPTER_FULLUPDATE
    static final int FLAG_MOVED
    static final int FLAG_APPEARED_IN_PRE_LAYOUT
    static final int PENDING_ACCESSIBILITY_STATE_NOT_SET
    static final int FLAG_BOUNCED_FROM_HIDDEN_LIST
androidx.appcompat.widget.AppCompatEditText:
    public void <init>(android.content.Context)
androidx.core.view.NestedScrollingChild3:
    public abstract void dispatchNestedScroll(int,int,int,int,int[],int,int[])
okhttp3.HttpUrl
androidx.constraintlayout.solver.widgets.Optimizer:
    public void <init>()
    public static final int OPTIMIZATION_NONE
    public static final int OPTIMIZATION_DIRECT
    public static final int OPTIMIZATION_BARRIER
    public static final int OPTIMIZATION_CHAIN
    public static final int OPTIMIZATION_DIMENSIONS
    public static final int OPTIMIZATION_RATIO
    public static final int OPTIMIZATION_GROUPS
    public static final int OPTIMIZATION_STANDARD
    static final int FLAG_USE_OPTIMIZE
    static final int FLAG_CHAIN_DANGLING
    static final int FLAG_RECOMPUTE_BOUNDS
androidx.recyclerview.selection.Range
android.support.v4.os.ResultReceiver:
    public void <init>(android.os.Handler)
    public void send(int,android.os.Bundle)
androidx.core.app.JobIntentService$JobWorkEnqueuer
androidx.arch.core.R
androidx.cardview.widget.CardViewApi17Impl
androidx.core.graphics.drawable.RoundedBitmapDrawableFactory
androidx.lifecycle.LifecycleRegistry:
    public int getObserverCount()
androidx.camera.camera2.impl.CaptureCallbackConverter:
    private void <init>()
androidx.appcompat.widget.ActionBarContextView:
    public boolean hideOverflowMenu()
    public boolean isOverflowMenuShowing()
    public synthetic bridge void dismissPopupMenus()
    public synthetic bridge boolean canShowOverflowMenu()
    public synthetic bridge boolean isOverflowReserved()
    public synthetic bridge boolean isOverflowMenuShowPending()
    public synthetic bridge void postShowOverflowMenu()
    public synthetic bridge void animateToVisibility(int)
    private static final java.lang.String TAG
androidx.fragment.app.FragmentHostCallback:
    public void <init>(android.content.Context,android.os.Handler,int)
    public void onStartActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int)
    public void onStartActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle)
    public void onStartIntentSenderFromFragment(androidx.fragment.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
    public void onRequestPermissionsFromFragment(androidx.fragment.app.Fragment,java.lang.String[],int)
    public boolean onShouldShowRequestPermissionRationale(java.lang.String)
android.support.v4.media.session.IMediaControllerCallback$Stub:
    public static android.support.v4.media.session.IMediaControllerCallback asInterface(android.os.IBinder)
    private static final java.lang.String DESCRIPTOR
    static final int TRANSACTION_onEvent
    static final int TRANSACTION_onSessionDestroyed
    static final int TRANSACTION_onPlaybackStateChanged
    static final int TRANSACTION_onMetadataChanged
    static final int TRANSACTION_onQueueChanged
    static final int TRANSACTION_onQueueTitleChanged
    static final int TRANSACTION_onExtrasChanged
    static final int TRANSACTION_onVolumeInfoChanged
    static final int TRANSACTION_onRepeatModeChanged
    static final int TRANSACTION_onShuffleModeChangedRemoved
    static final int TRANSACTION_onCaptioningEnabledChanged
    static final int TRANSACTION_onShuffleModeChanged
    static final int TRANSACTION_onSessionReady
androidx.fragment.app.FragmentTransaction:
    public androidx.fragment.app.FragmentTransaction add(androidx.fragment.app.Fragment,java.lang.String)
    public androidx.fragment.app.FragmentTransaction add(int,androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction add(int,androidx.fragment.app.Fragment,java.lang.String)
    public androidx.fragment.app.FragmentTransaction remove(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction hide(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction show(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction detach(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction attach(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction setPrimaryNavigationFragment(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction setMaxLifecycle(androidx.fragment.app.Fragment,androidx.lifecycle.Lifecycle$State)
    public boolean isEmpty()
    public androidx.fragment.app.FragmentTransaction setCustomAnimations(int,int)
    public androidx.fragment.app.FragmentTransaction setCustomAnimations(int,int,int,int)
    public androidx.fragment.app.FragmentTransaction addSharedElement(android.view.View,java.lang.String)
    public androidx.fragment.app.FragmentTransaction setTransitionStyle(int)
    public boolean isAddToBackStackAllowed()
    public androidx.fragment.app.FragmentTransaction disallowAddToBackStack()
    public androidx.fragment.app.FragmentTransaction setBreadCrumbTitle(int)
    public androidx.fragment.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)
    public androidx.fragment.app.FragmentTransaction setBreadCrumbShortTitle(int)
    public androidx.fragment.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)
    public androidx.fragment.app.FragmentTransaction setReorderingAllowed(boolean)
    public androidx.fragment.app.FragmentTransaction setAllowOptimization(boolean)
    public androidx.fragment.app.FragmentTransaction runOnCommit(java.lang.Runnable)
    public abstract int commitAllowingStateLoss()
    public abstract void commitNow()
    public abstract void commitNowAllowingStateLoss()
    static final int OP_NULL
    static final int OP_ADD
    static final int OP_REPLACE
    static final int OP_REMOVE
    static final int OP_HIDE
    static final int OP_SHOW
    static final int OP_DETACH
    static final int OP_ATTACH
    static final int OP_SET_PRIMARY_NAV
    static final int OP_UNSET_PRIMARY_NAV
    static final int OP_SET_MAX_LIFECYCLE
    public static final int TRANSIT_ENTER_MASK
    public static final int TRANSIT_EXIT_MASK
    public static final int TRANSIT_UNSET
    public static final int TRANSIT_NONE
    public static final int TRANSIT_FRAGMENT_OPEN
    public static final int TRANSIT_FRAGMENT_CLOSE
    public static final int TRANSIT_FRAGMENT_FADE
androidx.core.app.AppComponentFactory
okhttp3.internal.http1.Http1Codec$AbstractSource
androidx.core.app.NotificationCompatExtras
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$4
androidx.media.MediaBrowserServiceCompat$ServiceCallbacksCompat
androidx.core.R$attr:
    private void <init>()
androidx.appcompat.R$integer
androidx.annotation.ColorRes
androidx.core.content.res.GrowingArrayUtils:
    public static long[] append(long[],int,long)
    public static boolean[] append(boolean[],int,boolean)
    public static java.lang.Object[] insert(java.lang.Object[],int,int,java.lang.Object)
    public static int[] insert(int[],int,int,int)
    public static long[] insert(long[],int,int,long)
    public static boolean[] insert(boolean[],int,int,boolean)
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$5
androidx.annotation.IdRes
androidx.appcompat.view.menu.MenuItemWrapperICS:
    static final java.lang.String LOG_TAG
androidx.drawerlayout.widget.DrawerLayout
okhttp3.ConnectionSpec$Builder
android.support.v4.media.MediaBrowserCompat$ItemCallback$StubApi23
androidx.appcompat.resources.R$dimen
androidx.core.view.ViewCompat$5:
    void frameworkSet(android.view.View,java.lang.Boolean)
    boolean shouldUpdate(java.lang.Boolean,java.lang.Boolean)
    synthetic bridge void frameworkSet(android.view.View,java.lang.Object)
    synthetic bridge boolean shouldUpdate(java.lang.Object,java.lang.Object)
okio.Pipe
androidx.core.text.ICUCompat
androidx.core.os.ParcelableCompatCreatorCallbacks
androidx.core.util.Pair
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21:
    public void <init>(android.content.Context,android.support.v4.media.session.MediaSessionCompat$Token)
    private void requestExtraBinder()
    public final void registerCallback(android.support.v4.media.session.MediaControllerCompat$Callback,android.os.Handler)
    public final void unregisterCallback(android.support.v4.media.session.MediaControllerCompat$Callback)
    public boolean dispatchMediaButtonEvent(android.view.KeyEvent)
    public android.support.v4.media.session.MediaControllerCompat$TransportControls getTransportControls()
    public android.support.v4.media.session.PlaybackStateCompat getPlaybackState()
    public android.support.v4.media.MediaMetadataCompat getMetadata()
    public java.util.List getQueue()
    public void addQueueItem(android.support.v4.media.MediaDescriptionCompat)
    public void addQueueItem(android.support.v4.media.MediaDescriptionCompat,int)
    public void removeQueueItem(android.support.v4.media.MediaDescriptionCompat)
    public java.lang.CharSequence getQueueTitle()
    public android.os.Bundle getExtras()
    public int getRatingType()
    public boolean isCaptioningEnabled()
    public int getRepeatMode()
    public int getShuffleMode()
    public long getFlags()
    public android.support.v4.media.session.MediaControllerCompat$PlaybackInfo getPlaybackInfo()
    public android.app.PendingIntent getSessionActivity()
    public void setVolumeTo(int,int)
    public void adjustVolume(int,int)
    public void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)
    public boolean isSessionReady()
    public java.lang.String getPackageName()
    public java.lang.Object getMediaController()
    protected final java.lang.Object mControllerObj
androidx.recyclerview.widget.AsyncListDiffer$MainThreadExecutor
okhttp3.internal.cache.CacheStrategy$Factory
androidx.coordinatorlayout.R$id
androidx.slidingpanelayout.widget.SlidingPaneLayout$SimplePanelSlideListener
androidx.collection.CircularIntArray
com.downloader.Error:
    public boolean isServerError()
    public boolean isConnectionError()
    public java.lang.String getServerErrorMessage()
    public java.util.Map getHeaderFields()
    public java.lang.Throwable getConnectionException()
    public int getResponseCode()
okhttp3.Authenticator
androidx.camera.camera2.impl.Camera$5
androidx.versionedparcelable.VersionedParcelStream$1
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21$4
androidx.loader.content.AsyncTaskLoader$LoadTask
androidx.core.os.LocaleListCompatWrapper
androidx.core.content.pm.ShortcutInfoCompat$Builder
androidx.appcompat.R$dimen:
    private void <init>()
com.squareup.picasso.Cache
androidx.camera.core.impl.utils.futures.FutureChain$1
androidx.fragment.app.FragmentManager:
    public static void enableDebugLogging(boolean)
    public androidx.fragment.app.FragmentTransaction openTransaction()
    public abstract boolean executePendingTransactions()
    public abstract androidx.fragment.app.Fragment findFragmentById(int)
    public abstract androidx.fragment.app.Fragment findFragmentByTag(java.lang.String)
    public abstract void popBackStack()
    public abstract void popBackStack(java.lang.String,int)
    public abstract boolean popBackStackImmediate(java.lang.String,int)
    public abstract void popBackStack(int,int)
    public abstract boolean popBackStackImmediate(int,int)
    public abstract int getBackStackEntryCount()
    public abstract androidx.fragment.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)
    public abstract void addOnBackStackChangedListener(androidx.fragment.app.FragmentManager$OnBackStackChangedListener)
    public abstract void removeOnBackStackChangedListener(androidx.fragment.app.FragmentManager$OnBackStackChangedListener)
    public abstract void putFragment(android.os.Bundle,java.lang.String,androidx.fragment.app.Fragment)
    public abstract androidx.fragment.app.Fragment getFragment(android.os.Bundle,java.lang.String)
    public abstract androidx.fragment.app.Fragment$SavedState saveFragmentInstanceState(androidx.fragment.app.Fragment)
    public abstract boolean isDestroyed()
    public abstract void registerFragmentLifecycleCallbacks(androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks,boolean)
    public abstract void unregisterFragmentLifecycleCallbacks(androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks)
    public abstract androidx.fragment.app.Fragment getPrimaryNavigationFragment()
    public abstract boolean isStateSaved()
    public static final int POP_BACK_STACK_INCLUSIVE
androidx.core.widget.ListPopupWindowCompat
androidx.core.app.AlarmManagerCompat
okhttp3.Interceptor
androidx.recyclerview.selection.MotionInputHandler
androidx.lifecycle.ComputableLiveData$3
com.squareup.picasso.BitmapHunter$5
androidx.core.graphics.drawable.RoundedBitmapDrawable21
org.pytorch.torchvision.R
androidx.fragment.app.FragmentTransition:
    static boolean supportsTransition()
    private void <init>()
io.github.prabhuomkar.pytorchandroid.playground.AutoFitTextureView:
    public void setAspectRatio(int,int,boolean)
com.squareup.picasso.Picasso$RequestTransformer
androidx.core.os.ParcelableCompat
androidx.appcompat.widget.AppCompatSeekBar:
    public void <init>(android.content.Context)
androidx.loader.R$attr
androidx.core.os.BuildCompat
androidx.recyclerview.selection.EventBridge
androidx.appcompat.widget.ShareActionProvider$ShareActivityChooserModelPolicy
androidx.camera.core.ImageCapture$18$1
androidx.viewpager.R
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21$5
androidx.fragment.app.Fragment$SavedState$1
androidx.camera.core.R$layout
androidx.camera.core.impl.LiveDataObservable$1$1
androidx.customview.R$string
android.support.v4.media.MediaBrowserCompat$CustomActionResultReceiver:
    void <init>(java.lang.String,android.os.Bundle,android.support.v4.media.MediaBrowserCompat$CustomActionCallback,android.os.Handler)
androidx.media.MediaBrowserServiceCompat$4
androidx.appcompat.app.ActionBarDrawerToggleHoneycomb
androidx.recyclerview.widget.DiffUtil$PostponedUpdate
androidx.media.app.NotificationCompat$DecoratedMediaCustomViewStyle
okhttp3.internal.ws.RealWebSocket$2
okhttp3.Address
okhttp3.package-info
android.support.v4.media.session.MediaControllerCompatApi21$TransportControls
androidx.recyclerview.selection.BandPredicate
androidx.camera.core.ForwardingImageProxy:
    public synchronized android.graphics.Rect getCropRect()
    public synchronized void setTimestamp(long)
androidx.constraintlayout.solver.SolverVariable:
    private static java.lang.String getUniqueName(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)
    public void <init>(java.lang.String,androidx.constraintlayout.solver.SolverVariable$Type)
    void clearStrengths()
    java.lang.String strengthsToString()
    public java.lang.String getName()
    public void setName(java.lang.String)
    private static final boolean INTERNAL_DEBUG
    public static final int STRENGTH_NONE
    public static final int STRENGTH_LOW
    public static final int STRENGTH_MEDIUM
    public static final int STRENGTH_HIGH
    public static final int STRENGTH_HIGHEST
    public static final int STRENGTH_EQUALITY
    public static final int STRENGTH_FIXED
    public static final int STRENGTH_BARRIER
    static final int MAX_STRENGTH
androidx.legacy.coreutils.R$id
androidx.constraintlayout.widget.Constraints$LayoutParams:
    public void <init>(androidx.constraintlayout.widget.Constraints$LayoutParams)
okhttp3.internal.http2.Http2Stream$FramingSink
androidx.camera.core.ErrorHandler:
    void setErrorListener(androidx.camera.core.CameraX$ErrorListener,android.os.Handler)
    private static final java.lang.String TAG
androidx.drawerlayout.R$dimen
androidx.recyclerview.selection.FocusDelegate$1
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi26
androidx.recyclerview.widget.OrientationHelper:
    public androidx.recyclerview.widget.RecyclerView$LayoutManager getLayoutManager()
    public abstract void offsetChild(android.view.View,int)
    private static final int INVALID_SIZE
    public static final int HORIZONTAL
    public static final int VERTICAL
okhttp3.internal.publicsuffix.PublicSuffixDatabase
androidx.coordinatorlayout.widget.CoordinatorLayout$HierarchyChangeListener
android.support.v4.media.MediaDescriptionCompatApi23$Builder:
    private void <init>()
androidx.legacy.app.ActionBarDrawerToggle$Delegate
org.pytorch.R
androidx.recyclerview.widget.ItemTouchHelper$SimpleCallback
okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner
androidx.appcompat.widget.PopupMenu$OnMenuItemClickListener
androidx.camera.core.ProcessingSurfaceTexture:
    private static final java.lang.String TAG
    private static final int MAX_IMAGES
android.support.v4.media.session.MediaSessionCompatApi21$Callback
androidx.recyclerview.selection.TouchInputHandler
android.support.v4.media.session.MediaControllerCompat$TransportControlsApi21
androidx.drawerlayout.widget.DrawerLayout$SavedState
androidx.core.math.MathUtils
androidx.core.os.TraceCompat:
    private void <init>()
okhttp3.Cache$CacheResponseBody
androidx.core.app.ActivityCompat:
    protected void <init>()
    public static void setPermissionCompatDelegate(androidx.core.app.ActivityCompat$PermissionCompatDelegate)
    public static boolean invalidateOptionsMenu(android.app.Activity)
    public static void startActivityForResult(android.app.Activity,android.content.Intent,int,android.os.Bundle)
    public static void startIntentSenderForResult(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
    public static void finishAfterTransition(android.app.Activity)
    public static android.net.Uri getReferrer(android.app.Activity)
    public static android.view.View requireViewById(android.app.Activity,int)
    public static void setEnterSharedElementCallback(android.app.Activity,androidx.core.app.SharedElementCallback)
    public static void setExitSharedElementCallback(android.app.Activity,androidx.core.app.SharedElementCallback)
    public static void postponeEnterTransition(android.app.Activity)
    public static void startPostponedEnterTransition(android.app.Activity)
    public static boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
    public static androidx.core.view.DragAndDropPermissionsCompat requestDragAndDropPermissions(android.app.Activity,android.view.DragEvent)
okhttp3.internal.http2.Hpack
androidx.viewpager.widget.PagerTitleStrip$SingleLineAllCapsTransform
androidx.appcompat.app.AlertController$AlertParams:
    public boolean mForceInverseBackground
androidx.recyclerview.widget.StaggeredGridLayoutManager:
    public void <init>(int,int)
    public int getGapStrategy()
    public void setGapStrategy(int)
    public int getSpanCount()
    public boolean getReverseLayout()
    public int[] findFirstVisibleItemPositions(int[])
    public int[] findFirstCompletelyVisibleItemPositions(int[])
    public int[] findLastVisibleItemPositions(int[])
    public int[] findLastCompletelyVisibleItemPositions(int[])
    public android.graphics.PointF computeScrollVectorForPosition(int)
    public void smoothScrollToPosition(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State,int)
    public void scrollToPosition(int)
    public void scrollToPositionWithOffset(int,int)
    public int getOrientation()
    private static final java.lang.String TAG
    static final boolean DEBUG
    public static final int HORIZONTAL
    public static final int VERTICAL
    public static final int GAP_HANDLING_NONE
    public static final int GAP_HANDLING_LAZY
    public static final int GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS
    static final int INVALID_OFFSET
    private static final float MAX_SCROLL_FACTOR
androidx.core.widget.ContentLoadingProgressBar$1
androidx.appcompat.widget.ActivityChooserModel
androidx.viewpager.widget.ViewPager$PagerObserver
androidx.camera.camera2.R$style
androidx.core.util.ObjectsCompat:
    private void <init>()
    public static boolean equals(java.lang.Object,java.lang.Object)
    public static int hashCode(java.lang.Object)
androidx.camera.camera2.R$integer
com.squareup.picasso.Dispatcher
androidx.annotation.WorkerThread
androidx.coordinatorlayout.R$integer
androidx.media.MediaSessionManagerImplApi28$RemoteUserInfoImplApi28
androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory
okhttp3.internal.http.RequestLine
androidx.fragment.app.FragmentTabHost$SavedState$1
androidx.appcompat.widget.AppCompatCheckBox:
    public void <init>(android.content.Context)
com.google.auto.value.AutoAnnotation
androidx.recyclerview.widget.RecyclerView$State:
    public boolean isMeasuring()
    public boolean willRunSimpleAnimations()
    public void remove(int)
    public java.lang.Object get(int)
    public void put(int,java.lang.Object)
    public boolean didStructureChange()
    public int getRemainingScrollHorizontal()
    public int getRemainingScrollVertical()
    static final int STEP_START
    static final int STEP_LAYOUT
    static final int STEP_ANIMATIONS
androidx.core.app.ServiceCompat$StopForegroundFlags
androidx.loader.R$style
androidx.camera.camera2.impl.compat.CameraDeviceCompat:
    private void <init>()
    public static final int SESSION_OPERATION_MODE_NORMAL
    public static final int SESSION_OPERATION_MODE_CONSTRAINED_HIGH_SPEED
androidx.camera.core.ImageUtil$CodecFailedException$FailureType
androidx.core.net.ConnectivityManagerCompat
androidx.camera.core.LensFacingCameraIdFilter$SettableLensFacingCameraIdFilter:
    public androidx.camera.core.CameraX$LensFacing getLensFacing()
androidx.customview.R$styleable
android.support.v4.media.MediaBrowserCompat$ServiceBinderWrapper
androidx.cardview.R
androidx.media.R$integer
androidx.core.app.JobIntentService$JobServiceEngineImpl$WrapperWorkItem
com.squareup.picasso.R
androidx.core.app.NotificationCompatSideChannelService$NotificationSideChannelStub
androidx.activity.R$integer
com.squareup.picasso.Picasso$Builder
androidx.recyclerview.selection.StorageStrategy$StringStorageStrategy
okhttp3.Challenge
okhttp3.ConnectionPool
androidx.appcompat.view.menu.MenuPresenter:
    public abstract androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)
    public abstract int getId()
    public abstract android.os.Parcelable onSaveInstanceState()
    public abstract void onRestoreInstanceState(android.os.Parcelable)
androidx.drawerlayout.R$integer
okhttp3.internal.http.RealResponseBody
androidx.recyclerview.widget.RecyclerView$AdapterDataObserver:
    public void onChanged()
    public void onItemRangeChanged(int,int)
    public void onItemRangeChanged(int,int,java.lang.Object)
    public void onItemRangeInserted(int,int)
    public void onItemRangeRemoved(int,int)
    public void onItemRangeMoved(int,int,int)
androidx.core.content.SharedPreferencesCompat
android.support.v4.media.session.PlaybackStateCompat$RepeatMode
androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat$SessionConfigurationCompatBaseImpl:
    public void setInputConfiguration(androidx.camera.camera2.impl.compat.params.InputConfigurationCompat)
    public android.hardware.camera2.CaptureRequest getSessionParameters()
androidx.appcompat.widget.LinearLayoutCompat$OrientationMode
androidx.cardview.widget.CardView
androidx.drawerlayout.widget.DrawerLayout$SavedState$1
androidx.camera.camera2.impl.Camera2CameraControl$7
io.github.prabhuomkar.pytorchandroid.ui.adapters.ModelListAdapter$ModelView:
    io.github.prabhuomkar.pytorchandroid.ui.adapters.RecyclerViewClickListener clickListener
okhttp3.internal.http2.Http2Stream$FramingSource
org.pytorch.torchvision.R$style
androidx.camera.core.ImageCapture$15
androidx.core.hardware.fingerprint.FingerprintManagerCompat
androidx.camera.camera2.impl.ImageCaptureOptionUnpacker$1
androidx.lifecycle.livedata.R
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection
com.facebook.jni.DestructorThread$Terminus
okhttp3.internal.cache.CacheInterceptor
androidx.viewpager.widget.PagerTabStrip$2
androidx.appcompat.widget.ActionMenuPresenter:
    public void setWidthLimit(int,boolean)
    public void setItemLimit(int)
    public boolean isOverflowReserved()
    public android.os.Parcelable onSaveInstanceState()
    public void onRestoreInstanceState(android.os.Parcelable)
    public void onSubUiVisibilityChanged(boolean)
    private static final java.lang.String TAG
android.support.v4.media.session.MediaControllerCompatApi23$TransportControls
androidx.constraintlayout.solver.Metrics:
    public void <init>()
    public java.lang.String toString()
    public void reset()
    public long variables
    public long oldresolvedWidgets
    public java.util.ArrayList problematicLayouts
okio.Pipe$PipeSource
androidx.recyclerview.selection.SelectionTracker$Builder
androidx.fragment.app.BackStackRecord:
    public int getId()
    public int getBreadCrumbTitleRes()
    public int getBreadCrumbShortTitleRes()
    public java.lang.CharSequence getBreadCrumbTitle()
    public java.lang.CharSequence getBreadCrumbShortTitle()
    public androidx.fragment.app.FragmentTransaction remove(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction hide(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction show(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction detach(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction setPrimaryNavigationFragment(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction setMaxLifecycle(androidx.fragment.app.Fragment,androidx.lifecycle.Lifecycle$State)
    public int commitAllowingStateLoss()
    public void commitNow()
    public void commitNowAllowingStateLoss()
    public boolean isEmpty()
    static final java.lang.String TAG
androidx.media.AudioAttributesCompat$AudioManagerHidden
android.support.v4.media.session.PlaybackStateCompat$ShuffleMode
androidx.recyclerview.selection.ItemKeyProvider$Scope
androidx.camera.core.ImageCapture$OnImageSavedListener
androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo:
    public int changeFlags
androidx.media.MediaBrowserServiceCompat$ServiceBinderImpl$4
androidx.legacy.coreutils.R$color
androidx.versionedparcelable.VersionedParcel$ParcelException
androidx.recyclerview.selection.ResetManager
androidx.camera.core.R$string
com.squareup.picasso.Utils$PicassoThreadFactory
androidx.camera.camera2.impl.FocusMeteringControl$2
okio.DeflaterSink
io.github.prabhuomkar.pytorchandroid.R$style
android.support.v4.media.session.MediaSessionCompatApi23
androidx.appcompat.widget.AbsActionBarView$1
androidx.appcompat.app.ActionBar$NavigationMode
androidx.appcompat.view.menu.MenuPopupHelper:
    public void <init>(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)
    public void <init>(android.content.Context,androidx.appcompat.view.menu.MenuBuilder,android.view.View)
    public int getGravity()
    public void show(int,int)
    public android.widget.ListView getListView()
    private static final int TOUCH_EPICENTER_SIZE_DP
okhttp3.Headers$Builder
com.squareup.picasso.StatsSnapshot
androidx.recyclerview.selection.SelectionPredicates$1
androidx.appcompat.widget.TooltipCompat:
    private void <init>()
okhttp3.internal.http2.Huffman
androidx.viewpager.widget.ViewPager$OnPageChangeListener
androidx.core.app.SharedElementCallback$OnSharedElementsReadyListener
androidx.core.view.MenuCompat
androidx.camera.core.VideoCapture$OnVideoSavedListener
io.github.prabhuomkar.pytorchandroid.R$integer
androidx.appcompat.widget.ResourceManagerInternal:
    private void removeDelegate(java.lang.String,androidx.appcompat.widget.ResourceManagerInternal$InflateDelegate)
    private static boolean arrayContains(int[],int)
    private static final java.lang.String TAG
    private static final boolean DEBUG
    private static final java.lang.String SKIP_DRAWABLE_TAG
    private static final java.lang.String PLATFORM_VD_CLAZZ
androidx.recyclerview.selection.GestureSelectionHelper$RecyclerViewDelegate
org.pytorch.Tensor$Tensor_float32:
    public org.pytorch.DType dtype()
    java.nio.Buffer getRawDataBuffer()
androidx.recyclerview.widget.ViewBoundsCheck$ViewBounds
androidx.appcompat.widget.ActivityChooserView$3
androidx.lifecycle.Transformations
androidx.swiperefreshlayout.R$layout
androidx.customview.R$integer
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21
androidx.recyclerview.widget.MessageThreadUtil
android.support.v4.media.session.IMediaSession$Stub$Proxy:
    public java.lang.String getInterfaceDescriptor()
    public void sendCommand(java.lang.String,android.os.Bundle,android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper)
    public boolean sendMediaButton(android.view.KeyEvent)
    public void unregisterCallbackListener(android.support.v4.media.session.IMediaControllerCallback)
    public boolean isTransportControlEnabled()
    public java.lang.String getPackageName()
    public java.lang.String getTag()
    public android.app.PendingIntent getLaunchPendingIntent()
    public long getFlags()
    public android.support.v4.media.session.ParcelableVolumeInfo getVolumeAttributes()
    public void adjustVolume(int,int,java.lang.String)
    public void setVolumeTo(int,int,java.lang.String)
    public android.support.v4.media.MediaMetadataCompat getMetadata()
    public android.support.v4.media.session.PlaybackStateCompat getPlaybackState()
    public java.util.List getQueue()
    public java.lang.CharSequence getQueueTitle()
    public android.os.Bundle getExtras()
    public int getRatingType()
    public boolean isCaptioningEnabled()
    public int getRepeatMode()
    public boolean isShuffleModeEnabledRemoved()
    public int getShuffleMode()
    public void addQueueItem(android.support.v4.media.MediaDescriptionCompat)
    public void addQueueItemAt(android.support.v4.media.MediaDescriptionCompat,int)
    public void removeQueueItem(android.support.v4.media.MediaDescriptionCompat)
    public void removeQueueItemAt(int)
    public void prepare()
    public void prepareFromMediaId(java.lang.String,android.os.Bundle)
    public void prepareFromSearch(java.lang.String,android.os.Bundle)
    public void prepareFromUri(android.net.Uri,android.os.Bundle)
    public void play()
    public void playFromMediaId(java.lang.String,android.os.Bundle)
    public void playFromSearch(java.lang.String,android.os.Bundle)
    public void playFromUri(android.net.Uri,android.os.Bundle)
    public void skipToQueueItem(long)
    public void pause()
    public void stop()
    public void next()
    public void previous()
    public void fastForward()
    public void rewind()
    public void seekTo(long)
    public void rate(android.support.v4.media.RatingCompat)
    public void rateWithExtras(android.support.v4.media.RatingCompat,android.os.Bundle)
    public void setCaptioningEnabled(boolean)
    public void setRepeatMode(int)
    public void setShuffleModeEnabledRemoved(boolean)
    public void setShuffleMode(int)
    public void sendCustomAction(java.lang.String,android.os.Bundle)
androidx.cardview.R$dimen
androidx.core.app.TaskStackBuilder:
    public static androidx.core.app.TaskStackBuilder from(android.content.Context)
    public androidx.core.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)
    public androidx.core.app.TaskStackBuilder addParentStack(java.lang.Class)
    public int getIntentCount()
    public android.content.Intent getIntent(int)
    public android.content.Intent editIntentAt(int)
    public android.app.PendingIntent getPendingIntent(int,int)
    public android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)
    public android.content.Intent[] getIntents()
    private static final java.lang.String TAG
android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallbackProxy
androidx.recyclerview.widget.ViewBoundsCheck:
    static final int GT
    static final int EQ
    static final int LT
    static final int CVS_PVS_POS
    static final int FLAG_CVS_GT_PVS
    static final int FLAG_CVS_EQ_PVS
    static final int FLAG_CVS_LT_PVS
    static final int CVS_PVE_POS
    static final int FLAG_CVS_GT_PVE
    static final int FLAG_CVS_EQ_PVE
    static final int FLAG_CVS_LT_PVE
    static final int CVE_PVS_POS
    static final int FLAG_CVE_GT_PVS
    static final int FLAG_CVE_EQ_PVS
    static final int FLAG_CVE_LT_PVS
    static final int CVE_PVE_POS
    static final int FLAG_CVE_GT_PVE
    static final int FLAG_CVE_EQ_PVE
    static final int FLAG_CVE_LT_PVE
    static final int MASK
androidx.slidingpanelayout.R$integer
androidx.coordinatorlayout.widget.CoordinatorLayout$ViewElevationComparator
okhttp3.Cache
androidx.recyclerview.widget.ItemTouchHelper$Callback
androidx.recyclerview.R$integer
androidx.recyclerview.widget.TileList$Tile
okhttp3.internal.http2.ErrorCode
androidx.slidingpanelayout.R$drawable
androidx.camera.core.SessionConfig$Builder:
    public void addAllCameraCaptureCallbacks(java.util.Collection)
    public java.util.List getSingleCameraCaptureCallbacks()
    public void removeSurface(androidx.camera.core.DeferrableSurface)
    public void clearSurfaces()
androidx.constraintlayout.widget.Barrier:
    public void <init>(android.content.Context,android.util.AttributeSet)
    public void <init>(android.content.Context,android.util.AttributeSet,int)
    public boolean allowsGoneWidget()
    public static final int LEFT
    public static final int TOP
    public static final int RIGHT
    public static final int BOTTOM
    public static final int START
    public static final int END
androidx.loader.R$dimen
androidx.lifecycle.Transformations$2$1
androidx.camera.core.CaptureConfig$Builder:
    public static androidx.camera.core.CaptureConfig$Builder createFrom(androidx.camera.core.UseCaseConfig)
    public void removeSurface(androidx.camera.core.DeferrableSurface)
    public void clearSurfaces()
    boolean isUseRepeatingSurface()
    public void setUseRepeatingSurface(boolean)
io.github.prabhuomkar.pytorchandroid.helpers.FileHelper:
    public void <init>()
androidx.viewpager.widget.PagerTitleStrip$PageListener
androidx.appcompat.app.ActionBar$DisplayOptions
androidx.media.MediaBrowserServiceCompatApi23$ServiceCompatProxy
okhttp3.internal.cache.DiskLruCache$Entry
androidx.vectordrawable.animated.R$integer
okio.Okio
androidx.annotation.RequiresFeature
android.support.v4.media.session.MediaControllerCompat$TransportControls
androidx.media.AudioAttributesCompat$Builder
androidx.core.os.ParcelCompat
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplApi21
okhttp3.internal.cache.CacheStrategy
androidx.customview.widget.ViewDragHelper$Callback
okhttp3.MultipartBody
androidx.appcompat.widget.AppCompatImageButton:
    public void <init>(android.content.Context)
androidx.core.R$id:
    private void <init>()
androidx.camera.core.UseCase:
    private static final java.lang.String TAG
androidx.viewpager.widget.PagerTabStrip$1
com.squareup.picasso.Picasso$Listener
androidx.core.content.PermissionChecker$PermissionResult
androidx.customview.R$drawable
androidx.core.util.Supplier
androidx.core.view.WindowCompat
androidx.camera.core.ImageCapture$20
okhttp3.internal.ws.WebSocketReader
androidx.appcompat.app.ActionBarDrawerToggle$FrameworkActionBarDelegate
android.support.v4.media.session.PlaybackStateCompat$CustomAction:
    public java.lang.Object getCustomAction()
    public java.lang.String getAction()
    public java.lang.CharSequence getName()
    public int getIcon()
    public android.os.Bundle getExtras()
com.squareup.picasso.Request$Builder
androidx.appcompat.widget.ActionMenuPresenter$SavedState
androidx.vectordrawable.animated.R$attr
androidx.camera.core.UseCaseConfig:
    public abstract androidx.camera.core.SessionConfig getDefaultSessionConfig()
    public abstract androidx.camera.core.CaptureConfig getDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public abstract androidx.camera.core.CaptureConfig getDefaultCaptureConfig()
    public abstract androidx.camera.core.SessionConfig$OptionUnpacker getSessionOptionUnpacker()
    public abstract androidx.camera.core.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public abstract androidx.camera.core.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker()
    public abstract int getSurfaceOccupancyPriority()
androidx.recyclerview.widget.RecyclerView$LayoutParams:
    public boolean viewNeedsUpdate()
    public int getViewPosition()
    public int getViewAdapterPosition()
androidx.fragment.R
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase
okhttp3.CertificatePinner
androidx.appcompat.app.ActionBar$OnNavigationListener
androidx.core.content.SharedPreferencesCompat$EditorCompat$Helper
androidx.core.view.DragStartHelper$1
com.downloader.internal.ComponentHolder:
    public void init(android.content.Context,com.downloader.PRDownloaderConfig)
androidx.camera.camera2.impl.compat.params.InputConfigurationCompat$InputConfigurationCompatBaseImpl
okhttp3.internal.io.FileSystem$1
com.downloader.R$string
okhttp3.Protocol
androidx.slidingpanelayout.widget.SlidingPaneLayout$PanelSlideListener
androidx.camera.core.ImageProxyDownsampler:
    private void <init>()
androidx.vectordrawable.R$id
androidx.appcompat.widget.SearchView:
    public boolean isIconfiedByDefault()
    public boolean isSubmitButtonEnabled()
    public boolean isQueryRefinementEnabled()
    static final boolean DBG
    static final java.lang.String LOG_TAG
    private static final java.lang.String IME_OPTION_NO_MICROPHONE
androidx.media.MediaBrowserServiceCompatApi21$MediaBrowserServiceAdaptor
androidx.camera.core.impl.utils.Optional
androidx.legacy.widget.Space
androidx.appcompat.resources.R$attr
androidx.customview.widget.FocusStrategy
androidx.appcompat.widget.ViewUtils:
    private void <init>()
    private static final java.lang.String TAG
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection$2
com.downloader.BuildConfig
androidx.core.provider.FontsContractCompat$FontFamilyResult:
    public static final int STATUS_OK
    public static final int STATUS_WRONG_CERTIFICATES
    public static final int STATUS_UNEXPECTED_DATA_PROVIDED
androidx.core.R$style
android.support.v4.media.session.PlaybackStateCompat$Actions
androidx.recyclerview.widget.LayoutState:
    static final int LAYOUT_START
    static final int LAYOUT_END
    static final int INVALID_LAYOUT
    static final int ITEM_DIRECTION_HEAD
    static final int ITEM_DIRECTION_TAIL
okhttp3.internal.ws.RealWebSocket$PingRunnable
androidx.camera.core.CameraCaptureSessionStateCallbacks:
    private void <init>()
    public static varargs android.hardware.camera2.CameraCaptureSession$StateCallback createComboCallback(android.hardware.camera2.CameraCaptureSession$StateCallback[])
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$7
androidx.viewpager.R$styleable
androidx.camera.core.CameraCaptureMetaData$AfMode
androidx.core.app.JobIntentService$CompatWorkEnqueuer
androidx.activity.R$dimen
androidx.swiperefreshlayout.R$string
androidx.camera.core.FocusMeteringAction$Builder
androidx.asynclayoutinflater.R$dimen
androidx.media.MediaSessionManagerImplBase
androidx.core.view.ViewCompat$FocusDirection
androidx.camera.core.CameraCaptureResult$EmptyCameraCaptureResult
androidx.appcompat.view.menu.CascadingMenuPopup$HorizPosition
androidx.activity.ComponentActivity:
    public void <init>(int)
    public java.lang.Object getLastCustomNonConfigurationInstance()
org.pytorch.Tensor$Tensor_int64
androidx.annotation.StyleableRes
androidx.media.AudioAttributesCompat:
    void <init>(androidx.media.AudioAttributesImpl)
    public static androidx.media.AudioAttributesCompat wrap(java.lang.Object)
    public static androidx.media.AudioAttributesCompat fromBundle(android.os.Bundle)
    static int usageForStreamType(int)
    public static void setForceLegacyBehavior(boolean)
    static int toVolumeStreamType(boolean,androidx.media.AudioAttributesCompat)
    public int getVolumeControlStream()
    public java.lang.Object unwrap()
    public int getLegacyStreamType()
    public int getContentType()
    public int getUsage()
    public int getFlags()
    public android.os.Bundle toBundle()
    int getRawLegacyStreamType()
    private static final java.lang.String TAG
    public static final int CONTENT_TYPE_UNKNOWN
    public static final int CONTENT_TYPE_SPEECH
    public static final int CONTENT_TYPE_MUSIC
    public static final int CONTENT_TYPE_MOVIE
    public static final int CONTENT_TYPE_SONIFICATION
    public static final int USAGE_UNKNOWN
    public static final int USAGE_MEDIA
    public static final int USAGE_VOICE_COMMUNICATION
    public static final int USAGE_VOICE_COMMUNICATION_SIGNALLING
    public static final int USAGE_ALARM
    public static final int USAGE_NOTIFICATION
    public static final int USAGE_NOTIFICATION_RINGTONE
    public static final int USAGE_NOTIFICATION_COMMUNICATION_REQUEST
    public static final int USAGE_NOTIFICATION_COMMUNICATION_INSTANT
    public static final int USAGE_NOTIFICATION_COMMUNICATION_DELAYED
    public static final int USAGE_NOTIFICATION_EVENT
    public static final int USAGE_ASSISTANCE_ACCESSIBILITY
    public static final int USAGE_ASSISTANCE_NAVIGATION_GUIDANCE
    public static final int USAGE_ASSISTANCE_SONIFICATION
    public static final int USAGE_GAME
    private static final int USAGE_VIRTUAL_SOURCE
    public static final int USAGE_ASSISTANT
    private static final int SUPPRESSIBLE_NOTIFICATION
    private static final int SUPPRESSIBLE_CALL
    static boolean sForceLegacyBehavior
    public static final int FLAG_AUDIBILITY_ENFORCED
    static final int FLAG_SECURE
    static final int FLAG_SCO
    static final int FLAG_BEACON
    public static final int FLAG_HW_AV_SYNC
    static final int FLAG_HW_HOTWORD
    static final int FLAG_BYPASS_INTERRUPTION_POLICY
    static final int FLAG_BYPASS_MUTE
    static final int FLAG_LOW_LATENCY
    static final int FLAG_DEEP_BUFFER
    static final int FLAG_ALL
    static final int FLAG_ALL_PUBLIC
    static final int INVALID_STREAM_TYPE
    static final java.lang.String AUDIO_ATTRIBUTES_FRAMEWORKS
    static final java.lang.String AUDIO_ATTRIBUTES_USAGE
    static final java.lang.String AUDIO_ATTRIBUTES_CONTENT_TYPE
    static final java.lang.String AUDIO_ATTRIBUTES_FLAGS
    static final java.lang.String AUDIO_ATTRIBUTES_LEGACY_STREAM_TYPE
androidx.camera.core.UseCaseAttachState$2
androidx.camera.core.VideoCaptureConfig$Builder:
    public androidx.camera.core.VideoCaptureConfig$Builder setCameraIdFilter(androidx.camera.core.CameraIdFilter)
    public androidx.camera.core.VideoCaptureConfig$Builder setTargetAspectRatio(androidx.camera.core.AspectRatio)
    public androidx.camera.core.VideoCaptureConfig$Builder setTargetResolution(android.util.Size)
    public androidx.camera.core.VideoCaptureConfig$Builder setDefaultResolution(android.util.Size)
    public androidx.camera.core.VideoCaptureConfig$Builder setSupportedResolutions(java.util.List)
    public androidx.camera.core.VideoCaptureConfig$Builder setBackgroundExecutor(java.util.concurrent.Executor)
    public androidx.camera.core.VideoCaptureConfig$Builder setUseCaseEventListener(androidx.camera.core.UseCase$EventListener)
    public synthetic bridge java.lang.Object setSurfaceOccupancyPriority(int)
    public synthetic bridge java.lang.Object setCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public synthetic bridge java.lang.Object setSessionOptionUnpacker(androidx.camera.core.SessionConfig$OptionUnpacker)
    public synthetic bridge java.lang.Object setDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public synthetic bridge java.lang.Object setDefaultSessionConfig(androidx.camera.core.SessionConfig)
    public synthetic bridge java.lang.Object setTargetName(java.lang.String)
    public synthetic bridge java.lang.Object setTargetClass(java.lang.Class)
    public synthetic bridge java.lang.Object setUseCaseEventListener(androidx.camera.core.UseCase$EventListener)
    public synthetic bridge java.lang.Object setSupportedResolutions(java.util.List)
    public synthetic bridge java.lang.Object setMaxResolution(android.util.Size)
    public synthetic bridge java.lang.Object setDefaultResolution(android.util.Size)
    public synthetic bridge java.lang.Object setTargetResolution(android.util.Size)
    public synthetic bridge java.lang.Object setTargetRotation(int)
    public synthetic bridge java.lang.Object setTargetAspectRatio(androidx.camera.core.AspectRatio)
    public synthetic bridge java.lang.Object setTargetAspectRatioCustom(android.util.Rational)
    public synthetic bridge java.lang.Object setCameraIdFilter(androidx.camera.core.CameraIdFilter)
    public synthetic bridge java.lang.Object setLensFacing(androidx.camera.core.CameraX$LensFacing)
    public synthetic bridge java.lang.Object setBackgroundExecutor(java.util.concurrent.Executor)
androidx.core.provider.FontsContractCompat$4
com.squareup.picasso.LruCache$BitmapAndSize
androidx.core.text.HtmlCompat
androidx.recyclerview.selection.GridModel$Limits
androidx.core.view.accessibility.AccessibilityRecordCompat:
    public void <init>(java.lang.Object)
    public static androidx.core.view.accessibility.AccessibilityRecordCompat obtain(androidx.core.view.accessibility.AccessibilityRecordCompat)
    public static androidx.core.view.accessibility.AccessibilityRecordCompat obtain()
    public static void setSource(android.view.accessibility.AccessibilityRecord,android.view.View,int)
    public static int getMaxScrollX(android.view.accessibility.AccessibilityRecord)
    public static int getMaxScrollY(android.view.accessibility.AccessibilityRecord)
    public java.lang.Object getImpl()
    public void setSource(android.view.View)
    public void setSource(android.view.View,int)
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat getSource()
    public int getWindowId()
    public boolean isChecked()
    public void setChecked(boolean)
    public boolean isEnabled()
    public void setEnabled(boolean)
    public boolean isPassword()
    public void setPassword(boolean)
    public boolean isFullScreen()
    public void setFullScreen(boolean)
    public boolean isScrollable()
    public void setScrollable(boolean)
    public int getItemCount()
    public void setItemCount(int)
    public int getCurrentItemIndex()
    public void setCurrentItemIndex(int)
    public int getFromIndex()
    public void setFromIndex(int)
    public int getToIndex()
    public void setToIndex(int)
    public int getScrollX()
    public void setScrollX(int)
    public int getScrollY()
    public void setScrollY(int)
    public int getMaxScrollX()
    public void setMaxScrollX(int)
    public int getMaxScrollY()
    public void setMaxScrollY(int)
    public int getAddedCount()
    public void setAddedCount(int)
    public int getRemovedCount()
    public void setRemovedCount(int)
    public java.lang.CharSequence getClassName()
    public void setClassName(java.lang.CharSequence)
    public java.util.List getText()
    public java.lang.CharSequence getBeforeText()
    public void setBeforeText(java.lang.CharSequence)
    public java.lang.CharSequence getContentDescription()
    public void setContentDescription(java.lang.CharSequence)
    public android.os.Parcelable getParcelableData()
    public void setParcelableData(android.os.Parcelable)
    public void recycle()
    public int hashCode()
    public boolean equals(java.lang.Object)
    private final android.view.accessibility.AccessibilityRecord mRecord
androidx.slidingpanelayout.widget.SlidingPaneLayout
androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat:
    private static void dumpKeyframes(java.lang.Object[],java.lang.String)
    private void <init>()
    private static final java.lang.String TAG
    private static final int TOGETHER
    private static final int MAX_NUM_POINTS
    private static final int VALUE_TYPE_FLOAT
    private static final int VALUE_TYPE_INT
    private static final int VALUE_TYPE_PATH
    private static final int VALUE_TYPE_COLOR
    private static final int VALUE_TYPE_UNDEFINED
    private static final boolean DBG_ANIMATOR_INFLATER
androidx.versionedparcelable.VersionedParcelStream$FieldBuffer
androidx.appcompat.app.ActionBar$Tab:
    public abstract int getPosition()
    public abstract androidx.appcompat.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable)
    public abstract androidx.appcompat.app.ActionBar$Tab setIcon(int)
    public abstract androidx.appcompat.app.ActionBar$Tab setText(java.lang.CharSequence)
    public abstract androidx.appcompat.app.ActionBar$Tab setText(int)
    public abstract androidx.appcompat.app.ActionBar$Tab setCustomView(android.view.View)
    public abstract androidx.appcompat.app.ActionBar$Tab setCustomView(int)
    public abstract androidx.appcompat.app.ActionBar$Tab setTag(java.lang.Object)
    public abstract java.lang.Object getTag()
    public abstract androidx.appcompat.app.ActionBar$Tab setTabListener(androidx.appcompat.app.ActionBar$TabListener)
    public abstract androidx.appcompat.app.ActionBar$Tab setContentDescription(int)
    public abstract androidx.appcompat.app.ActionBar$Tab setContentDescription(java.lang.CharSequence)
    public static final int INVALID_POSITION
androidx.camera.core.ImageCapture$1
okhttp3.Cache$CacheRequestImpl
com.squareup.picasso.Picasso$CleanupThread$1
okio.Buffer$UnsafeCursor
androidx.core.provider.FontsContractCompat$4$4
android.support.v4.media.MediaBrowserCompatApi26$SubscriptionCallbackProxy
androidx.annotation.FloatRange
androidx.swiperefreshlayout.R$color
androidx.appcompat.graphics.drawable.DrawerArrowDrawable$ArrowDirection
okhttp3.internal.cache.DiskLruCache$2
androidx.media.MediaBrowserServiceCompatApi21$BrowserRoot
androidx.core.view.ViewPropertyAnimatorCompat:
    public androidx.core.view.ViewPropertyAnimatorCompat alphaBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat translationX(float)
    public androidx.core.view.ViewPropertyAnimatorCompat withEndAction(java.lang.Runnable)
    public android.view.animation.Interpolator getInterpolator()
    public long getStartDelay()
    public androidx.core.view.ViewPropertyAnimatorCompat rotation(float)
    public androidx.core.view.ViewPropertyAnimatorCompat rotationBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat rotationX(float)
    public androidx.core.view.ViewPropertyAnimatorCompat rotationXBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat rotationY(float)
    public androidx.core.view.ViewPropertyAnimatorCompat rotationYBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat scaleX(float)
    public androidx.core.view.ViewPropertyAnimatorCompat scaleXBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat scaleY(float)
    public androidx.core.view.ViewPropertyAnimatorCompat scaleYBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat x(float)
    public androidx.core.view.ViewPropertyAnimatorCompat xBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat y(float)
    public androidx.core.view.ViewPropertyAnimatorCompat yBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat translationXBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat translationYBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat translationZBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat translationZ(float)
    public androidx.core.view.ViewPropertyAnimatorCompat z(float)
    public androidx.core.view.ViewPropertyAnimatorCompat zBy(float)
    public androidx.core.view.ViewPropertyAnimatorCompat withLayer()
    public androidx.core.view.ViewPropertyAnimatorCompat withStartAction(java.lang.Runnable)
    static final int LISTENER_TAG_ID
androidx.core.content.res.ComplexColorCompat:
    private static final java.lang.String LOG_TAG
android.support.v4.media.MediaBrowserCompat$ItemReceiver:
    void <init>(java.lang.String,android.support.v4.media.MediaBrowserCompat$ItemCallback,android.os.Handler)
androidx.fragment.app.FragmentTabHost
com.facebook.jni.UnknownCppException
androidx.camera.core.impl.utils.futures.Futures$3
okhttp3.internal.http2.Http2Connection$4
androidx.camera.core.Preview$UseCaseError
androidx.appcompat.widget.AppCompatCheckedTextView:
    public void <init>(android.content.Context)
androidx.viewpager.widget.ViewPager$ViewPositionComparator
androidx.recyclerview.widget.ItemTouchUIUtilImpl
android.support.v4.media.session.MediaSessionCompatApi23$Callback
androidx.customview.widget.ExploreByTouchHelper
android.support.v4.media.session.MediaControllerCompatApi23
androidx.annotation.CheckResult
androidx.core.graphics.drawable.WrappedDrawableApi21:
    private static final java.lang.String TAG
androidx.core.app.NotificationCompat$Action
androidx.appcompat.R$style:
    private void <init>()
androidx.recyclerview.widget.AsyncDifferConfig
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21$1
org.pytorch.R$integer
androidx.core.content.res.ConfigurationHelper
androidx.recyclerview.selection.StorageStrategy$LongStorageStrategy
androidx.appcompat.resources.R$id
androidx.core.view.accessibility.AccessibilityViewCommand$ScrollToPositionArguments:
    public int getRow()
    public int getColumn()
androidx.camera.camera2.impl.FocusMeteringControl$1
androidx.vectordrawable.graphics.drawable.VectorDrawableCommon:
    protected void onBoundsChange(android.graphics.Rect)
com.squareup.picasso.BitmapHunter$6
com.squareup.picasso.Downloader
androidx.viewpager.widget.ViewPager
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper:
    private static final java.lang.String TAG
    private static final int DEFAULT_AUTO_SIZE_MIN_TEXT_SIZE_IN_SP
    private static final int DEFAULT_AUTO_SIZE_MAX_TEXT_SIZE_IN_SP
    private static final int DEFAULT_AUTO_SIZE_GRANULARITY_IN_PX
    static final float UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE
    private static final int VERY_WIDE
androidx.vectordrawable.graphics.drawable.Animatable2Compat:
    public abstract void registerAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback)
    public abstract boolean unregisterAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback)
    public abstract void clearAnimationCallbacks()
okhttp3.internal.cache.DiskLruCache$Editor
androidx.core.app.FrameMetricsAggregator
android.support.v4.media.session.MediaSessionCompatApi24$CallbackProxy
androidx.fragment.R$drawable
androidx.core.graphics.PaintCompat
androidx.recyclerview.R$attr:
    private void <init>()
okhttp3.FormBody
androidx.constraintlayout.solver.widgets.Rectangle:
    public void setBounds(int,int,int,int)
    void grow(int,int)
    boolean intersects(androidx.constraintlayout.solver.widgets.Rectangle)
    public boolean contains(int,int)
    public int getCenterX()
    public int getCenterY()
    public int x
    public int y
    public int width
    public int height
androidx.viewpager.R$layout
androidx.legacy.coreutils.R
androidx.appcompat.R$anim
com.squareup.picasso.Utils$PicassoThread
okhttp3.internal.http2.Http2Connection$PingRunnable
okio.InflaterSource
android.support.v4.media.session.PlaybackStateCompat$ErrorCode
androidx.customview.widget.ExploreByTouchHelper$2
okhttp3.EventListener$Factory
androidx.viewpager.R$string
okio.ForwardingSource
androidx.core.app.ActivityRecreator:
    private void <init>()
    private static final java.lang.String LOG_TAG
com.downloader.core.Core:
    public static void shutDown()
androidx.fragment.app.FragmentPagerAdapter
androidx.camera.core.ImageCapture$16
androidx.legacy.coreui.R$styleable
androidx.recyclerview.selection.OnItemActivatedListener
androidx.slidingpanelayout.widget.SlidingPaneLayout$SavedState$1
androidx.annotation.IntegerRes
androidx.camera.camera2.impl.Camera2CameraCaptureResult:
    public androidx.camera.core.CameraCaptureMetaData$AfMode getAfMode()
    public androidx.camera.core.CameraCaptureMetaData$AfState getAfState()
    public androidx.camera.core.CameraCaptureMetaData$AeState getAeState()
    public androidx.camera.core.CameraCaptureMetaData$AwbState getAwbState()
    public androidx.camera.core.CameraCaptureMetaData$FlashState getFlashState()
    android.hardware.camera2.CaptureResult getCaptureResult()
    private static final java.lang.String TAG
okhttp3.internal.tls.BasicTrustRootIndex
okhttp3.Credentials
androidx.core.R
androidx.recyclerview.selection.BandPredicate$EmptyArea
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat:
    public static androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat obtain(int,int,int,int,boolean)
    public int getColumnIndex()
    public int getColumnSpan()
    public int getRowIndex()
    public int getRowSpan()
    public boolean isHeading()
    public boolean isSelected()
android.support.v4.media.session.MediaControllerCompat$PlaybackInfo:
    public int getPlaybackType()
    public int getAudioStream()
    public int getVolumeControl()
    public int getMaxVolume()
    public int getCurrentVolume()
    public static final int PLAYBACK_TYPE_LOCAL
    public static final int PLAYBACK_TYPE_REMOTE
androidx.core.view.ViewPropertyAnimatorListenerAdapter:
    public void onAnimationEnd(android.view.View)
androidx.constraintlayout.widget.R
androidx.fragment.app.FragmentManagerImpl:
    public boolean executePendingTransactions()
    public void popBackStack()
    public void popBackStack(java.lang.String,int)
    public boolean popBackStackImmediate(java.lang.String,int)
    public void popBackStack(int,int)
    public boolean popBackStackImmediate(int,int)
    public androidx.fragment.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)
    public void addOnBackStackChangedListener(androidx.fragment.app.FragmentManager$OnBackStackChangedListener)
    public void removeOnBackStackChangedListener(androidx.fragment.app.FragmentManager$OnBackStackChangedListener)
    java.util.List getActiveFragments()
    int getActiveFragmentCount()
    public androidx.fragment.app.Fragment$SavedState saveFragmentInstanceState(androidx.fragment.app.Fragment)
    public void execSingleAction(androidx.fragment.app.FragmentManagerImpl$OpGenerator,boolean)
    androidx.fragment.app.FragmentManagerNonConfig retainNonConfig()
    void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig)
    public void registerFragmentLifecycleCallbacks(androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks,boolean)
    public void unregisterFragmentLifecycleCallbacks(androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks)
    static final java.lang.String TAG
    static final java.lang.String TARGET_REQUEST_CODE_STATE_TAG
    static final java.lang.String TARGET_STATE_TAG
    static final java.lang.String VIEW_STATE_TAG
    static final java.lang.String USER_VISIBLE_HINT_TAG
    static final int ANIM_DUR
    public static final int ANIM_STYLE_OPEN_ENTER
    public static final int ANIM_STYLE_OPEN_EXIT
    public static final int ANIM_STYLE_CLOSE_ENTER
    public static final int ANIM_STYLE_CLOSE_EXIT
    public static final int ANIM_STYLE_FADE_ENTER
    public static final int ANIM_STYLE_FADE_EXIT
androidx.core.content.pm.ShortcutInfoCompat
androidx.asynclayoutinflater.R$attr
io.github.prabhuomkar.pytorchandroid.R$layout
androidx.core.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderApi16
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21$4
androidx.core.app.NotificationCompat$Extender
okhttp3.internal.ws.RealWebSocket$Message
androidx.core.graphics.TypefaceCompatApi24Impl:
    private static final java.lang.String TAG
    private static final java.lang.String FONT_FAMILY_CLASS
    private static final java.lang.String ADD_FONT_WEIGHT_STYLE_METHOD
    private static final java.lang.String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup:
    private static final int MIN_SIZE
androidx.camera.core.AppConfig:
    public java.lang.Class getTargetClass(java.lang.Class)
    public java.lang.Class getTargetClass()
okhttp3.internal.http1.Http1Codec$1
androidx.core.view.LayoutInflaterCompat$Factory2Wrapper
org.pytorch.torchvision.R$id
androidx.appcompat.widget.DropDownListView:
    public int lookForSelectablePosition(int,boolean)
    public static final int INVALID_POSITION
    public static final int NO_POSITION
android.support.v4.media.MediaBrowserCompat$SearchResultReceiver:
    void <init>(java.lang.String,android.os.Bundle,android.support.v4.media.MediaBrowserCompat$SearchCallback,android.os.Handler)
androidx.appcompat.widget.ActivityChooserView$ActivityChooserViewAdapter
androidx.appcompat.graphics.drawable.DrawerArrowDrawable
androidx.core.app.NotificationCompat$CarExtender$UnreadConversation$Builder
androidx.coordinatorlayout.widget.CoordinatorLayout
androidx.camera.core.TargetConfig$Builder
androidx.camera.camera2.impl.Camera$5$1
okhttp3.Cookie
androidx.camera.core.SingleImageProxyBundle:
    void <init>(androidx.camera.core.ImageProxy,int)
    public com.google.common.util.concurrent.ListenableFuture getImageProxy(int)
    public java.util.List getCaptureIds()
com.downloader.internal.stream.FileDownloadOutputStream:
    public abstract void setLength(long)
androidx.slidingpanelayout.widget.SlidingPaneLayout$AccessibilityDelegate
com.squareup.picasso.Dispatcher$NetworkBroadcastReceiver
androidx.appcompat.R$attr:
    private void <init>()
androidx.appcompat.view.menu.ListMenuItemView:
    public boolean showsIcon()
    private static final java.lang.String TAG
androidx.loader.R
androidx.viewpager.widget.ViewPager$DecorView
androidx.appcompat.resources.R$drawable:
    private void <init>()
androidx.cardview.widget.CardViewImpl
androidx.legacy.v4.R
okhttp3.internal.http1.Http1Codec$ChunkedSink
androidx.camera.core.FocusMeteringAction$OnAutoFocusListener
com.squareup.picasso.MemoryPolicy
androidx.cursoradapter.R
androidx.appcompat.widget.ActivityChooserModel$ActivitySorter
com.squareup.picasso.Utils
androidx.core.provider.FontsContractCompat:
    private void <init>()
    public static void resetCache()
    public static void requestFont(android.content.Context,androidx.core.provider.FontRequest,androidx.core.provider.FontsContractCompat$FontRequestCallback,android.os.Handler)
    private static void requestFontInternal(android.content.Context,androidx.core.provider.FontRequest,androidx.core.provider.FontsContractCompat$FontRequestCallback,android.os.Handler)
    public static android.graphics.Typeface buildTypeface(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[])
    public static final java.lang.String PARCEL_FONT_RESULTS
    static final int RESULT_CODE_PROVIDER_NOT_FOUND
    static final int RESULT_CODE_WRONG_CERTIFICATES
    private static final int BACKGROUND_THREAD_KEEP_ALIVE_DURATION_MS
androidx.core.content.FileProvider$SimplePathStrategy
okhttp3.internal.io.FileSystem
androidx.media.VolumeProviderCompat
androidx.slidingpanelayout.widget.SlidingPaneLayout$SavedState
androidx.core.app.AppOpsManagerCompat:
    private void <init>()
    public static int noteOp(android.content.Context,java.lang.String,int,java.lang.String)
    public static int noteOpNoThrow(android.content.Context,java.lang.String,int,java.lang.String)
    public static int noteProxyOp(android.content.Context,java.lang.String,java.lang.String)
    public static final int MODE_ALLOWED
    public static final int MODE_IGNORED
    public static final int MODE_ERRORED
    public static final int MODE_DEFAULT
androidx.recyclerview.widget.LinearLayoutManager:
    private void logChildren()
    public boolean getRecycleChildrenOnDetach()
    public void setRecycleChildrenOnDetach(boolean)
    public boolean getStackFromEnd()
    public boolean getReverseLayout()
    public void smoothScrollToPosition(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State,int)
    public android.graphics.PointF computeScrollVectorForPosition(int)
    public void scrollToPosition(int)
    public void scrollToPositionWithOffset(int,int)
    public void setSmoothScrollbarEnabled(boolean)
    public void setInitialPrefetchItemCount(int)
    public int getInitialPrefetchItemCount()
    public int findFirstCompletelyVisibleItemPosition()
    public int findLastCompletelyVisibleItemPosition()
    void validateChildOrder()
    public void prepareForDrop(android.view.View,android.view.View,int,int)
    private static final java.lang.String TAG
    static final boolean DEBUG
    public static final int HORIZONTAL
    public static final int VERTICAL
    public static final int INVALID_OFFSET
    private static final float MAX_SCROLL_FACTOR
androidx.core.app.Person$Builder
okhttp3.internal.ws.RealWebSocket$1
androidx.camera.core.ImageCapture$9
androidx.core.os.ParcelableCompat$ParcelableCompatCreatorHoneycombMR2
androidx.recyclerview.selection.MutableSelection
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat:
    private void printGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,int)
    public float getPixelSize()
    static final java.lang.String LOGTAG
    private static final java.lang.String SHAPE_CLIP_PATH
    private static final java.lang.String SHAPE_GROUP
    private static final java.lang.String SHAPE_PATH
    private static final java.lang.String SHAPE_VECTOR
    private static final int LINECAP_BUTT
    private static final int LINECAP_ROUND
    private static final int LINECAP_SQUARE
    private static final int LINEJOIN_MITER
    private static final int LINEJOIN_ROUND
    private static final int LINEJOIN_BEVEL
    private static final int MAX_CACHED_BITMAP_SIZE
    private static final boolean DBG_VECTOR_DRAWABLE
androidx.core.text.util.FindAddress$ZipRange
androidx.appcompat.widget.AppCompatSpinner$SpinnerPopup:
    public abstract int getHorizontalOriginalOffset()
androidx.recyclerview.selection.StableIdKeyProvider
androidx.camera.camera2.impl.Camera2CameraControl$6
androidx.media.MediaBrowserServiceCompatApi26
android.support.v4.media.session.MediaSessionCompatApi22
androidx.appcompat.app.ToolbarActionBar$2
androidx.swiperefreshlayout.widget.SwipeRefreshLayout
androidx.recyclerview.selection.SelectionPredicates$2
androidx.constraintlayout.solver.LinearSystem$Row:
    public abstract boolean isEmpty()
androidx.recyclerview.widget.RecyclerView$Orientation
androidx.core.app.NotificationCompat$MessagingStyle$Message
androidx.appcompat.widget.Toolbar$SavedState:
    public void <init>(android.os.Parcel)
androidx.media.MediaBrowserServiceCompat
okio.Buffer
androidx.recyclerview.widget.RecyclerView$ItemAnimator:
    public void setMoveDuration(long)
    public void setAddDuration(long)
    public void setRemoveDuration(long)
    public void setChangeDuration(long)
    public final void dispatchAnimationStarted(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public void onAnimationStarted(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public final boolean isRunning(androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemAnimatorFinishedListener)
    public static final int FLAG_CHANGED
    public static final int FLAG_REMOVED
    public static final int FLAG_INVALIDATED
    public static final int FLAG_MOVED
    public static final int FLAG_APPEARED_IN_PRE_LAYOUT
okhttp3.internal.cache2.Relay
androidx.camera.core.impl.utils.executor.IoExecutor$1
okhttp3.internal.http2.Http2Connection
androidx.camera.core.impl.LiveDataObservable$1
androidx.recyclerview.widget.ItemTouchHelper$Callback$2
androidx.media.MediaBrowserServiceCompat$ServiceBinderImpl$5
androidx.constraintlayout.solver.widgets.Chain:
    void <init>()
    private static final boolean DEBUG
androidx.camera.core.CameraOrientationUtil:
    private void <init>()
    private static final java.lang.String TAG
    private static final boolean DEBUG
androidx.core.internal.view.SupportMenu:
    public abstract void setGroupDividerEnabled(boolean)
    public static final int USER_MASK
    public static final int USER_SHIFT
    public static final int CATEGORY_MASK
    public static final int CATEGORY_SHIFT
    public static final int SUPPORTED_MODIFIERS_MASK
    public static final int FLAG_KEEP_OPEN_ON_SUBMENU_OPENED
com.squareup.picasso.RequestCreator
io.github.prabhuomkar.pytorchandroid.R$string
com.squareup.picasso.Stats$StatsHandler$1
okhttp3.Handshake
androidx.core.view.LayoutInflaterFactory
com.squareup.picasso.OkHttp3Downloader
androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup:
    public void setSpanIndexCacheEnabled(boolean)
    public void setSpanGroupIndexCacheEnabled(boolean)
    public boolean isSpanIndexCacheEnabled()
    public boolean isSpanGroupIndexCacheEnabled()
org.pytorch.Tensor$Tensor_int32
androidx.camera.core.impl.utils.futures.Futures:
    public static com.google.common.util.concurrent.ListenableFuture transformAsync(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)
    public static com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)
    public static void propagate(com.google.common.util.concurrent.ListenableFuture,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    public static void propagateTransform(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,java.util.concurrent.Executor)
    private void <init>()
okhttp3.internal.cache.DiskLruCache$3
okhttp3.ConnectionSpec
androidx.recyclerview.widget.FastScroller:
    public boolean isDragging()
    boolean isVisible()
    android.graphics.drawable.Drawable getHorizontalTrackDrawable()
    android.graphics.drawable.Drawable getHorizontalThumbDrawable()
    android.graphics.drawable.Drawable getVerticalTrackDrawable()
    android.graphics.drawable.Drawable getVerticalThumbDrawable()
    private static final int STATE_HIDDEN
    private static final int STATE_VISIBLE
    private static final int STATE_DRAGGING
    private static final int DRAG_NONE
    private static final int DRAG_X
    private static final int DRAG_Y
    private static final int ANIMATION_STATE_OUT
    private static final int ANIMATION_STATE_FADING_IN
    private static final int ANIMATION_STATE_IN
    private static final int ANIMATION_STATE_FADING_OUT
    private static final int SHOW_DURATION_MS
    private static final int HIDE_DELAY_AFTER_VISIBLE_MS
    private static final int HIDE_DELAY_AFTER_DRAGGING_MS
    private static final int HIDE_DURATION_MS
    private static final int SCROLLBAR_FULL_OPAQUE
android.support.v4.media.session.PlaybackStateCompat$MediaKeyAction
okio.ForwardingTimeout
androidx.camera.core.CameraInfo:
    public abstract int getSensorRotationDegrees()
    public abstract androidx.lifecycle.LiveData isFlashAvailable()
androidx.core.R$drawable
androidx.print.PrintHelper$1
okhttp3.EventListener
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1
androidx.core.view.InputDeviceCompat
androidx.viewpager.widget.ViewPager$SimpleOnPageChangeListener
androidx.camera.core.ImageCapture$CaptureCallbackChecker$CaptureResultListener
androidx.print.PrintHelper$PrintUriAdapter
androidx.core.provider.FontRequest:
    public void <init>(java.lang.String,java.lang.String,java.lang.String,int)
androidx.media.MediaSessionManager$RemoteUserInfo
androidx.core.graphics.TypefaceCompatApi28Impl:
    private static final java.lang.String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD
    private static final int RESOLVE_BY_FONT_TABLE
    private static final java.lang.String DEFAULT_FAMILY
androidx.recyclerview.widget.StaggeredGridLayoutManager$Span:
    public int findFirstVisibleItemPosition()
    public int findFirstCompletelyVisibleItemPosition()
    public int findLastVisibleItemPosition()
    public int findLastCompletelyVisibleItemPosition()
    int findOneVisibleChild(int,int,boolean)
    static final int INVALID_LINE
androidx.camera.core.R$drawable
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$MessageHandler
android.support.v4.media.MediaBrowserCompat$ItemCallback:
    public void <init>()
    final java.lang.Object mItemCallbackObj
androidx.camera.core.PreviewConfig$Builder:
    public androidx.camera.core.PreviewConfig$Builder setCameraIdFilter(androidx.camera.core.CameraIdFilter)
    public androidx.camera.core.PreviewConfig$Builder setTargetAspectRatio(androidx.camera.core.AspectRatio)
    public androidx.camera.core.PreviewConfig$Builder setDefaultResolution(android.util.Size)
    public androidx.camera.core.PreviewConfig$Builder setSupportedResolutions(java.util.List)
    public androidx.camera.core.PreviewConfig$Builder setBackgroundExecutor(java.util.concurrent.Executor)
    public androidx.camera.core.PreviewConfig$Builder setUseCaseEventListener(androidx.camera.core.UseCase$EventListener)
    public androidx.camera.core.PreviewConfig$Builder setImageInfoProcessor(androidx.camera.core.ImageInfoProcessor)
    public androidx.camera.core.PreviewConfig$Builder setCaptureProcessor(androidx.camera.core.CaptureProcessor)
    public synthetic bridge java.lang.Object setSurfaceOccupancyPriority(int)
    public synthetic bridge java.lang.Object setCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public synthetic bridge java.lang.Object setSessionOptionUnpacker(androidx.camera.core.SessionConfig$OptionUnpacker)
    public synthetic bridge java.lang.Object setDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public synthetic bridge java.lang.Object setDefaultSessionConfig(androidx.camera.core.SessionConfig)
    public synthetic bridge java.lang.Object setTargetName(java.lang.String)
    public synthetic bridge java.lang.Object setTargetClass(java.lang.Class)
    public synthetic bridge java.lang.Object setUseCaseEventListener(androidx.camera.core.UseCase$EventListener)
    public synthetic bridge java.lang.Object setSupportedResolutions(java.util.List)
    public synthetic bridge java.lang.Object setMaxResolution(android.util.Size)
    public synthetic bridge java.lang.Object setDefaultResolution(android.util.Size)
    public synthetic bridge java.lang.Object setTargetResolution(android.util.Size)
    public synthetic bridge java.lang.Object setTargetRotation(int)
    public synthetic bridge java.lang.Object setTargetAspectRatio(androidx.camera.core.AspectRatio)
    public synthetic bridge java.lang.Object setTargetAspectRatioCustom(android.util.Rational)
    public synthetic bridge java.lang.Object setCameraIdFilter(androidx.camera.core.CameraIdFilter)
    public synthetic bridge java.lang.Object setLensFacing(androidx.camera.core.CameraX$LensFacing)
    public synthetic bridge java.lang.Object setBackgroundExecutor(java.util.concurrent.Executor)
androidx.core.content.pm.PermissionInfoCompat$ProtectionFlags
androidx.loader.app.LoaderManagerImpl$LoaderInfo:
    void <init>(int,android.os.Bundle,androidx.loader.content.Loader,androidx.loader.content.Loader)
    androidx.loader.content.Loader setCallback(androidx.lifecycle.LifecycleOwner,androidx.loader.app.LoaderManager$LoaderCallbacks)
    boolean isCallbackWaitingForData()
    public void onLoadComplete(androidx.loader.content.Loader,java.lang.Object)
androidx.core.provider.FontsContractCompat$FontRequestCallback$FontRequestFailReason
androidx.exifinterface.media.ExifInterface$ByteOrderedDataOutputStream
androidx.recyclerview.widget.ItemTouchHelper$5
androidx.camera.core.CameraCaptureMetaData$AfState
androidx.core.net.ConnectivityManagerCompat$RestrictBackgroundStatus
androidx.camera.core.AppConfig$Builder:
    public static androidx.camera.core.AppConfig$Builder fromConfig(androidx.camera.core.Config)
    public synthetic bridge java.lang.Object setTargetName(java.lang.String)
    public synthetic bridge java.lang.Object setTargetClass(java.lang.Class)
okhttp3.internal.platform.AndroidPlatform
io.github.prabhuomkar.pytorchandroid.R$dimen
androidx.localbroadcastmanager.R
androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapperJB:
    public void refreshVisibility()
androidx.versionedparcelable.VersionedParcelize
androidx.recyclerview.widget.ChildHelper:
    private static final boolean DEBUG
    private static final java.lang.String TAG
android.support.v4.media.session.PlaybackStateCompatApi21$CustomAction:
    public static java.lang.Object newInstance(java.lang.String,java.lang.CharSequence,int,android.os.Bundle)
    private void <init>()
androidx.recyclerview.widget.ThreadUtil$MainThreadCallback
android.support.v4.media.MediaBrowserCompatApi26$SubscriptionCallback
androidx.camera.camera2.impl.compat.package-info
com.squareup.picasso.Callback$EmptyCallback
androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator:
    void <init>(androidx.core.graphics.PathParser$PathDataNode[])
com.squareup.picasso.LruCache
androidx.lifecycle.ViewModelProvider$NewInstanceFactory
androidx.camera.core.CaptureStage$DefaultCaptureStage:
    public androidx.camera.core.CaptureConfig getCaptureConfig()
androidx.constraintlayout.widget.ConstraintLayout$LayoutParams:
    public void <init>(androidx.constraintlayout.widget.ConstraintLayout$LayoutParams)
    public void reset()
    public static final int MATCH_CONSTRAINT
    public static final int PARENT_ID
    public static final int UNSET
    public static final int HORIZONTAL
    public static final int VERTICAL
    public static final int LEFT
    public static final int RIGHT
    public static final int TOP
    public static final int BOTTOM
    public static final int BASELINE
    public static final int START
    public static final int END
    public static final int MATCH_CONSTRAINT_WRAP
    public static final int MATCH_CONSTRAINT_SPREAD
    public static final int MATCH_CONSTRAINT_PERCENT
    public static final int CHAIN_SPREAD
    public static final int CHAIN_SPREAD_INSIDE
    public static final int CHAIN_PACKED
androidx.lifecycle.ViewModelProvider:
    public void <init>(androidx.lifecycle.ViewModelStoreOwner,androidx.lifecycle.ViewModelProvider$Factory)
    private static final java.lang.String DEFAULT_KEY
androidx.camera.core.R$dimen
androidx.camera.core.R$integer
androidx.legacy.app.ActionBarDrawerToggle$DelegateProvider
com.facebook.jni.DestructorThread
androidx.loader.app.LoaderManagerImpl:
    private androidx.loader.content.Loader createAndInstallLoader(int,android.os.Bundle,androidx.loader.app.LoaderManager$LoaderCallbacks,androidx.loader.content.Loader)
    public androidx.loader.content.Loader initLoader(int,android.os.Bundle,androidx.loader.app.LoaderManager$LoaderCallbacks)
    public androidx.loader.content.Loader restartLoader(int,android.os.Bundle,androidx.loader.app.LoaderManager$LoaderCallbacks)
    public void destroyLoader(int)
    public androidx.loader.content.Loader getLoader(int)
    public boolean hasRunningLoaders()
    static final java.lang.String TAG
androidx.loader.app.LoaderManager:
    public static void enableDebugLogging(boolean)
    public abstract androidx.loader.content.Loader initLoader(int,android.os.Bundle,androidx.loader.app.LoaderManager$LoaderCallbacks)
    public abstract androidx.loader.content.Loader restartLoader(int,android.os.Bundle,androidx.loader.app.LoaderManager$LoaderCallbacks)
    public abstract void destroyLoader(int)
    public abstract androidx.loader.content.Loader getLoader(int)
    public boolean hasRunningLoaders()
io.github.prabhuomkar.pytorchandroid.helpers.CameraHelper:
    public void <init>()
androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl:
    public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean)
    public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder)
    public void onCloseSubMenu(androidx.appcompat.view.menu.SubMenuBuilder)
androidx.loader.R$integer
androidx.core.graphics.TypefaceCompatApi26Impl:
    private static final java.lang.String TAG
    private static final java.lang.String FONT_FAMILY_CLASS
    private static final java.lang.String ADD_FONT_FROM_ASSET_MANAGER_METHOD
    private static final java.lang.String ADD_FONT_FROM_BUFFER_METHOD
    private static final java.lang.String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD
    private static final java.lang.String FREEZE_METHOD
    private static final java.lang.String ABORT_CREATION_METHOD
    private static final int RESOLVE_BY_FONT_TABLE
androidx.core.view.DragStartHelper$2
io.github.prabhuomkar.pytorchandroid.R$bool
com.facebook.jni.MapIteratorHelper
androidx.arch.core.util.Function:
    public abstract java.lang.Object apply(java.lang.Object)
androidx.recyclerview.widget.OrientationHelper$1:
    public void offsetChild(android.view.View,int)
androidx.annotation.RequiresPermission$Write
androidx.core.graphics.drawable.IconCompat:
    public static androidx.core.graphics.drawable.IconCompat createWithResource(android.content.Context,int)
    public static androidx.core.graphics.drawable.IconCompat createWithResource(android.content.res.Resources,java.lang.String,int)
    public static androidx.core.graphics.drawable.IconCompat createWithBitmap(android.graphics.Bitmap)
    public static androidx.core.graphics.drawable.IconCompat createWithAdaptiveBitmap(android.graphics.Bitmap)
    public static androidx.core.graphics.drawable.IconCompat createWithData(byte[],int,int)
    public static androidx.core.graphics.drawable.IconCompat createWithContentUri(java.lang.String)
    public static androidx.core.graphics.drawable.IconCompat createWithContentUri(android.net.Uri)
    private void <init>(int)
    private android.graphics.drawable.Drawable loadDrawableInner(android.content.Context)
    private static android.content.res.Resources getResources(android.content.Context,java.lang.String)
    public static androidx.core.graphics.drawable.IconCompat createFromBundle(android.os.Bundle)
    public static androidx.core.graphics.drawable.IconCompat createFromIcon(android.content.Context,android.graphics.drawable.Icon)
    public static androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon)
    private static int getType(android.graphics.drawable.Icon)
    private static android.net.Uri getUri(android.graphics.drawable.Icon)
    static android.graphics.Bitmap createLegacyIconFromAdaptiveIcon(android.graphics.Bitmap,boolean)
    public int getType()
    public android.graphics.Bitmap getBitmap()
    public android.net.Uri getUri()
    public androidx.core.graphics.drawable.IconCompat setTint(int)
    public androidx.core.graphics.drawable.IconCompat setTintList(android.content.res.ColorStateList)
    public androidx.core.graphics.drawable.IconCompat setTintMode(android.graphics.PorterDuff$Mode)
    public android.graphics.drawable.Icon toIcon()
    public void checkResource(android.content.Context)
    public android.graphics.drawable.Drawable loadDrawable(android.content.Context)
    public void addToShortcutIntent(android.content.Intent,android.graphics.drawable.Drawable,android.content.Context)
    public android.os.Bundle toBundle()
    private static final java.lang.String TAG
    public static final int TYPE_UNKNOWN
    private static final float ADAPTIVE_ICON_INSET_FACTOR
    private static final float DEFAULT_VIEW_PORT_SCALE
    private static final float ICON_DIAMETER_FACTOR
    private static final float BLUR_FACTOR
    private static final float KEY_SHADOW_OFFSET_FACTOR
    private static final int KEY_SHADOW_ALPHA
    private static final int AMBIENT_SHADOW_ALPHA
    private static final java.lang.String EXTRA_TYPE
    private static final java.lang.String EXTRA_OBJ
    private static final java.lang.String EXTRA_INT1
    private static final java.lang.String EXTRA_INT2
    private static final java.lang.String EXTRA_TINT_LIST
    private static final java.lang.String EXTRA_TINT_MODE
okhttp3.internal.connection.ConnectionSpecSelector
androidx.legacy.v4.R$drawable
androidx.core.content.res.GradientColorInflaterCompat:
    private void <init>()
    static android.graphics.Shader createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)
    private static final int TILE_MODE_CLAMP
    private static final int TILE_MODE_REPEAT
    private static final int TILE_MODE_MIRROR
androidx.constraintlayout.widget.Group
androidx.core.view.accessibility.AccessibilityViewCommand$MoveAtGranularityArguments:
    public int getGranularity()
    public boolean getExtendSelection()
android.support.v4.media.MediaBrowserCompat$MediaBrowserServiceCallbackImpl
androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener
androidx.customview.view.AbsSavedState:
    protected void <init>(android.os.Parcel)
androidx.print.R
androidx.core.os.LocaleListPlatformWrapper
androidx.appcompat.app.AppCompatDelegate$NightMode
androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState$1
org.pytorch.IValue:
    public static org.pytorch.IValue optionalNull()
    public static org.pytorch.IValue from(boolean)
    public static org.pytorch.IValue from(long)
    public static org.pytorch.IValue from(double)
    public static org.pytorch.IValue from(java.lang.String)
    public static varargs org.pytorch.IValue listFrom(boolean[])
    public static varargs org.pytorch.IValue listFrom(long[])
    public static varargs org.pytorch.IValue listFrom(double[])
    public static varargs org.pytorch.IValue listFrom(org.pytorch.Tensor[])
    public static varargs org.pytorch.IValue listFrom(org.pytorch.IValue[])
    public static varargs org.pytorch.IValue tupleFrom(org.pytorch.IValue[])
    public static org.pytorch.IValue dictStringKeyFrom(java.util.Map)
    public static org.pytorch.IValue dictLongKeyFrom(java.util.Map)
    public boolean isNull()
    public boolean isTensor()
    public boolean isBool()
    public boolean isLong()
    public boolean isDouble()
    public boolean isString()
    public boolean isTuple()
    public boolean isBoolList()
    public boolean isLongList()
    public boolean isDoubleList()
    public boolean isTensorList()
    public boolean isList()
    public boolean isDictStringKey()
    public boolean isDictLongKey()
    public boolean toBool()
    public long toLong()
    public double toDouble()
    public java.lang.String toStr()
    public boolean[] toBoolList()
    public long[] toLongList()
    public double[] toDoubleList()
    public org.pytorch.Tensor[] toTensorList()
    public org.pytorch.IValue[] toList()
    public org.pytorch.IValue[] toTuple()
    public java.util.Map toDictStringKey()
    public java.util.Map toDictLongKey()
    private static final int TYPE_CODE_NULL
    private static final int TYPE_CODE_TENSOR
    private static final int TYPE_CODE_BOOL
    private static final int TYPE_CODE_LONG
    private static final int TYPE_CODE_DOUBLE
    private static final int TYPE_CODE_STRING
    private static final int TYPE_CODE_TUPLE
    private static final int TYPE_CODE_BOOL_LIST
    private static final int TYPE_CODE_LONG_LIST
    private static final int TYPE_CODE_DOUBLE_LIST
    private static final int TYPE_CODE_TENSOR_LIST
    private static final int TYPE_CODE_LIST
    private static final int TYPE_CODE_DICT_STRING_KEY
    private static final int TYPE_CODE_DICT_LONG_KEY
com.downloader.database.DownloadModel:
    public java.lang.String getUrl()
    public long getLastModifiedAt()
    static final java.lang.String ID
    static final java.lang.String URL
    static final java.lang.String ETAG
    static final java.lang.String DIR_PATH
    static final java.lang.String FILE_NAME
    static final java.lang.String TOTAL_BYTES
    static final java.lang.String DOWNLOADED_BYTES
    static final java.lang.String LAST_MODIFIED_AT
androidx.camera.core.VideoCapture$VideoCaptureError
androidx.cursoradapter.widget.SimpleCursorAdapter
android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallbackProxy
androidx.core.internal.view.SupportMenuItem:
    public abstract boolean requiresActionButton()
    public abstract boolean requiresOverflow()
    public static final int SHOW_AS_ACTION_NEVER
    public static final int SHOW_AS_ACTION_IF_ROOM
    public static final int SHOW_AS_ACTION_ALWAYS
    public static final int SHOW_AS_ACTION_WITH_TEXT
    public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW
androidx.recyclerview.selection.EventBridge$TrackerToAdapterBridge
okhttp3.CacheControl$Builder
com.squareup.picasso.GetAction
androidx.customview.R$layout
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$6
androidx.asynclayoutinflater.R$styleable
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase
androidx.appcompat.view.menu.MenuItemImpl:
    java.lang.Runnable getCallback()
    public android.view.MenuItem setCallback(java.lang.Runnable)
    public boolean requiresOverflow()
    private static final java.lang.String TAG
    private static final int SHOW_AS_ACTION_MASK
    private static final int CHECKABLE
    private static final int CHECKED
    private static final int EXCLUSIVE
    private static final int HIDDEN
    private static final int ENABLED
    private static final int IS_ACTION
    static final int NO_ICON
okio.HashingSink
androidx.recyclerview.widget.SortedList$Callback
androidx.fragment.app.FragmentManager$BackStackEntry
androidx.drawerlayout.R
androidx.vectordrawable.R$drawable
androidx.core.view.DragStartHelper
okhttp3.internal.cache.CacheInterceptor$1
androidx.camera.core.CaptureConfig:
    public static androidx.camera.core.CaptureConfig defaultEmptyCaptureConfig()
com.squareup.picasso.Utils$1
androidx.swiperefreshlayout.R
androidx.camera.core.ImageAnalysisConfig:
    public androidx.camera.core.ImageAnalysis$ImageReaderMode getImageReaderMode(androidx.camera.core.ImageAnalysis$ImageReaderMode)
    public int getImageQueueDepth(int)
    public java.lang.Class getTargetClass(java.lang.Class)
    public java.lang.Class getTargetClass()
    public androidx.camera.core.CameraX$LensFacing getLensFacing()
    public androidx.camera.core.CameraIdFilter getCameraIdFilter()
    public android.util.Rational getTargetAspectRatioCustom()
    public androidx.camera.core.AspectRatio getTargetAspectRatio()
    public int getTargetRotation()
    public android.util.Size getTargetResolution()
    public android.util.Size getDefaultResolution()
    public android.util.Size getMaxResolution()
    public java.util.List getSupportedResolutions()
    public java.util.concurrent.Executor getBackgroundExecutor()
    public androidx.camera.core.SessionConfig getDefaultSessionConfig()
    public androidx.camera.core.SessionConfig$OptionUnpacker getSessionOptionUnpacker()
    public androidx.camera.core.CaptureConfig getDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public androidx.camera.core.CaptureConfig getDefaultCaptureConfig()
    public androidx.camera.core.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public androidx.camera.core.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker()
    public int getSurfaceOccupancyPriority()
    public androidx.camera.core.UseCase$EventListener getUseCaseEventListener()
okhttp3.internal.Util$2
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi23
androidx.versionedparcelable.VersionedParcel:
    private void writeCollection(java.util.Collection,int)
    private void writeCollection(java.util.Collection)
    private int getType(java.lang.Object)
    private void writeSerializable(java.io.Serializable)
    private int readExceptionCode()
    private java.lang.Exception readException(int,java.lang.String)
    protected static java.lang.Throwable getRootCause(java.lang.Throwable)
    private java.lang.Exception createException(int,java.lang.String)
    private java.util.Collection readCollection(java.util.Collection)
    protected abstract void writeByteArray(byte[],int,int)
    protected abstract void writeLong(long)
    protected abstract void writeFloat(float)
    protected abstract void writeDouble(double)
    protected abstract void writeStrongBinder(android.os.IBinder)
    protected abstract void writeStrongInterface(android.os.IInterface)
    protected abstract void writeBundle(android.os.Bundle)
    protected abstract long readLong()
    protected abstract float readFloat()
    protected abstract double readDouble()
    protected abstract android.os.IBinder readStrongBinder()
    protected abstract android.os.Bundle readBundle()
    public void writeStrongInterface(android.os.IInterface,int)
    public void writeBundle(android.os.Bundle,int)
    public void writeByteArray(byte[],int,int,int)
    public void writeLong(long,int)
    public void writeFloat(float,int)
    public void writeDouble(double,int)
    public void writeStrongBinder(android.os.IBinder,int)
    public long readLong(long,int)
    public float readFloat(float,int)
    public double readDouble(double,int)
    public android.os.IBinder readStrongBinder(android.os.IBinder,int)
    public android.os.Bundle readBundle(android.os.Bundle,int)
    public void writeByte(byte,int)
    public void writeSize(android.util.Size,int)
    public void writeSizeF(android.util.SizeF,int)
    public void writeSparseBooleanArray(android.util.SparseBooleanArray,int)
    public void writeBooleanArray(boolean[],int)
    protected void writeBooleanArray(boolean[])
    public boolean[] readBooleanArray(boolean[],int)
    protected boolean[] readBooleanArray()
    public void writeCharArray(char[],int)
    public char[] readCharArray(char[],int)
    public void writeIntArray(int[],int)
    protected void writeIntArray(int[])
    public int[] readIntArray(int[],int)
    protected int[] readIntArray()
    public void writeLongArray(long[],int)
    protected void writeLongArray(long[])
    public long[] readLongArray(long[],int)
    protected long[] readLongArray()
    public void writeFloatArray(float[],int)
    protected void writeFloatArray(float[])
    public float[] readFloatArray(float[],int)
    protected float[] readFloatArray()
    public void writeDoubleArray(double[],int)
    protected void writeDoubleArray(double[])
    public double[] readDoubleArray(double[],int)
    protected double[] readDoubleArray()
    public void writeSet(java.util.Set,int)
    public void writeList(java.util.List,int)
    public void writeMap(java.util.Map,int)
    public void writeArray(java.lang.Object[],int)
    protected void writeArray(java.lang.Object[])
    public void writeSerializable(java.io.Serializable,int)
    public void writeException(java.lang.Exception,int)
    protected void writeNoException()
    public java.lang.Exception readException(java.lang.Exception,int)
    public byte readByte(byte,int)
    public android.util.Size readSize(android.util.Size,int)
    public android.util.SizeF readSizeF(android.util.SizeF,int)
    public android.util.SparseBooleanArray readSparseBooleanArray(android.util.SparseBooleanArray,int)
    public java.util.Set readSet(java.util.Set,int)
    public java.util.List readList(java.util.List,int)
    public java.util.Map readMap(java.util.Map,int)
    public java.lang.Object[] readArray(java.lang.Object[],int)
    protected java.lang.Object[] readArray(java.lang.Object[])
    protected java.io.Serializable readSerializable()
    private static final java.lang.String TAG
    private static final int EX_SECURITY
    private static final int EX_BAD_PARCELABLE
    private static final int EX_ILLEGAL_ARGUMENT
    private static final int EX_NULL_POINTER
    private static final int EX_ILLEGAL_STATE
    private static final int EX_NETWORK_MAIN_THREAD
    private static final int EX_UNSUPPORTED_OPERATION
    private static final int EX_PARCELABLE
    private static final int TYPE_VERSIONED_PARCELABLE
    private static final int TYPE_PARCELABLE
    private static final int TYPE_SERIALIZABLE
    private static final int TYPE_STRING
    private static final int TYPE_BINDER
    private static final int TYPE_INTEGER
    private static final int TYPE_FLOAT
androidx.core.text.TextDirectionHeuristicCompat
androidx.media.MediaBrowserServiceCompat$BrowserRoot
androidx.customview.widget.ExploreByTouchHelper$1
androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat$SessionConfigurationCompatApi28Impl:
    public void setInputConfiguration(androidx.camera.camera2.impl.compat.params.InputConfigurationCompat)
    public android.hardware.camera2.CaptureRequest getSessionParameters()
okhttp3.internal.ws.RealWebSocket
androidx.core.app.SharedElementCallback:
    public void <init>()
    private static android.graphics.Bitmap createDrawableBitmap(android.graphics.drawable.Drawable)
    public void onRejectSharedElements(java.util.List)
    public android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF)
    public android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable)
    public void onSharedElementsArrived(java.util.List,java.util.List,androidx.core.app.SharedElementCallback$OnSharedElementsReadyListener)
    private android.graphics.Matrix mTempMatrix
    private static final int MAX_IMAGE_SIZE
    private static final java.lang.String BUNDLE_SNAPSHOT_BITMAP
    private static final java.lang.String BUNDLE_SNAPSHOT_IMAGE_SCALETYPE
    private static final java.lang.String BUNDLE_SNAPSHOT_IMAGE_MATRIX
androidx.core.graphics.drawable.IconCompat$IconType
androidx.camera.core.Preview$PreviewSurfaceCallback:
    public abstract com.google.common.util.concurrent.ListenableFuture getSurface(android.util.Size,int)
androidx.recyclerview.widget.SortedListAdapterCallback
androidx.recyclerview.selection.ViewAutoScroller$ScrollHost
androidx.swiperefreshlayout.R$id
okhttp3.internal.platform.OptionalMethod
android.support.v4.media.MediaMetadataCompatApi21:
    public static java.util.Set keySet(java.lang.Object)
    public static android.graphics.Bitmap getBitmap(java.lang.Object,java.lang.String)
    public static long getLong(java.lang.Object,java.lang.String)
    public static java.lang.Object getRating(java.lang.Object,java.lang.String)
    public static java.lang.CharSequence getText(java.lang.Object,java.lang.String)
    public static java.lang.Object createFromParcel(android.os.Parcel)
    private void <init>()
androidx.camera.core.ProcessingImageReader:
    void <init>(androidx.camera.core.ImageReaderProxy,android.os.Handler,androidx.camera.core.CaptureBundle,androidx.camera.core.CaptureProcessor)
    private static final java.lang.String TAG
com.facebook.jni.DestructorThread$1
androidx.core.view.PointerIconCompat
androidx.legacy.v4.R$string
com.squareup.picasso.PicassoDrawable
androidx.camera.core.ImageCaptureConfig:
    public androidx.camera.core.ImageCapture$CaptureMode getCaptureMode(androidx.camera.core.ImageCapture$CaptureMode)
    public androidx.camera.core.ImageCapture$CaptureMode getCaptureMode()
    public androidx.camera.core.FlashMode getFlashMode(androidx.camera.core.FlashMode)
    public androidx.camera.core.FlashMode getFlashMode()
    public androidx.camera.core.CaptureBundle getCaptureBundle(androidx.camera.core.CaptureBundle)
    public androidx.camera.core.CaptureBundle getCaptureBundle()
    public androidx.camera.core.CaptureProcessor getCaptureProcessor(androidx.camera.core.CaptureProcessor)
    public androidx.camera.core.CaptureProcessor getCaptureProcessor()
    public java.lang.Integer getBufferFormat(java.lang.Integer)
    public java.lang.Integer getBufferFormat()
    public int getMaxCaptureStages(int)
    public int getMaxCaptureStages()
    public java.lang.Class getTargetClass(java.lang.Class)
    public java.lang.Class getTargetClass()
    public androidx.camera.core.CameraX$LensFacing getLensFacing()
    public androidx.camera.core.CameraIdFilter getCameraIdFilter()
    public android.util.Rational getTargetAspectRatioCustom()
    public androidx.camera.core.AspectRatio getTargetAspectRatio()
    public int getTargetRotation()
    public android.util.Size getTargetResolution()
    public android.util.Size getDefaultResolution()
    public android.util.Size getMaxResolution()
    public java.util.List getSupportedResolutions()
    public java.util.concurrent.Executor getBackgroundExecutor(java.util.concurrent.Executor)
    public java.util.concurrent.Executor getBackgroundExecutor()
    public androidx.camera.core.SessionConfig getDefaultSessionConfig()
    public androidx.camera.core.CaptureConfig getDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public androidx.camera.core.CaptureConfig getDefaultCaptureConfig()
    public androidx.camera.core.SessionConfig$OptionUnpacker getSessionOptionUnpacker()
    public androidx.camera.core.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public androidx.camera.core.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker()
    public int getSurfaceOccupancyPriority()
    public androidx.camera.core.UseCase$EventListener getUseCaseEventListener()
androidx.appcompat.view.SupportMenuInflater$MenuState:
    private static final int defaultGroupId
    private static final int defaultItemId
    private static final int defaultItemCategory
    private static final int defaultItemOrder
    private static final int defaultItemCheckable
    private static final boolean defaultItemChecked
    private static final boolean defaultItemVisible
    private static final boolean defaultItemEnabled
androidx.annotation.ColorInt
androidx.recyclerview.widget.GridLayoutManager$LayoutParams:
    public void <init>(androidx.recyclerview.widget.RecyclerView$LayoutParams)
    public static final int INVALID_SPAN_ID
androidx.legacy.v4.R$layout
androidx.appcompat.view.menu.StandardMenuPopup:
    public android.os.Parcelable onSaveInstanceState()
    public void onRestoreInstanceState(android.os.Parcelable)
androidx.viewpager.widget.ViewPager$ItemInfo
androidx.recyclerview.selection.GestureRouter
androidx.viewpager.widget.ViewPager$1
androidx.media.VolumeProviderCompat$Callback
androidx.core.app.ActivityOptionsCompat
androidx.cardview.R$style
androidx.camera.core.CameraCaptureFailure:
    public androidx.camera.core.CameraCaptureFailure$Reason getReason()
androidx.customview.widget.FocusStrategy$BoundsAdapter
androidx.recyclerview.widget.AsyncListUtil$1
okhttp3.internal.platform.Jdk9Platform
androidx.camera.core.impl.utils.futures.Futures$4
okhttp3.internal.http2.Http2Connection$3
androidx.camera.camera2.R$dimen
androidx.camera.core.CameraCaptureResult:
    public abstract androidx.camera.core.CameraCaptureMetaData$AfMode getAfMode()
    public abstract androidx.camera.core.CameraCaptureMetaData$AfState getAfState()
    public abstract androidx.camera.core.CameraCaptureMetaData$AeState getAeState()
    public abstract androidx.camera.core.CameraCaptureMetaData$AwbState getAwbState()
    public abstract androidx.camera.core.CameraCaptureMetaData$FlashState getFlashState()
androidx.core.text.PrecomputedTextCompat:
    public static androidx.core.text.PrecomputedTextCompat create(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params)
    private void <init>(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,int[])
    private void <init>(android.text.PrecomputedText,androidx.core.text.PrecomputedTextCompat$Params)
    public static java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor)
    public android.text.PrecomputedText getPrecomputedText()
    public int getParagraphCount()
    public int getParagraphStart(int)
    public int getParagraphEnd(int)
    private final int[] mParagraphEnds
    private final android.text.PrecomputedText mWrapped
    private static final char LINE_FEED
androidx.camera.core.ImageCaptureConfig$Builder:
    public androidx.camera.core.ImageCaptureConfig$Builder setCaptureBundle(androidx.camera.core.CaptureBundle)
    public androidx.camera.core.ImageCaptureConfig$Builder setCaptureProcessor(androidx.camera.core.CaptureProcessor)
    public androidx.camera.core.ImageCaptureConfig$Builder setBufferFormat(int)
    public androidx.camera.core.ImageCaptureConfig$Builder setMaxCaptureStages(int)
    public androidx.camera.core.ImageCaptureConfig$Builder setSupportedResolutions(java.util.List)
    public androidx.camera.core.ImageCaptureConfig$Builder setCameraIdFilter(androidx.camera.core.CameraIdFilter)
    public androidx.camera.core.ImageCaptureConfig$Builder setTargetAspectRatio(androidx.camera.core.AspectRatio)
    public androidx.camera.core.ImageCaptureConfig$Builder setTargetResolution(android.util.Size)
    public androidx.camera.core.ImageCaptureConfig$Builder setDefaultResolution(android.util.Size)
    public androidx.camera.core.ImageCaptureConfig$Builder setMaxResolution(android.util.Size)
    public androidx.camera.core.ImageCaptureConfig$Builder setBackgroundExecutor(java.util.concurrent.Executor)
    public androidx.camera.core.ImageCaptureConfig$Builder setUseCaseEventListener(androidx.camera.core.UseCase$EventListener)
    public synthetic bridge java.lang.Object setSurfaceOccupancyPriority(int)
    public synthetic bridge java.lang.Object setCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public synthetic bridge java.lang.Object setSessionOptionUnpacker(androidx.camera.core.SessionConfig$OptionUnpacker)
    public synthetic bridge java.lang.Object setDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public synthetic bridge java.lang.Object setDefaultSessionConfig(androidx.camera.core.SessionConfig)
    public synthetic bridge java.lang.Object setTargetName(java.lang.String)
    public synthetic bridge java.lang.Object setTargetClass(java.lang.Class)
    public synthetic bridge java.lang.Object setUseCaseEventListener(androidx.camera.core.UseCase$EventListener)
    public synthetic bridge java.lang.Object setSupportedResolutions(java.util.List)
    public synthetic bridge java.lang.Object setMaxResolution(android.util.Size)
    public synthetic bridge java.lang.Object setDefaultResolution(android.util.Size)
    public synthetic bridge java.lang.Object setTargetResolution(android.util.Size)
    public synthetic bridge java.lang.Object setTargetRotation(int)
    public synthetic bridge java.lang.Object setTargetAspectRatio(androidx.camera.core.AspectRatio)
    public synthetic bridge java.lang.Object setTargetAspectRatioCustom(android.util.Rational)
    public synthetic bridge java.lang.Object setCameraIdFilter(androidx.camera.core.CameraIdFilter)
    public synthetic bridge java.lang.Object setLensFacing(androidx.camera.core.CameraX$LensFacing)
    public synthetic bridge java.lang.Object setBackgroundExecutor(java.util.concurrent.Executor)
androidx.appcompat.app.ActionBar$TabListener
androidx.media.MediaBrowserServiceCompatApi26$ResultWrapper
androidx.media.MediaBrowserServiceCompatApi26$ServiceCompatProxy
androidx.appcompat.widget.AbsActionBarView:
    public void animateToVisibility(int)
    public boolean showOverflowMenu()
    public void postShowOverflowMenu()
    public boolean hideOverflowMenu()
    public boolean isOverflowMenuShowing()
    public boolean isOverflowMenuShowPending()
    public boolean isOverflowReserved()
    public boolean canShowOverflowMenu()
    public void dismissPopupMenus()
    private static final int FADE_DURATION
androidx.drawerlayout.R$style
androidx.core.app.NotificationCompat$StreamType
androidx.camera.core.ImageSaver$SaveError
androidx.core.view.LayoutInflaterCompat:
    private void <init>()
    public static void setFactory(android.view.LayoutInflater,androidx.core.view.LayoutInflaterFactory)
    public static androidx.core.view.LayoutInflaterFactory getFactory(android.view.LayoutInflater)
    private static final java.lang.String TAG
androidx.appcompat.widget.ActivityChooserView$2
androidx.core.view.MotionEventCompat:
    public static int getActionMasked(android.view.MotionEvent)
    public static int getActionIndex(android.view.MotionEvent)
    public static int findPointerIndex(android.view.MotionEvent,int)
    public static int getPointerId(android.view.MotionEvent,int)
    public static float getX(android.view.MotionEvent,int)
    public static float getY(android.view.MotionEvent,int)
    public static int getPointerCount(android.view.MotionEvent)
    public static int getSource(android.view.MotionEvent)
    public static float getAxisValue(android.view.MotionEvent,int)
    public static float getAxisValue(android.view.MotionEvent,int,int)
    public static int getButtonState(android.view.MotionEvent)
    private void <init>()
    public static final int ACTION_MASK
    public static final int ACTION_POINTER_DOWN
    public static final int ACTION_POINTER_UP
    public static final int ACTION_HOVER_MOVE
    public static final int ACTION_SCROLL
    public static final int ACTION_POINTER_INDEX_MASK
    public static final int ACTION_POINTER_INDEX_SHIFT
    public static final int ACTION_HOVER_ENTER
    public static final int ACTION_HOVER_EXIT
    public static final int AXIS_X
    public static final int AXIS_Y
    public static final int AXIS_PRESSURE
    public static final int AXIS_SIZE
    public static final int AXIS_TOUCH_MAJOR
    public static final int AXIS_TOUCH_MINOR
    public static final int AXIS_TOOL_MAJOR
    public static final int AXIS_TOOL_MINOR
    public static final int AXIS_ORIENTATION
    public static final int AXIS_VSCROLL
    public static final int AXIS_HSCROLL
    public static final int AXIS_Z
    public static final int AXIS_RX
    public static final int AXIS_RY
    public static final int AXIS_RZ
    public static final int AXIS_HAT_X
    public static final int AXIS_HAT_Y
    public static final int AXIS_LTRIGGER
    public static final int AXIS_RTRIGGER
    public static final int AXIS_THROTTLE
    public static final int AXIS_RUDDER
    public static final int AXIS_WHEEL
    public static final int AXIS_GAS
    public static final int AXIS_BRAKE
    public static final int AXIS_DISTANCE
    public static final int AXIS_TILT
    public static final int AXIS_SCROLL
    public static final int AXIS_RELATIVE_X
    public static final int AXIS_RELATIVE_Y
    public static final int AXIS_GENERIC_1
    public static final int AXIS_GENERIC_2
    public static final int AXIS_GENERIC_3
    public static final int AXIS_GENERIC_4
    public static final int AXIS_GENERIC_5
    public static final int AXIS_GENERIC_6
    public static final int AXIS_GENERIC_7
    public static final int AXIS_GENERIC_8
    public static final int AXIS_GENERIC_9
    public static final int AXIS_GENERIC_10
    public static final int AXIS_GENERIC_11
    public static final int AXIS_GENERIC_12
    public static final int AXIS_GENERIC_13
    public static final int AXIS_GENERIC_14
    public static final int AXIS_GENERIC_15
    public static final int AXIS_GENERIC_16
    public static final int BUTTON_PRIMARY
okio.AsyncTimeout$Watchdog
androidx.core.app.JobIntentService$CompatJobEngine
androidx.core.view.NestedScrollingChildHelper:
    public boolean dispatchNestedScroll(int,int,int,int,int[],int)
    public void onDetachedFromWindow()
    public void onStopNestedScroll(android.view.View)
androidx.vectordrawable.animated.R$id
androidx.core.view.DragAndDropPermissionsCompat
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection$1
androidx.legacy.v4.R$styleable
androidx.customview.R$dimen
androidx.core.provider.FontsContractCompat$4$5
androidx.asynclayoutinflater.R$style
androidx.appcompat.widget.AppCompatRadioButton:
    public void <init>(android.content.Context)
androidx.core.content.ContextCompat$LegacyServiceMapHolder
com.downloader.R
androidx.drawerlayout.R$attr
android.support.v4.media.session.MediaSessionCompat$OnActiveChangeListener
androidx.vectordrawable.R
androidx.appcompat.app.AppCompatDelegateImpl:
    void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback)
    void <init>(android.content.Context,android.app.Activity,androidx.appcompat.app.AppCompatCallback)
    public void setSupportActionBar(androidx.appcompat.widget.Toolbar)
    public boolean hasWindowFeature(int)
    public void setHandleNativeActionModesEnabled(boolean)
    android.view.ViewGroup getSubDecor()
    public void setLocalNightMode(int)
    public final androidx.appcompat.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate()
    private static final boolean DEBUG
    static final java.lang.String EXCEPTION_HANDLER_MESSAGE_SUFFIX
androidx.activity.R$attr
okhttp3.EventListener$2
androidx.recyclerview.R$dimen:
    private void <init>()
androidx.annotation.Size
androidx.cursoradapter.widget.SimpleCursorAdapter$CursorToStringConverter
androidx.constraintlayout.solver.widgets.ConstraintTableLayout$VerticalSlice
com.google.auto.value.AutoValue$CopyAnnotations
androidx.camera.camera2.impl.Camera2CameraFactory:
    private static final java.lang.String TAG
    private static final int DEFAULT_ALLOWED_CONCURRENT_OPEN_CAMERAS
com.downloader.request.DownloadRequestBuilder:
    public com.downloader.request.DownloadRequestBuilder setHeader(java.lang.String,java.lang.String)
    public com.downloader.request.DownloadRequestBuilder setPriority(com.downloader.Priority)
    public com.downloader.request.DownloadRequestBuilder setReadTimeout(int)
    public com.downloader.request.DownloadRequestBuilder setConnectTimeout(int)
    public com.downloader.request.DownloadRequestBuilder setUserAgent(java.lang.String)
    public synthetic bridge com.downloader.request.RequestBuilder setUserAgent(java.lang.String)
    public synthetic bridge com.downloader.request.RequestBuilder setConnectTimeout(int)
    public synthetic bridge com.downloader.request.RequestBuilder setReadTimeout(int)
    public synthetic bridge com.downloader.request.RequestBuilder setTag(java.lang.Object)
    public synthetic bridge com.downloader.request.RequestBuilder setPriority(com.downloader.Priority)
    public synthetic bridge com.downloader.request.RequestBuilder setHeader(java.lang.String,java.lang.String)
androidx.camera.camera2.impl.FocusMeteringControl$2$1
androidx.coordinatorlayout.R$string
androidx.legacy.coreui.R$layout
androidx.media.MediaBrowserServiceCompat$ServiceBinderImpl$2
androidx.camera.core.ImageCapture$CaptureCallbackChecker:
    void <init>()
    private void deliverCaptureResultToListeners(androidx.camera.core.CameraCaptureResult)
    public void onCaptureCompleted(androidx.camera.core.CameraCaptureResult)
    com.google.common.util.concurrent.ListenableFuture checkCaptureResult(androidx.camera.core.ImageCapture$CaptureCallbackChecker$CaptureResultChecker)
    com.google.common.util.concurrent.ListenableFuture checkCaptureResult(androidx.camera.core.ImageCapture$CaptureCallbackChecker$CaptureResultChecker,long,java.lang.Object)
    void addListener(androidx.camera.core.ImageCapture$CaptureCallbackChecker$CaptureResultListener)
    private final java.util.Set mCaptureResultListeners
    private static final long NO_TIMEOUT
androidx.camera.core.CameraControl
androidx.vectordrawable.animated.R$drawable
android.support.v4.media.session.MediaControllerCompatApi24
okhttp3.internal.connection.RouteSelector
okhttp3.internal.ws.WebSocketWriter
androidx.media.MediaBrowserServiceCompatApi26$MediaBrowserServiceAdaptor
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase
okhttp3.internal.platform.ConscryptPlatform
androidx.annotation.StringDef
okhttp3.internal.cache2.Relay$RelaySource
androidx.camera.core.R$style
androidx.core.graphics.TypefaceCompatUtil:
    private void <init>()
    private static final java.lang.String TAG
    private static final java.lang.String CACHE_FILE_PREFIX
androidx.camera.core.ThreadConfig$Builder
androidx.appcompat.app.ResourcesFlusher:
    private void <init>()
    private static final java.lang.String TAG
androidx.recyclerview.widget.DiffUtil$ItemCallback
okhttp3.RealCall
androidx.versionedparcelable.ParcelUtils
androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback:
    public java.util.List getCallbacks()
androidx.appcompat.app.AlertController$ButtonHandler:
    private static final int MSG_DISMISS_DIALOG
com.squareup.picasso.Action$RequestWeakReference
com.squareup.picasso.BitmapHunter$3
androidx.recyclerview.widget.MessageThreadUtil$MessageQueue
androidx.asynclayoutinflater.view.AsyncLayoutInflater$1
androidx.recyclerview.selection.Range$Callbacks
androidx.core.view.accessibility.AccessibilityEventCompat:
    private void <init>()
    public static int getRecordCount(android.view.accessibility.AccessibilityEvent)
    public static void appendRecord(android.view.accessibility.AccessibilityEvent,androidx.core.view.accessibility.AccessibilityRecordCompat)
    public static androidx.core.view.accessibility.AccessibilityRecordCompat getRecord(android.view.accessibility.AccessibilityEvent,int)
    public static androidx.core.view.accessibility.AccessibilityRecordCompat asRecord(android.view.accessibility.AccessibilityEvent)
    public static void setMovementGranularity(android.view.accessibility.AccessibilityEvent,int)
    public static int getMovementGranularity(android.view.accessibility.AccessibilityEvent)
    public static void setAction(android.view.accessibility.AccessibilityEvent,int)
    public static int getAction(android.view.accessibility.AccessibilityEvent)
    public static final int TYPE_VIEW_HOVER_ENTER
    public static final int TYPE_VIEW_HOVER_EXIT
    public static final int TYPE_TOUCH_EXPLORATION_GESTURE_START
    public static final int TYPE_TOUCH_EXPLORATION_GESTURE_END
    public static final int TYPE_WINDOW_CONTENT_CHANGED
    public static final int TYPE_VIEW_SCROLLED
    public static final int TYPE_VIEW_TEXT_SELECTION_CHANGED
    public static final int TYPE_ANNOUNCEMENT
    public static final int TYPE_VIEW_ACCESSIBILITY_FOCUSED
    public static final int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED
    public static final int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY
    public static final int TYPE_GESTURE_DETECTION_START
    public static final int TYPE_GESTURE_DETECTION_END
    public static final int TYPE_TOUCH_INTERACTION_START
    public static final int TYPE_TOUCH_INTERACTION_END
    public static final int TYPE_WINDOWS_CHANGED
    public static final int TYPE_VIEW_CONTEXT_CLICKED
    public static final int TYPE_ASSIST_READING_CONTEXT
    public static final int CONTENT_CHANGE_TYPE_UNDEFINED
    public static final int CONTENT_CHANGE_TYPE_SUBTREE
    public static final int CONTENT_CHANGE_TYPE_TEXT
    public static final int CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION
    public static final int CONTENT_CHANGE_TYPE_PANE_TITLE
    public static final int CONTENT_CHANGE_TYPE_PANE_APPEARED
    public static final int CONTENT_CHANGE_TYPE_PANE_DISAPPEARED
    public static final int TYPES_ALL_MASK
okhttp3.internal.connection.RouteDatabase
org.pytorch.torchvision.R$drawable
androidx.core.content.res.FontResourcesParserCompat:
    private void <init>()
    private static final int NORMAL_WEIGHT
    private static final int ITALIC
    public static final int FETCH_STRATEGY_BLOCKING
    public static final int FETCH_STRATEGY_ASYNC
    public static final int INFINITE_TIMEOUT_VALUE
    private static final int DEFAULT_TIMEOUT_MILLIS
io.github.prabhuomkar.pytorchandroid.datasets.imagenet.Target:
    public void <init>()
    public static final int IMAGE_WIDTH
    public static final int IMAGE_HEIGHT
androidx.fragment.app.FragmentActivity$HostCallbacks:
    public void onStartActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int)
    public void onStartActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle)
    public void onStartIntentSenderFromFragment(androidx.fragment.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
    public void onRequestPermissionsFromFragment(androidx.fragment.app.Fragment,java.lang.String[],int)
    public boolean onShouldShowRequestPermissionRationale(java.lang.String)
androidx.camera.core.DeferrableSurface:
    public int getAttachedCount()
    private static final boolean DEBUG
    protected static final java.lang.String TAG
androidx.recyclerview.widget.AdapterHelper:
    varargs androidx.recyclerview.widget.AdapterHelper addUpdateOp(androidx.recyclerview.widget.AdapterHelper$UpdateOp[])
    boolean onItemRangeChanged(int,int,java.lang.Object)
    boolean onItemRangeInserted(int,int)
    boolean onItemRangeRemoved(int,int)
    boolean onItemRangeMoved(int,int,int)
    static final int POSITION_TYPE_INVISIBLE
    static final int POSITION_TYPE_NEW_OR_LAID_OUT
    private static final boolean DEBUG
    private static final java.lang.String TAG
androidx.core.hardware.display.DisplayManagerCompat
androidx.core.app.FrameMetricsAggregator$MetricType
com.squareup.picasso.Picasso$RequestTransformer$1
androidx.core.widget.TextViewCompat:
    private void <init>()
    private static java.lang.reflect.Field retrieveField(java.lang.String)
    private static int retrieveIntFromField(java.lang.reflect.Field,android.widget.TextView)
    public static void setCompoundDrawablesRelative(android.widget.TextView,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
    public static void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
    public static void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView,int,int,int,int)
    public static int getMaxLines(android.widget.TextView)
    public static int getMinLines(android.widget.TextView)
    public static void setTextAppearance(android.widget.TextView,int)
    public static android.graphics.drawable.Drawable[] getCompoundDrawablesRelative(android.widget.TextView)
    public static void setAutoSizeTextTypeWithDefaults(android.widget.TextView,int)
    public static void setAutoSizeTextTypeUniformWithConfiguration(android.widget.TextView,int,int,int,int)
    public static void setAutoSizeTextTypeUniformWithPresetSizes(android.widget.TextView,int[],int)
    public static int getAutoSizeTextType(android.widget.TextView)
    public static int getAutoSizeStepGranularity(android.widget.TextView)
    public static int getAutoSizeMinTextSize(android.widget.TextView)
    public static int getAutoSizeMaxTextSize(android.widget.TextView)
    public static int[] getAutoSizeTextAvailableSizes(android.widget.TextView)
    public static void setCustomSelectionActionModeCallback(android.widget.TextView,android.view.ActionMode$Callback)
    public static android.content.res.ColorStateList getCompoundDrawableTintList(android.widget.TextView)
    public static android.graphics.PorterDuff$Mode getCompoundDrawableTintMode(android.widget.TextView)
    private static final java.lang.String LOG_TAG
    public static final int AUTO_SIZE_TEXT_TYPE_NONE
    public static final int AUTO_SIZE_TEXT_TYPE_UNIFORM
    private static java.lang.reflect.Field sMaximumField
    private static boolean sMaximumFieldFetched
    private static java.lang.reflect.Field sMaxModeField
    private static boolean sMaxModeFieldFetched
    private static java.lang.reflect.Field sMinimumField
    private static boolean sMinimumFieldFetched
    private static java.lang.reflect.Field sMinModeField
    private static boolean sMinModeFieldFetched
    private static final int LINES
okio.HashingSource
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$1
androidx.core.graphics.PathParser:
    public static boolean interpolatePathDataNodes(androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[],float)
    private void <init>()
    private static final java.lang.String LOGTAG
androidx.camera.camera2.impl.CaptureSession:
    androidx.camera.camera2.impl.CaptureSession$State getState()
    private static final java.lang.String TAG
android.support.v4.media.MediaBrowserCompat$SubscriptionCallback$StubApi21
androidx.camera.camera2.R
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatApi28Impl:
    public void removeSurface(android.view.Surface)
    public int getMaxSharedSurfaceCount()
    public void setPhysicalCameraId(java.lang.String)
org.pytorch.R$attr
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImpl
androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback$1
androidx.camera.core.CameraIdFilterSet
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplApi28
androidx.core.content.PermissionChecker:
    private void <init>()
    public static int checkCallingPermission(android.content.Context,java.lang.String,java.lang.String)
    public static int checkCallingOrSelfPermission(android.content.Context,java.lang.String)
    public static final int PERMISSION_GRANTED
    public static final int PERMISSION_DENIED
    public static final int PERMISSION_DENIED_APP_OP
androidx.camera.camera2.impl.Camera:
    private boolean checkAndAttachRepeatingSurface(androidx.camera.core.CaptureConfig$Builder)
    public com.google.common.util.concurrent.ListenableFuture release()
    void releaseInternal()
    com.google.common.util.concurrent.ListenableFuture getOrCreateUserReleaseFuture()
    void submitCaptureRequests(java.util.List)
    public void onCameraControlCaptureRequests(java.util.List)
    com.google.common.util.concurrent.ListenableFuture mUserReleaseFuture
    private static final java.lang.String TAG
    private static final int ERROR_NONE
androidx.camera.core.ImageCapture$17
androidx.camera.core.UseCaseGroupRepository:
    androidx.camera.core.UseCaseGroupLifecycleController getOrCreateUseCaseGroup(androidx.lifecycle.LifecycleOwner)
    java.util.Map getUseCasesMap()
com.facebook.jni.HybridData:
    public void <init>()
    public synchronized void resetNative()
    public boolean isValid()
    private com.facebook.jni.HybridData$Destructor mDestructor
androidx.camera.core.ImageCapture$9$1
androidx.legacy.coreui.R$color
androidx.fragment.app.FragmentTabHost$TabInfo
androidx.core.view.DragStartHelper$OnDragStartListener
androidx.core.app.NotificationCompatSideChannelService
okhttp3.Route
okhttp3.internal.http2.PushObserver$1
androidx.cardview.widget.CardViewDelegate
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager:
    private void unregisterForLayoutCallback(android.view.View)
    void addAccessibilityPane(android.view.View)
    void removeAccessibilityPane(android.view.View)
androidx.loader.content.ModernAsyncTask$InternalHandler
androidx.camera.core.Exif
androidx.appcompat.view.ActionMode:
    public boolean isUiFocusable()
org.pytorch.R$anim
androidx.camera.core.CameraControlInternal$1:
    public void setCropRegion(android.graphics.Rect)
    public androidx.camera.core.FlashMode getFlashMode()
    public void enableTorch(boolean)
    public boolean isTorchOn()
    public void triggerAf()
    public void triggerAePrecapture()
    public void cancelAfAeTrigger(boolean,boolean)
    public void submitCaptureRequests(java.util.List)
    public void startFocusAndMetering(androidx.camera.core.FocusMeteringAction)
    public void cancelFocusAndMetering()
androidx.customview.widget.ViewDragHelper$2
androidx.recyclerview.widget.RecyclerView$OnFlingListener:
    public void <init>()
androidx.recyclerview.widget.AsyncListDiffer$1$1
androidx.core.widget.PopupMenuCompat
androidx.constraintlayout.solver.Pools$SimplePool:
    private boolean isInPool(java.lang.Object)
android.support.v4.media.session.MediaSessionCompat:
    public void <init>(android.content.Context,java.lang.String)
    public void <init>(android.content.Context,java.lang.String,android.content.ComponentName,android.app.PendingIntent)
    public void <init>(android.content.Context,java.lang.String,android.os.Bundle)
    private void <init>(android.content.Context,java.lang.String,android.content.ComponentName,android.app.PendingIntent,android.os.Bundle)
    private void <init>(android.content.Context,android.support.v4.media.session.MediaSessionCompat$MediaSessionImpl)
    public static android.support.v4.media.session.MediaSessionCompat fromMediaSession(android.content.Context,java.lang.Object)
    static android.support.v4.media.session.PlaybackStateCompat getStateWithUpdatedPosition(android.support.v4.media.session.PlaybackStateCompat,android.support.v4.media.MediaMetadataCompat)
    public void setCallback(android.support.v4.media.session.MediaSessionCompat$Callback)
    public void setCallback(android.support.v4.media.session.MediaSessionCompat$Callback,android.os.Handler)
    public void setSessionActivity(android.app.PendingIntent)
    public void setMediaButtonReceiver(android.app.PendingIntent)
    public void setFlags(int)
    public void setPlaybackToLocal(int)
    public void setPlaybackToRemote(androidx.media.VolumeProviderCompat)
    public void setActive(boolean)
    public boolean isActive()
    public void sendSessionEvent(java.lang.String,android.os.Bundle)
    public void release()
    public android.support.v4.media.session.MediaSessionCompat$Token getSessionToken()
    public android.support.v4.media.session.MediaControllerCompat getController()
    public void setPlaybackState(android.support.v4.media.session.PlaybackStateCompat)
    public void setMetadata(android.support.v4.media.MediaMetadataCompat)
    public void setQueue(java.util.List)
    public void setQueueTitle(java.lang.CharSequence)
    public void setRatingType(int)
    public void setCaptioningEnabled(boolean)
    public void setRepeatMode(int)
    public void setShuffleMode(int)
    public void setExtras(android.os.Bundle)
    public java.lang.Object getMediaSession()
    public java.lang.Object getRemoteControlClient()
    public final androidx.media.MediaSessionManager$RemoteUserInfo getCurrentControllerInfo()
    public java.lang.String getCallingPackage()
    public void addOnActiveChangeListener(android.support.v4.media.session.MediaSessionCompat$OnActiveChangeListener)
    public void removeOnActiveChangeListener(android.support.v4.media.session.MediaSessionCompat$OnActiveChangeListener)
    private final android.support.v4.media.session.MediaSessionCompat$MediaSessionImpl mImpl
    private final android.support.v4.media.session.MediaControllerCompat mController
    private final java.util.ArrayList mActiveListeners
    static final java.lang.String TAG
    public static final int FLAG_HANDLES_MEDIA_BUTTONS
    public static final int FLAG_HANDLES_TRANSPORT_CONTROLS
    public static final int FLAG_HANDLES_QUEUE_COMMANDS
    public static final java.lang.String ACTION_FLAG_AS_INAPPROPRIATE
    public static final java.lang.String ACTION_SKIP_AD
    public static final java.lang.String ACTION_FOLLOW
    public static final java.lang.String ACTION_UNFOLLOW
    public static final java.lang.String ARGUMENT_MEDIA_ATTRIBUTE
    public static final java.lang.String ARGUMENT_MEDIA_ATTRIBUTE_VALUE
    public static final int MEDIA_ATTRIBUTE_ARTIST
    public static final int MEDIA_ATTRIBUTE_ALBUM
    public static final int MEDIA_ATTRIBUTE_PLAYLIST
    public static final java.lang.String ACTION_PLAY_FROM_URI
    public static final java.lang.String ACTION_PREPARE
    public static final java.lang.String ACTION_PREPARE_FROM_MEDIA_ID
    public static final java.lang.String ACTION_PREPARE_FROM_SEARCH
    public static final java.lang.String ACTION_PREPARE_FROM_URI
    public static final java.lang.String ACTION_SET_CAPTIONING_ENABLED
    public static final java.lang.String ACTION_SET_REPEAT_MODE
    public static final java.lang.String ACTION_SET_SHUFFLE_MODE
    public static final java.lang.String ACTION_SET_RATING
    public static final java.lang.String ACTION_ARGUMENT_MEDIA_ID
    public static final java.lang.String ACTION_ARGUMENT_QUERY
    public static final java.lang.String ACTION_ARGUMENT_URI
    public static final java.lang.String ACTION_ARGUMENT_RATING
    public static final java.lang.String ACTION_ARGUMENT_EXTRAS
    public static final java.lang.String ACTION_ARGUMENT_CAPTIONING_ENABLED
    public static final java.lang.String ACTION_ARGUMENT_REPEAT_MODE
    public static final java.lang.String ACTION_ARGUMENT_SHUFFLE_MODE
    public static final java.lang.String KEY_TOKEN
    public static final java.lang.String KEY_EXTRA_BINDER
    public static final java.lang.String KEY_SESSION_TOKEN2_BUNDLE
    private static final int MAX_BITMAP_SIZE_IN_DP
    private static final java.lang.String DATA_CALLING_PACKAGE
    private static final java.lang.String DATA_CALLING_PID
    private static final java.lang.String DATA_CALLING_UID
    private static final java.lang.String DATA_EXTRAS
    static int sMaxBitmapSize
androidx.fragment.app.DialogFragment$1
com.squareup.picasso.RemoteViewsAction$NotificationAction
androidx.media.VolumeProviderCompat$ControlType
androidx.camera.core.UseCaseAttachState:
    public java.util.Collection getActiveAndOnlineUseCases()
    private static final java.lang.String TAG
androidx.constraintlayout.solver.widgets.ConstraintWidget$ContentAlignment
androidx.drawerlayout.R$styleable
androidx.camera.core.ImageCapture$8
androidx.cursoradapter.widget.SimpleCursorAdapter$ViewBinder
androidx.appcompat.widget.AppCompatImageHelper:
    void setInternalImageTint(android.content.res.ColorStateList)
android.support.v4.media.session.IMediaSession:
    public abstract void sendCommand(java.lang.String,android.os.Bundle,android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper)
    public abstract boolean sendMediaButton(android.view.KeyEvent)
    public abstract void unregisterCallbackListener(android.support.v4.media.session.IMediaControllerCallback)
    public abstract boolean isTransportControlEnabled()
    public abstract java.lang.String getPackageName()
    public abstract java.lang.String getTag()
    public abstract android.app.PendingIntent getLaunchPendingIntent()
    public abstract long getFlags()
    public abstract android.support.v4.media.session.ParcelableVolumeInfo getVolumeAttributes()
    public abstract void adjustVolume(int,int,java.lang.String)
    public abstract void setVolumeTo(int,int,java.lang.String)
    public abstract android.support.v4.media.MediaMetadataCompat getMetadata()
    public abstract android.support.v4.media.session.PlaybackStateCompat getPlaybackState()
    public abstract java.util.List getQueue()
    public abstract java.lang.CharSequence getQueueTitle()
    public abstract android.os.Bundle getExtras()
    public abstract int getRatingType()
    public abstract boolean isCaptioningEnabled()
    public abstract int getRepeatMode()
    public abstract boolean isShuffleModeEnabledRemoved()
    public abstract int getShuffleMode()
    public abstract void addQueueItem(android.support.v4.media.MediaDescriptionCompat)
    public abstract void addQueueItemAt(android.support.v4.media.MediaDescriptionCompat,int)
    public abstract void removeQueueItem(android.support.v4.media.MediaDescriptionCompat)
    public abstract void removeQueueItemAt(int)
    public abstract void prepare()
    public abstract void prepareFromMediaId(java.lang.String,android.os.Bundle)
    public abstract void prepareFromSearch(java.lang.String,android.os.Bundle)
    public abstract void prepareFromUri(android.net.Uri,android.os.Bundle)
    public abstract void play()
    public abstract void playFromMediaId(java.lang.String,android.os.Bundle)
    public abstract void playFromSearch(java.lang.String,android.os.Bundle)
    public abstract void playFromUri(android.net.Uri,android.os.Bundle)
    public abstract void skipToQueueItem(long)
    public abstract void pause()
    public abstract void stop()
    public abstract void next()
    public abstract void previous()
    public abstract void fastForward()
    public abstract void rewind()
    public abstract void seekTo(long)
    public abstract void rate(android.support.v4.media.RatingCompat)
    public abstract void rateWithExtras(android.support.v4.media.RatingCompat,android.os.Bundle)
    public abstract void setCaptioningEnabled(boolean)
    public abstract void setRepeatMode(int)
    public abstract void setShuffleModeEnabledRemoved(boolean)
    public abstract void setShuffleMode(int)
    public abstract void sendCustomAction(java.lang.String,android.os.Bundle)
androidx.loader.app.LoaderManager$LoaderCallbacks
okhttp3.Dns$1
androidx.annotation.InspectableProperty$EnumEntry
androidx.cardview.R$attr
androidx.fragment.app.FragmentController:
    public androidx.loader.app.LoaderManager getSupportLoaderManager()
    public int getActiveFragmentsCount()
    public java.util.List getActiveFragments(java.util.List)
    public void restoreAllState(android.os.Parcelable,java.util.List)
    public void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig)
    public java.util.List retainNonConfig()
    public androidx.fragment.app.FragmentManagerNonConfig retainNestedNonConfig()
    public void dispatchReallyStop()
    public void dispatchDestroyView()
    public void doLoaderStart()
    public void doLoaderStop(boolean)
    public void doLoaderRetain()
    public void doLoaderDestroy()
    public void reportLoaderStart()
    public androidx.collection.SimpleArrayMap retainLoaderNonConfig()
    public void restoreLoaderNonConfig(androidx.collection.SimpleArrayMap)
    public void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
android.support.v4.media.session.MediaSessionCompatApi21
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi26$1
androidx.documentfile.provider.DocumentsContractApi19
androidx.camera.camera2.impl.PreviewConfigProvider:
    private static final java.lang.String TAG
androidx.media.MediaBrowserServiceCompatApi23$MediaBrowserServiceAdaptor
androidx.media.session.MediaButtonReceiver
androidx.media.AudioAttributesImpl:
    public abstract java.lang.Object getAudioAttributes()
    public abstract int getVolumeControlStream()
    public abstract int getLegacyStreamType()
    public abstract int getRawLegacyStreamType()
    public abstract int getContentType()
    public abstract int getUsage()
    public abstract int getFlags()
    public abstract android.os.Bundle toBundle()
androidx.core.util.PatternsCompat
androidx.camera.core.CaptureStage:
    public abstract androidx.camera.core.CaptureConfig getCaptureConfig()
androidx.constraintlayout.solver.widgets.ChainHead:
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getFirst()
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getFirstVisibleWidget()
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getLast()
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getLastVisibleWidget()
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getHead()
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getFirstMatchConstraintWidget()
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getLastMatchConstraintWidget()
    public float getTotalWeight()
android.support.v4.media.session.MediaSessionCompat$Callback$StubApi23
androidx.vectordrawable.R$string
androidx.asynclayoutinflater.R$string
androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory:
    public static final int DIRECTION_LEFT
    public static final int DIRECTION_TOP
    public static final int DIRECTION_RIGHT
    public static final int DIRECTION_BOTTOM
androidx.recyclerview.widget.ListAdapter$1
androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat$SessionConfigurationCompatImpl:
    public abstract void setInputConfiguration(androidx.camera.camera2.impl.compat.params.InputConfigurationCompat)
    public abstract android.hardware.camera2.CaptureRequest getSessionParameters()
androidx.viewpager.widget.ViewPager$LayoutParams
androidx.core.content.pm.ShortcutInfoCompatSaver
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi23
okhttp3.Cache$Entry
androidx.appcompat.widget.ActionBarOverlayLayout:
    public boolean isHideOnContentScrollEnabled()
    public boolean hasIcon()
    public boolean hasLogo()
    public void saveToolbarHierarchyState(android.util.SparseArray)
    public void restoreToolbarHierarchyState(android.util.SparseArray)
    private static final java.lang.String TAG
    private static final int ACTION_BAR_ANIMATE_DELAY
androidx.recyclerview.selection.BandSelectionHelper$2
androidx.core.app.ShareCompat$IntentReader
androidx.annotation.MainThread
androidx.recyclerview.selection.Selection
androidx.core.app.BundleCompat$BundleCompatBaseImpl:
    private void <init>()
    public static void putBinder(android.os.Bundle,java.lang.String,android.os.IBinder)
    private static final java.lang.String TAG
    private static java.lang.reflect.Method sPutIBinderMethod
    private static boolean sPutIBinderMethodFetched
okhttp3.internal.ws.RealWebSocket$Streams
io.github.prabhuomkar.pytorchandroid.helpers.DownloadHelper:
    public void <init>()
io.github.prabhuomkar.pytorchandroid.R
androidx.core.text.BidiFormatter$Builder
androidx.core.telephony.mbms.MbmsHelper
androidx.fragment.app.FragmentManagerImpl$FragmentLifecycleCallbacksHolder:
    void <init>(androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks,boolean)
androidx.appcompat.R$interpolator
org.pytorch.torchvision.R$color
com.squareup.picasso.ContactsPhotoRequestHandler
androidx.annotation.NonNull
androidx.drawerlayout.R$color
androidx.camera.core.CameraControlInternal:
    public abstract void setCropRegion(android.graphics.Rect)
    public abstract androidx.camera.core.FlashMode getFlashMode()
    public abstract void enableTorch(boolean)
    public abstract boolean isTorchOn()
    public abstract void triggerAf()
    public abstract void triggerAePrecapture()
    public abstract void cancelAfAeTrigger(boolean,boolean)
    public abstract void submitCaptureRequests(java.util.List)
androidx.core.R$string
android.support.v4.media.MediaBrowserCompat$MediaItem:
    public static android.support.v4.media.MediaBrowserCompat$MediaItem fromMediaItem(java.lang.Object)
    public static java.util.List fromMediaItemList(java.util.List)
    public void <init>(android.support.v4.media.MediaDescriptionCompat,int)
    public int getFlags()
    public boolean isBrowsable()
    public boolean isPlayable()
    public android.support.v4.media.MediaDescriptionCompat getDescription()
    public java.lang.String getMediaId()
    public static final int FLAG_BROWSABLE
    public static final int FLAG_PLAYABLE
androidx.arch.core.executor.DefaultTaskExecutor$1:
    private static final java.lang.String THREAD_NAME_STEM
androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl
androidx.core.text.util.LinkifyCompat
org.pytorch.torchvision.R$layout
androidx.lifecycle.livedata.core.R
androidx.documentfile.provider.DocumentFile
androidx.savedstate.Recreator$SavedStateProvider
androidx.vectordrawable.animated.R$color
androidx.constraintlayout.solver.widgets.ConstraintHorizontalLayout$ContentAlignment
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat:
    public void <init>(int,java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand)
    void <init>(java.lang.Object)
    public java.lang.CharSequence getLabel()
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat createReplacementAction(java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand)
    private static final java.lang.String TAG
androidx.core.content.pm.PermissionInfoCompat$Protection
androidx.legacy.coreui.R$attr
androidx.camera.core.impl.utils.executor.HighPriorityExecutor$1:
    private static final java.lang.String THREAD_NAME
androidx.recyclerview.widget.RecyclerView$Adapter:
    public void setHasStableIds(boolean)
    public final boolean hasObservers()
    public final void notifyDataSetChanged()
    public final void notifyItemChanged(int)
    public final void notifyItemChanged(int,java.lang.Object)
    public final void notifyItemRangeChanged(int,int)
    public final void notifyItemRangeChanged(int,int,java.lang.Object)
    public final void notifyItemInserted(int)
    public final void notifyItemMoved(int,int)
    public final void notifyItemRangeInserted(int,int)
    public final void notifyItemRemoved(int)
    public final void notifyItemRangeRemoved(int,int)
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplBase
androidx.annotation.RequiresPermission
androidx.fragment.app.Fragment:
    public void <init>(int)
    public static androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String)
    public androidx.lifecycle.LifecycleOwner getViewLifecycleOwner()
    public androidx.lifecycle.LiveData getViewLifecycleOwnerLiveData()
    public final int getId()
    public final java.lang.String getTag()
    public final android.os.Bundle requireArguments()
    public void setInitialSavedState(androidx.fragment.app.Fragment$SavedState)
    public void setTargetFragment(androidx.fragment.app.Fragment,int)
    public final int getTargetRequestCode()
    public final java.lang.Object requireHost()
    public final java.lang.CharSequence getText(int)
    public final java.lang.String getString(int)
    public final varargs java.lang.String getString(int,java.lang.Object[])
    public final androidx.fragment.app.FragmentManager requireFragmentManager()
    public final androidx.fragment.app.Fragment requireParentFragment()
    public final boolean isAdded()
    public final boolean isDetached()
    public final boolean isRemoving()
    public final boolean isInLayout()
    public final boolean isResumed()
    public final boolean isVisible()
    public final boolean isHidden()
    public final boolean hasOptionsMenu()
    public final boolean isMenuVisible()
    public void setRetainInstance(boolean)
    public void setHasOptionsMenu(boolean)
    public void setMenuVisibility(boolean)
    public void setUserVisibleHint(boolean)
    public boolean getUserVisibleHint()
    public androidx.loader.app.LoaderManager getLoaderManager()
    public void startActivity(android.content.Intent)
    public void startActivity(android.content.Intent,android.os.Bundle)
    public void startActivityForResult(android.content.Intent,int)
    public void startActivityForResult(android.content.Intent,int,android.os.Bundle)
    public void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
    public final void requestPermissions(java.lang.String[],int)
    public boolean shouldShowRequestPermissionRationale(java.lang.String)
    public final android.view.LayoutInflater getLayoutInflater()
    public void registerForContextMenu(android.view.View)
    public void unregisterForContextMenu(android.view.View)
    public void setEnterSharedElementCallback(androidx.core.app.SharedElementCallback)
    public void setExitSharedElementCallback(androidx.core.app.SharedElementCallback)
    public void setEnterTransition(java.lang.Object)
    public void setReturnTransition(java.lang.Object)
    public void setExitTransition(java.lang.Object)
    public void setReenterTransition(java.lang.Object)
    public void setSharedElementEnterTransition(java.lang.Object)
    public void setSharedElementReturnTransition(java.lang.Object)
    public void setAllowEnterTransitionOverlap(boolean)
    public void setAllowReturnTransitionOverlap(boolean)
    public void postponeEnterTransition()
    public final void postponeEnterTransition(long,java.util.concurrent.TimeUnit)
    static final int INITIALIZING
    static final int CREATED
    static final int ACTIVITY_CREATED
    static final int STARTED
    static final int RESUMED
androidx.core.widget.NestedScrollView:
    public boolean dispatchNestedScroll(int,int,int,int,int[],int)
    public boolean isFillViewport()
    public boolean isSmoothScrollingEnabled()
    static final int ANIMATED_SCROLL_GAP
    static final float MAX_SCROLL_FACTOR
    private static final java.lang.String TAG
    private static final int INVALID_POINTER
androidx.media.MediaSessionManager
android.support.v4.media.RatingCompat$StarStyle
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$2
androidx.recyclerview.widget.SortedList
android.support.v4.media.session.PlaybackStateCompat$State
com.google.auto.value.AutoValue
okhttp3.internal.http2.Http2Connection$2
androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState
androidx.appcompat.app.AlertDialog:
    protected void <init>(android.content.Context)
    protected void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)
    public android.widget.Button getButton(int)
    public void setCustomTitle(android.view.View)
    public void setMessage(java.lang.CharSequence)
    public void setView(android.view.View)
    public void setView(android.view.View,int,int,int,int)
    void setButtonPanelLayoutHint(int)
    public void setButton(int,java.lang.CharSequence,android.os.Message)
    public void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
    public void setButton(int,java.lang.CharSequence,android.graphics.drawable.Drawable,android.content.DialogInterface$OnClickListener)
    public void setIcon(int)
    public void setIcon(android.graphics.drawable.Drawable)
    public void setIconAttribute(int)
    static final int LAYOUT_HINT_NONE
    static final int LAYOUT_HINT_SIDE
androidx.localbroadcastmanager.content.LocalBroadcastManager$ReceiverRecord
okhttp3.CipherSuite$1
androidx.collection.LruCache:
    public void resize(int)
    public final java.lang.Object remove(java.lang.Object)
    public final void evictAll()
    public final synchronized int size()
    public final synchronized int maxSize()
    public final synchronized int hitCount()
    public final synchronized int missCount()
    public final synchronized int createCount()
    public final synchronized int putCount()
    public final synchronized int evictionCount()
    public final synchronized java.util.Map snapshot()
androidx.customview.R$attr
androidx.documentfile.provider.RawDocumentFile
androidx.swiperefreshlayout.widget.CircleImageView$OvalShadow
androidx.core.content.ContentResolverCompat
androidx.lifecycle.viewmodel.R
com.squareup.picasso.NetworkRequestHandler$ContentLengthException
okhttp3.ResponseBody$BomAwareReader
androidx.appcompat.widget.ActivityChooserView$5
androidx.constraintlayout.solver.ArrayLinkedVariables:
    boolean hasAtLeastOnePositiveVariable()
    androidx.constraintlayout.solver.SolverVariable getPivotCandidate()
    int sizeInBytes()
    public void display()
    private static final boolean DEBUG
    private static final int NONE
    private static final boolean FULL_NEW_CHECK
androidx.lifecycle.ReportFragment:
    static androidx.lifecycle.ReportFragment get(android.app.Activity)
    void setProcessListener(androidx.lifecycle.ReportFragment$ActivityInitializationListener)
    private static final java.lang.String REPORT_FRAGMENT_TAG
okhttp3.internal.http2.Settings
androidx.recyclerview.selection.OperationMonitor$1
androidx.appcompat.resources.R$layout
androidx.media.MediaSessionManager$RemoteUserInfoImpl
androidx.camera.core.FixedSizeSurfaceTextures:
    private void <init>()
androidx.concurrent.futures.AbstractResolvableFuture$SetFuture:
    void <init>(androidx.concurrent.futures.AbstractResolvableFuture,com.google.common.util.concurrent.ListenableFuture)
androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback
com.facebook.jni.CppSystemErrorException
androidx.activity.R$drawable
androidx.camera.camera2.impl.Camera2CameraControl$9
androidx.recyclerview.widget.ListAdapter
androidx.camera.core.R
com.squareup.picasso.MediaStoreRequestHandler$PicassoKind
androidx.camera.core.CameraCaptureCallbacks$NoOpCameraCaptureCallback
androidx.core.view.ViewParentCompat:
    private void <init>()
    public static boolean requestSendAccessibilityEvent(android.view.ViewParent,android.view.View,android.view.accessibility.AccessibilityEvent)
    public static boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int)
    public static void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int)
    public static void onStopNestedScroll(android.view.ViewParent,android.view.View)
    public static void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int)
    public static void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int,int)
    public static void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[])
    public static void notifySubtreeAccessibilityStateChanged(android.view.ViewParent,android.view.View,android.view.View,int)
    private static int[] getTempNestedScrollConsumed()
    private static final java.lang.String TAG
    private static int[] sTempNestedScrollConsumed
androidx.activity.R$styleable
androidx.core.widget.PopupWindowCompat:
    private void <init>()
    public static boolean getOverlapAnchor(android.widget.PopupWindow)
    public static int getWindowLayoutType(android.widget.PopupWindow)
    private static final java.lang.String TAG
    private static java.lang.reflect.Method sGetWindowLayoutTypeMethod
    private static boolean sGetWindowLayoutTypeMethodAttempted
androidx.core.content.pm.PermissionInfoCompat
org.pytorch.BuildConfig
androidx.core.view.ViewCompat$ScrollIndicators
androidx.core.view.NestedScrollingParentHelper:
    public void onStopNestedScroll(android.view.View)
com.downloader.utils.Utils:
    private void <init>()
    private static final int MAX_REDIRECTION
androidx.core.view.accessibility.AccessibilityWindowInfoCompat
androidx.constraintlayout.solver.widgets.ConstraintTableLayout
androidx.core.location.LocationManagerCompat
androidx.appcompat.widget.PopupMenu
androidx.appcompat.resources.R$integer
com.squareup.picasso.ResourceRequestHandler
androidx.appcompat.view.menu.CascadingMenuPopup:
    public android.os.Parcelable onSaveInstanceState()
    public void onRestoreInstanceState(android.os.Parcelable)
    static final int HORIZ_POSITION_LEFT
    static final int HORIZ_POSITION_RIGHT
    static final int SUBMENU_TIMEOUT_MS
androidx.constraintlayout.widget.ConstraintSet:
    private void createHorizontalChain(int,int,int,int,int[],float[],int,int,int)
    private androidx.constraintlayout.widget.ConstraintSet$Constraint get(int)
    private java.lang.String sideToString(int)
    public androidx.constraintlayout.widget.ConstraintSet$Constraint getParameters(int)
    public void clone(android.content.Context,int)
    public void clone(androidx.constraintlayout.widget.ConstraintSet)
    public void clone(androidx.constraintlayout.widget.ConstraintLayout)
    public void applyTo(androidx.constraintlayout.widget.ConstraintLayout)
    public void center(int,int,int,int,int,int,int,float)
    public void centerHorizontally(int,int,int,int,int,int,int,float)
    public void centerHorizontallyRtl(int,int,int,int,int,int,int,float)
    public void centerVertically(int,int,int,int,int,int,int,float)
    public void createVerticalChain(int,int,int,int,int[],float[],int)
    public void createHorizontalChain(int,int,int,int,int[],float[],int)
    public void createHorizontalChainRtl(int,int,int,int,int[],float[],int)
    public void connect(int,int,int,int,int)
    public void connect(int,int,int,int)
    public void centerHorizontally(int,int)
    public void centerHorizontallyRtl(int,int)
    public void centerVertically(int,int)
    public void clear(int)
    public void clear(int,int)
    public void setMargin(int,int,int)
    public void setGoneMargin(int,int,int)
    public void setHorizontalBias(int,float)
    public void setVerticalBias(int,float)
    public void setDimensionRatio(int,java.lang.String)
    public void setVisibility(int,int)
    public void setAlpha(int,float)
    public boolean getApplyElevation(int)
    public void setApplyElevation(int,boolean)
    public void setElevation(int,float)
    public void setRotation(int,float)
    public void setRotationX(int,float)
    public void setRotationY(int,float)
    public void setScaleX(int,float)
    public void setScaleY(int,float)
    public void setTransformPivotX(int,float)
    public void setTransformPivotY(int,float)
    public void setTransformPivot(int,float,float)
    public void setTranslationX(int,float)
    public void setTranslationY(int,float)
    public void setTranslation(int,float,float)
    public void setTranslationZ(int,float)
    public void constrainHeight(int,int)
    public void constrainWidth(int,int)
    public void constrainCircle(int,int,int,float)
    public void constrainMaxHeight(int,int)
    public void constrainMaxWidth(int,int)
    public void constrainMinHeight(int,int)
    public void constrainMinWidth(int,int)
    public void constrainPercentWidth(int,float)
    public void constrainPercentHeight(int,float)
    public void constrainDefaultHeight(int,int)
    public void constrainDefaultWidth(int,int)
    public void setHorizontalWeight(int,float)
    public void setVerticalWeight(int,float)
    public void setHorizontalChainStyle(int,int)
    public void setVerticalChainStyle(int,int)
    public void addToHorizontalChain(int,int,int)
    public void addToHorizontalChainRTL(int,int,int)
    public void addToVerticalChain(int,int,int)
    public void removeFromVerticalChain(int)
    public void removeFromHorizontalChain(int)
    public void create(int,int)
    public varargs void createBarrier(int,int,int[])
    public void setGuidelineBegin(int,int)
    public void setGuidelineEnd(int,int)
    public void setGuidelinePercent(int,float)
    public void setBarrierType(int,int)
    private static final java.lang.String TAG
    public static final int UNSET
    public static final int MATCH_CONSTRAINT
    public static final int WRAP_CONTENT
    public static final int MATCH_CONSTRAINT_WRAP
    public static final int MATCH_CONSTRAINT_SPREAD
    public static final int PARENT_ID
    public static final int HORIZONTAL
    public static final int VERTICAL
    public static final int HORIZONTAL_GUIDELINE
    public static final int VERTICAL_GUIDELINE
    public static final int VISIBLE
    public static final int INVISIBLE
    public static final int GONE
    public static final int LEFT
    public static final int RIGHT
    public static final int TOP
    public static final int BOTTOM
    public static final int BASELINE
    public static final int START
    public static final int END
    public static final int CHAIN_SPREAD
    public static final int CHAIN_SPREAD_INSIDE
    public static final int CHAIN_PACKED
    private static final boolean DEBUG
    private static final int BARRIER_TYPE
    private static final int BASELINE_TO_BASELINE
    private static final int BOTTOM_MARGIN
    private static final int BOTTOM_TO_BOTTOM
    private static final int BOTTOM_TO_TOP
    private static final int DIMENSION_RATIO
    private static final int EDITOR_ABSOLUTE_X
    private static final int EDITOR_ABSOLUTE_Y
    private static final int END_MARGIN
    private static final int END_TO_END
    private static final int END_TO_START
    private static final int GONE_BOTTOM_MARGIN
    private static final int GONE_END_MARGIN
    private static final int GONE_LEFT_MARGIN
    private static final int GONE_RIGHT_MARGIN
    private static final int GONE_START_MARGIN
    private static final int GONE_TOP_MARGIN
    private static final int GUIDE_BEGIN
    private static final int GUIDE_END
    private static final int GUIDE_PERCENT
    private static final int HORIZONTAL_BIAS
    private static final int LAYOUT_HEIGHT
    private static final int LAYOUT_VISIBILITY
    private static final int LAYOUT_WIDTH
    private static final int LEFT_MARGIN
    private static final int LEFT_TO_LEFT
    private static final int LEFT_TO_RIGHT
    private static final int ORIENTATION
    private static final int RIGHT_MARGIN
    private static final int RIGHT_TO_LEFT
    private static final int RIGHT_TO_RIGHT
    private static final int START_MARGIN
    private static final int START_TO_END
    private static final int START_TO_START
    private static final int TOP_MARGIN
    private static final int TOP_TO_BOTTOM
    private static final int TOP_TO_TOP
    private static final int VERTICAL_BIAS
    private static final int VIEW_ID
    private static final int HORIZONTAL_WEIGHT
    private static final int VERTICAL_WEIGHT
    private static final int HORIZONTAL_STYLE
    private static final int VERTICAL_STYLE
    private static final int ALPHA
    private static final int ELEVATION
    private static final int ROTATION_X
    private static final int ROTATION_Y
    private static final int SCALE_X
    private static final int SCALE_Y
    private static final int TRANSFORM_PIVOT_X
    private static final int TRANSFORM_PIVOT_Y
    private static final int TRANSLATION_X
    private static final int TRANSLATION_Y
    private static final int TRANSLATION_Z
    private static final int WIDTH_DEFAULT
    private static final int HEIGHT_DEFAULT
    private static final int WIDTH_MAX
    private static final int HEIGHT_MAX
    private static final int WIDTH_MIN
    private static final int HEIGHT_MIN
    private static final int ROTATION
    private static final int CIRCLE
    private static final int CIRCLE_RADIUS
    private static final int CIRCLE_ANGLE
    private static final int WIDTH_PERCENT
    private static final int HEIGHT_PERCENT
    private static final int CHAIN_USE_RTL
    private static final int BARRIER_DIRECTION
    private static final int CONSTRAINT_REFERENCED_IDS
    private static final int BARRIER_ALLOWS_GONE_WIDGETS
    private static final int UNUSED
androidx.core.provider.FontsContractCompat$4$6
androidx.appcompat.content.res.AppCompatResources:
    private void <init>()
    private static final java.lang.String LOG_TAG
okhttp3.WebSocketListener
androidx.activity.R$color
androidx.camera.camera2.R$styleable
okhttp3.ResponseBody$1
androidx.lifecycle.ViewModel:
    java.lang.Object setTagIfAbsent(java.lang.String,java.lang.Object)
    java.lang.Object getTag(java.lang.String)
androidx.annotation.RequiresApi
okhttp3.internal.Util
okhttp3.Call$Factory
androidx.camera.camera2.R$string
okhttp3.internal.http.HttpDate$1
com.squareup.picasso.Dispatcher$DispatcherThread
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$2
androidx.camera.core.ImageAnalysisConfig$Builder:
    public androidx.camera.core.ImageAnalysisConfig$Builder setCameraIdFilter(androidx.camera.core.CameraIdFilter)
    public androidx.camera.core.ImageAnalysisConfig$Builder setTargetAspectRatio(androidx.camera.core.AspectRatio)
    public androidx.camera.core.ImageAnalysisConfig$Builder setSupportedResolutions(java.util.List)
    public androidx.camera.core.ImageAnalysisConfig$Builder setBackgroundExecutor(java.util.concurrent.Executor)
    public androidx.camera.core.ImageAnalysisConfig$Builder setUseCaseEventListener(androidx.camera.core.UseCase$EventListener)
    public synthetic bridge java.lang.Object setCameraIdFilter(androidx.camera.core.CameraIdFilter)
    public synthetic bridge java.lang.Object setLensFacing(androidx.camera.core.CameraX$LensFacing)
    public synthetic bridge java.lang.Object setSupportedResolutions(java.util.List)
    public synthetic bridge java.lang.Object setMaxResolution(android.util.Size)
    public synthetic bridge java.lang.Object setDefaultResolution(android.util.Size)
    public synthetic bridge java.lang.Object setTargetResolution(android.util.Size)
    public synthetic bridge java.lang.Object setTargetRotation(int)
    public synthetic bridge java.lang.Object setTargetAspectRatio(androidx.camera.core.AspectRatio)
    public synthetic bridge java.lang.Object setTargetAspectRatioCustom(android.util.Rational)
    public synthetic bridge java.lang.Object setBackgroundExecutor(java.util.concurrent.Executor)
    public synthetic bridge java.lang.Object setSurfaceOccupancyPriority(int)
    public synthetic bridge java.lang.Object setCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public synthetic bridge java.lang.Object setSessionOptionUnpacker(androidx.camera.core.SessionConfig$OptionUnpacker)
    public synthetic bridge java.lang.Object setDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public synthetic bridge java.lang.Object setDefaultSessionConfig(androidx.camera.core.SessionConfig)
    public synthetic bridge java.lang.Object setTargetName(java.lang.String)
    public synthetic bridge java.lang.Object setTargetClass(java.lang.Class)
    public synthetic bridge java.lang.Object setUseCaseEventListener(androidx.camera.core.UseCase$EventListener)
androidx.core.app.NotificationCompat$DecoratedCustomViewStyle
androidx.camera.camera2.impl.Camera2Initializer:
    private static final java.lang.String TAG
okhttp3.internal.http1.Http1Codec$FixedLengthSink
androidx.viewpager.R$color
androidx.constraintlayout.solver.widgets.ConstraintHorizontalLayout
androidx.recyclerview.widget.AsyncListUtil$2
okhttp3.internal.connection.RouteException
androidx.recyclerview.widget.AsyncDifferConfig$Builder
androidx.appcompat.widget.ActionBarOverlayLayout$LayoutParams:
    public void <init>(android.view.ViewGroup$MarginLayoutParams)
android.support.v4.media.MediaBrowserCompat$SubscriptionCallback
androidx.camera.core.impl.utils.futures.Futures$1
androidx.camera.core.CameraInfoInternal:
    public abstract androidx.camera.core.CameraX$LensFacing getLensFacing()
androidx.appcompat.view.menu.MenuView$ItemView:
    public abstract void setTitle(java.lang.CharSequence)
    public abstract void setEnabled(boolean)
    public abstract void setCheckable(boolean)
    public abstract void setChecked(boolean)
    public abstract void setShortcut(boolean,char)
    public abstract void setIcon(android.graphics.drawable.Drawable)
    public abstract boolean showsIcon()
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi24
androidx.core.view.ViewCompat$2
androidx.loader.content.ModernAsyncTask$AsyncTaskResult
androidx.camera.core.DeferrableSurfaces:
    private void <init>()
    public static java.util.List surfaceList(java.util.Collection)
    public static java.util.Set surfaceSet(java.util.Collection)
    private static final java.lang.String TAG
androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback
androidx.lifecycle.Lifecycling$1:
    void <init>(androidx.lifecycle.LifecycleEventObserver)
androidx.constraintlayout.solver.widgets.ConstraintTableLayout$HorizontalSlice
okhttp3.MultipartBody$Part
androidx.core.content.ContextCompat$MainHandlerExecutor
androidx.cardview.widget.CardViewBaseImpl$1
androidx.core.view.accessibility.AccessibilityViewCommand$SetTextArguments:
    public java.lang.CharSequence getText()
okio.SegmentedByteString
androidx.fragment.app.FragmentTransaction$Op:
    void <init>(int,androidx.fragment.app.Fragment,androidx.lifecycle.Lifecycle$State)
androidx.camera.core.ImageOutputConfig$RotationValue
androidx.core.view.ViewConfigurationCompat:
    public static int getScaledPagingTouchSlop(android.view.ViewConfiguration)
    public static boolean hasPermanentMenuKey(android.view.ViewConfiguration)
    private void <init>()
    private static final java.lang.String TAG
androidx.constraintlayout.widget.R$attr
androidx.camera.core.PreviewConfig:
    public java.lang.Class getTargetClass(java.lang.Class)
    public java.lang.Class getTargetClass()
    public androidx.camera.core.CameraX$LensFacing getLensFacing()
    public androidx.camera.core.CameraIdFilter getCameraIdFilter()
    public android.util.Rational getTargetAspectRatioCustom()
    public androidx.camera.core.AspectRatio getTargetAspectRatio()
    public int getTargetRotation()
    public android.util.Size getTargetResolution()
    public android.util.Size getDefaultResolution()
    public android.util.Size getMaxResolution()
    public java.util.List getSupportedResolutions()
    public java.util.concurrent.Executor getBackgroundExecutor(java.util.concurrent.Executor)
    public java.util.concurrent.Executor getBackgroundExecutor()
    public androidx.camera.core.SessionConfig getDefaultSessionConfig()
    public androidx.camera.core.SessionConfig$OptionUnpacker getSessionOptionUnpacker()
    public androidx.camera.core.CaptureConfig getDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public androidx.camera.core.CaptureConfig getDefaultCaptureConfig()
    public androidx.camera.core.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public androidx.camera.core.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker()
    public int getSurfaceOccupancyPriority()
    public androidx.camera.core.UseCase$EventListener getUseCaseEventListener()
    androidx.camera.core.ImageInfoProcessor getImageInfoProcessor()
    public androidx.camera.core.CaptureProcessor getCaptureProcessor()
org.pytorch.torchvision.R$styleable
androidx.legacy.coreutils.R$drawable
androidx.annotation.DimenRes
androidx.fragment.R$layout
androidx.core.app.NotificationCompat$MessagingStyle
androidx.appcompat.app.ActionBar$LayoutParams:
    public void <init>(int,int,int)
    public void <init>(int)
androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory$EdgeDirection
androidx.loader.R$drawable
androidx.constraintlayout.solver.widgets.ConstraintWidget:
    public void <init>(int,int,int,int)
    public void <init>(int,int)
    public int getMaxHeight()
    public int getMaxWidth()
    public boolean isRoot()
    public boolean isRootContainer()
    public boolean isInsideConstraintLayout()
    public boolean hasAncestor(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public androidx.constraintlayout.solver.widgets.WidgetContainer getRootWidgetContainer()
    public boolean isWidthWrapContent()
    public boolean isHeightWrapContent()
    public java.lang.String getType()
    public void setType(java.lang.String)
    public void setDebugSolverName(androidx.constraintlayout.solver.LinearSystem,java.lang.String)
    int getInternalDrawX()
    int getInternalDrawY()
    public int getInternalDrawRight()
    public int getInternalDrawBottom()
    public int getOptimizerWrapWidth()
    public int getOptimizerWrapHeight()
    public int getDrawWidth()
    public int getDrawHeight()
    public int getDrawBottom()
    public int getDrawRight()
    public int getMinWidth()
    public int getMinHeight()
    public int getLeft()
    public int getTop()
    public float getHorizontalBiasPercent()
    public float getVerticalBiasPercent()
    public void setGoneMargin(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type,int)
    public void forceUpdateDrawPosition()
    public void setDrawOrigin(int,int)
    public void setDrawX(int)
    public void setDrawY(int)
    public void setDrawWidth(int)
    public void setDrawHeight(int)
    public void setLength(int,int)
    public void setDimensionRatio(float,int)
    public float getDimensionRatio()
    public int getDimensionRatioSide()
    public void setDimension(int,int)
    public void setContainerItemSkip(int)
    public int getContainerItemSkip()
    public int getHorizontalChainStyle()
    public int getVerticalChainStyle()
    public void connectedTo(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public void connect(androidx.constraintlayout.solver.widgets.ConstraintAnchor,androidx.constraintlayout.solver.widgets.ConstraintAnchor,int,int)
    public void connect(androidx.constraintlayout.solver.widgets.ConstraintAnchor,androidx.constraintlayout.solver.widgets.ConstraintAnchor,int)
    public void connect(androidx.constraintlayout.solver.widgets.ConstraintAnchor,androidx.constraintlayout.solver.widgets.ConstraintAnchor,int,androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength,int)
    public void connect(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type,int)
    public void connect(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)
    public void connect(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type,int,androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength)
    public void connect(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type,int,androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength,int)
    public void resetAllConstraints()
    public void resetAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor)
    public void resetAnchors(int)
    public void disconnectWidget(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public void disconnectUnlockedWidget(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getHorizontalChainControlWidget()
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getVerticalChainControlWidget()
    int mDistToTop
    int mDistToLeft
    int mDistToRight
    int mDistToBottom
    boolean mLeftHasCentered
    boolean mRightHasCentered
    boolean mTopHasCentered
    boolean mBottomHasCentered
    private static final boolean AUTOTAG_CENTER
    protected static final int SOLVER
    protected static final int DIRECT
    public static final int MATCH_CONSTRAINT_SPREAD
    public static final int MATCH_CONSTRAINT_WRAP
    public static final int MATCH_CONSTRAINT_PERCENT
    public static final int MATCH_CONSTRAINT_RATIO
    public static final int MATCH_CONSTRAINT_RATIO_RESOLVED
    public static final int UNKNOWN
    public static final int HORIZONTAL
    public static final int VERTICAL
    public static final int VISIBLE
    public static final int INVISIBLE
    public static final int GONE
    public static final int CHAIN_SPREAD
    public static final int CHAIN_SPREAD_INSIDE
    public static final int CHAIN_PACKED
    private static final int WRAP
    protected static final int ANCHOR_LEFT
    protected static final int ANCHOR_RIGHT
    protected static final int ANCHOR_TOP
    protected static final int ANCHOR_BOTTOM
    protected static final int ANCHOR_BASELINE
    static final int DIMENSION_HORIZONTAL
    static final int DIMENSION_VERTICAL
androidx.recyclerview.widget.SnapHelper
androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer:
    public void <init>(int,int,int,int)
    public void <init>(int,int)
    public void fillMetrics(androidx.constraintlayout.solver.Metrics)
    public java.lang.String getType()
    public void setPadding(int,int,int,int)
    public void resetGraph()
    public java.util.ArrayList getVerticalGuidelines()
    public java.util.ArrayList getHorizontalGuidelines()
    public androidx.constraintlayout.solver.LinearSystem getSystem()
    public java.util.List getWidgetGroups()
    private static final boolean USE_SNAPSHOT
    private static final int MAX_ITERATIONS
    private static final boolean DEBUG
    private static final boolean DEBUG_LAYOUT
    static final boolean DEBUG_GRAPH
android.support.v4.media.MediaBrowserCompatApi26
okhttp3.internal.Version
androidx.slidingpanelayout.widget.SlidingPaneLayout$DisableLayerRunnable
okhttp3.internal.Util$1
androidx.appcompat.view.menu.SubMenuBuilder:
    public void setShortcutsVisible(boolean)
androidx.legacy.v4.R$id
androidx.annotation.RequiresPermission$Read
androidx.versionedparcelable.CustomVersionedParcelable:
    public void onPreParceling(boolean)
    public void onPostParceling()
okhttp3.WebSocket
androidx.appcompat.widget.ShareActionProvider$OnShareTargetSelectedListener
androidx.camera.core.ImageCapture$18
androidx.camera.core.CaptureConfig$OptionUnpacker:
    public abstract void unpack(androidx.camera.core.UseCaseConfig,androidx.camera.core.CaptureConfig$Builder)
androidx.cursoradapter.widget.CursorAdapter:
    public void <init>(android.content.Context,android.database.Cursor)
    public void <init>(android.content.Context,android.database.Cursor,int)
    protected void init(android.content.Context,android.database.Cursor,boolean)
    public boolean hasStableIds()
    public android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)
    public android.widget.FilterQueryProvider getFilterQueryProvider()
    public void setFilterQueryProvider(android.widget.FilterQueryProvider)
    protected android.widget.FilterQueryProvider mFilterQueryProvider
    public static final int FLAG_AUTO_REQUERY
    public static final int FLAG_REGISTER_CONTENT_OBSERVER
androidx.appcompat.resources.R$color
androidx.cardview.R$color
okhttp3.internal.tls.OkHostnameVerifier
androidx.camera.core.R$styleable
okhttp3.internal.http2.Hpack$Reader
androidx.appcompat.widget.ActivityChooserModel$OnChooseActivityListener
com.squareup.picasso.Target
androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject
androidx.concurrent.futures.CallbackToFutureAdapter:
    private void <init>()
android.support.v4.media.MediaMetadataCompat:
    void <init>(android.os.Bundle)
    public boolean containsKey(java.lang.String)
    public java.lang.CharSequence getText(java.lang.String)
    public java.lang.String getString(java.lang.String)
    public long getLong(java.lang.String)
    public android.support.v4.media.RatingCompat getRating(java.lang.String)
    public android.graphics.Bitmap getBitmap(java.lang.String)
    public android.support.v4.media.MediaDescriptionCompat getDescription()
    public int size()
    public java.util.Set keySet()
    public android.os.Bundle getBundle()
    public java.lang.Object getMediaMetadata()
    private android.support.v4.media.MediaDescriptionCompat mDescription
    private static final java.lang.String TAG
    public static final java.lang.String METADATA_KEY_TITLE
    public static final java.lang.String METADATA_KEY_ARTIST
    public static final java.lang.String METADATA_KEY_DURATION
    public static final java.lang.String METADATA_KEY_ALBUM
    public static final java.lang.String METADATA_KEY_AUTHOR
    public static final java.lang.String METADATA_KEY_WRITER
    public static final java.lang.String METADATA_KEY_COMPOSER
    public static final java.lang.String METADATA_KEY_COMPILATION
    public static final java.lang.String METADATA_KEY_DATE
    public static final java.lang.String METADATA_KEY_YEAR
    public static final java.lang.String METADATA_KEY_GENRE
    public static final java.lang.String METADATA_KEY_TRACK_NUMBER
    public static final java.lang.String METADATA_KEY_NUM_TRACKS
    public static final java.lang.String METADATA_KEY_DISC_NUMBER
    public static final java.lang.String METADATA_KEY_ALBUM_ARTIST
    public static final java.lang.String METADATA_KEY_ART
    public static final java.lang.String METADATA_KEY_ART_URI
    public static final java.lang.String METADATA_KEY_ALBUM_ART
    public static final java.lang.String METADATA_KEY_ALBUM_ART_URI
    public static final java.lang.String METADATA_KEY_USER_RATING
    public static final java.lang.String METADATA_KEY_RATING
    public static final java.lang.String METADATA_KEY_DISPLAY_TITLE
    public static final java.lang.String METADATA_KEY_DISPLAY_SUBTITLE
    public static final java.lang.String METADATA_KEY_DISPLAY_DESCRIPTION
    public static final java.lang.String METADATA_KEY_DISPLAY_ICON
    public static final java.lang.String METADATA_KEY_DISPLAY_ICON_URI
    public static final java.lang.String METADATA_KEY_MEDIA_ID
    public static final java.lang.String METADATA_KEY_MEDIA_URI
    public static final java.lang.String METADATA_KEY_BT_FOLDER_TYPE
    public static final java.lang.String METADATA_KEY_ADVERTISEMENT
    public static final java.lang.String METADATA_KEY_DOWNLOAD_STATUS
    static final int METADATA_TYPE_LONG
    static final int METADATA_TYPE_TEXT
    static final int METADATA_TYPE_BITMAP
    static final int METADATA_TYPE_RATING
com.facebook.jni.DestructorThread$Destructor
androidx.recyclerview.widget.AsyncListUtil
androidx.recyclerview.widget.DefaultItemAnimator:
    private static final boolean DEBUG
androidx.core.view.ScaleGestureDetectorCompat
androidx.core.view.ViewGroupCompat:
    private void <init>()
    public static boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)
    public static void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean)
    public static int getLayoutMode(android.view.ViewGroup)
    public static void setLayoutMode(android.view.ViewGroup,int)
    public static void setTransitionGroup(android.view.ViewGroup,boolean)
    public static int getNestedScrollAxes(android.view.ViewGroup)
    public static final int LAYOUT_MODE_CLIP_BOUNDS
    public static final int LAYOUT_MODE_OPTICAL_BOUNDS
androidx.core.app.NotificationCompat$CarExtender
androidx.camera.core.BaseCamera:
    public abstract void open()
    public abstract void close()
    public abstract com.google.common.util.concurrent.ListenableFuture release()
androidx.asynclayoutinflater.R$integer
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21$6
androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat:
    private static final float PRECISION
    public static final int MAX_NUM_POINTS
    public static final double EPSILON
android.support.v4.app.INotificationSideChannel
androidx.media.MediaBrowserServiceCompat$ServiceBinderImpl$3
androidx.collection.CircularArray
com.facebook.jni.DestructorThread$DestructorStack
androidx.loader.R$color
androidx.camera.camera2.Camera2AppConfig:
    private void <init>()
androidx.recyclerview.selection.R
androidx.savedstate.R
androidx.annotation.GuardedBy
androidx.core.R$integer
okhttp3.internal.http2.Http2Writer
com.squareup.picasso.BitmapHunter$4
androidx.recyclerview.widget.RecyclerView$RecycledViewPool:
    public void setMaxRecycledViews(int,int)
    public int getRecycledViewCount(int)
    int size()
    private static final int DEFAULT_MAX_SCRAP
androidx.vectordrawable.animated.R$dimen
androidx.recyclerview.selection.SelectionPredicates
androidx.recyclerview.widget.RecyclerView$SmoothScroller$Action
okhttp3.internal.http1.Http1Codec
androidx.camera.core.impl.utils.Threads:
    private void <init>()
    public static boolean isBackgroundThread()
    public static void checkBackgroundThread()
okhttp3.internal.tls.BasicCertificateChainCleaner
androidx.core.util.Pools$SynchronizedPool
androidx.recyclerview.selection.MotionEvents
android.support.v4.media.MediaBrowserCompatApi21$MediaItem
androidx.recyclerview.widget.AdapterHelper$UpdateOp:
    static final int ADD
    static final int REMOVE
    static final int UPDATE
    static final int MOVE
    static final int POOL_SIZE
androidx.core.app.ShareCompat
androidx.core.content.SharedPreferencesCompat$EditorCompat
androidx.appcompat.view.WindowCallbackWrapper:
    public void onContentChanged()
androidx.camera.core.ImageOutputConfig$Builder
androidx.slidingpanelayout.widget.SlidingPaneLayout$LayoutParams
androidx.customview.widget.ViewDragHelper$1
androidx.lifecycle.MethodCallsLogger:
    public boolean approveCall(java.lang.String,int)
androidx.appcompat.widget.PopupMenu$1
androidx.legacy.coreui.R
okhttp3.internal.http.StatusLine
androidx.annotation.TransitionRes
androidx.appcompat.widget.ListPopupWindow:
    public void <init>(android.content.Context)
    public void <init>(android.content.Context,android.util.AttributeSet)
    private static boolean isConfirmKey(int)
    public int getPromptPosition()
    public void setForceIgnoreOutsideTouch(boolean)
    public void setDropDownAlwaysVisible(boolean)
    public boolean isDropDownAlwaysVisible()
    public void setSoftInputMode(int)
    public int getSoftInputMode()
    public void setListSelector(android.graphics.drawable.Drawable)
    public int getAnimationStyle()
    public android.graphics.Rect getEpicenterBounds()
    public int getHeight()
    public void setHeight(int)
    public void setWindowLayoutType(int)
    public void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)
    public void setPromptView(android.view.View)
    public void postShow()
    public int getInputMethodMode()
    public boolean performItemClick(int)
    public java.lang.Object getSelectedItem()
    public int getSelectedItemPosition()
    public long getSelectedItemId()
    public android.view.View getSelectedView()
    void setListItemExpandMax(int)
    public boolean onKeyDown(int,android.view.KeyEvent)
    public boolean onKeyUp(int,android.view.KeyEvent)
    public boolean onKeyPreIme(int,android.view.KeyEvent)
    public android.view.View$OnTouchListener createDragToOpenListener(android.view.View)
    private static final java.lang.String TAG
    private static final boolean DEBUG
    static final int EXPAND_LIST_TIMEOUT
    public static final int POSITION_PROMPT_ABOVE
    public static final int POSITION_PROMPT_BELOW
    public static final int MATCH_PARENT
    public static final int WRAP_CONTENT
    public static final int INPUT_METHOD_FROM_FOCUSABLE
    public static final int INPUT_METHOD_NEEDED
    public static final int INPUT_METHOD_NOT_NEEDED
androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord
androidx.core.app.ComponentActivity$ExtraData
okio.RealBufferedSource$1
androidx.appcompat.view.menu.ActionMenuItem:
    public androidx.appcompat.view.menu.ActionMenuItem setExclusiveCheckable(boolean)
    public boolean invoke()
    public boolean requiresActionButton()
    public boolean requiresOverflow()
    private static final int NO_ICON
    private static final int CHECKABLE
    private static final int CHECKED
    private static final int EXCLUSIVE
    private static final int HIDDEN
    private static final int ENABLED
androidx.camera.camera2.Camera2Config$Builder:
    public androidx.camera.camera2.Camera2Config$Builder insertAllOptions(androidx.camera.core.Config)
androidx.camera.core.ImageCapture$7
androidx.recyclerview.selection.DefaultSelectionTracker
androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState
androidx.camera.camera2.impl.Camera2CameraControl$8
androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams:
    public void <init>(androidx.recyclerview.widget.RecyclerView$LayoutParams)
    public void setFullSpan(boolean)
    public static final int INVALID_SPAN_ID
android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallback
androidx.annotation.PluralsRes
androidx.recyclerview.widget.DiffUtil
com.squareup.picasso.RemoteViewsAction
okio.ByteString
androidx.recyclerview.widget.ListUpdateCallback
androidx.vectordrawable.animated.R$style
androidx.camera.core.impl.LiveDataObservable$Result:
    static androidx.camera.core.impl.LiveDataObservable$Result fromError(java.lang.Throwable)
androidx.fragment.app.DialogFragment
androidx.appcompat.R$styleable:
    private void <init>()
okhttp3.Cookie$Builder
androidx.appcompat.app.AlertController:
    public void setButtonPanelLayoutHint(int)
    public android.widget.Button getButton(int)
androidx.recyclerview.widget.AsyncListDiffer$1$2
androidx.slidingpanelayout.R$styleable
androidx.recyclerview.selection.SelectionTracker$SelectionPredicate
androidx.media.MediaBrowserServiceCompat$ConnectionRecord
androidx.core.view.DisplayCutoutCompat
androidx.camera.core.impl.utils.Present
android.support.v4.media.MediaBrowserCompat$SearchCallback:
    public void <init>()
androidx.camera.camera2.impl.compat.params.InputConfigurationCompat:
    public void <init>(int,int,int)
    public int getWidth()
    public int getHeight()
    public int getFormat()
androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat:
    private void <init>()
androidx.appcompat.widget.ActivityChooserModel$DefaultSorter
okhttp3.internal.http.HttpMethod
androidx.camera.core.ImageCapture$TakePictureState
okhttp3.FormBody$Builder
androidx.recyclerview.widget.TileList
androidx.core.widget.TintableCompoundButton:
    public abstract android.content.res.ColorStateList getSupportButtonTintList()
    public abstract android.graphics.PorterDuff$Mode getSupportButtonTintMode()
com.squareup.picasso.Picasso$Priority
androidx.camera.camera2.impl.Camera2DeviceSurfaceManager:
    void <init>(android.content.Context,androidx.camera.camera2.impl.CamcorderProfileHelper)
    public boolean checkSupported(java.lang.String,java.util.List)
    private static final java.lang.String TAG
androidx.asynclayoutinflater.view.AsyncLayoutInflater$InflateRequest
androidx.localbroadcastmanager.content.LocalBroadcastManager$BroadcastRecord
okio.GzipSink
okio.Timeout$1
androidx.camera.core.impl.utils.futures.FutureChain
androidx.viewpager.widget.PagerTitleStrip
androidx.core.hardware.fingerprint.FingerprintManagerCompat$1
androidx.core.graphics.PathUtils
androidx.exifinterface.media.ExifInterface$ExifTag
androidx.camera.core.CameraCaptureMetaData$AwbState
androidx.recyclerview.selection.BandSelectionHelper$1
android.support.v4.media.session.MediaSessionCompat$QueueItem:
    public void <init>(android.support.v4.media.MediaDescriptionCompat,long)
    public android.support.v4.media.MediaDescriptionCompat getDescription()
    public long getQueueId()
    public java.lang.Object getQueueItem()
    public static final int UNKNOWN_ID
com.squareup.picasso.Stats
androidx.appcompat.view.menu.MenuBuilder:
    private void dispatchSaveInstanceState(android.os.Bundle)
    private void dispatchRestoreInstanceState(android.os.Bundle)
    public void savePresenterStates(android.os.Bundle)
    public void restorePresenterStates(android.os.Bundle)
    public void removeItemAt(int)
    public void clearAll()
    public void setShortcutsVisible(boolean)
    public void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)
    public void setOptionalIconsVisible(boolean)
    private android.util.SparseArray mFrozenViewStates
    private static final java.lang.String TAG
    private static final java.lang.String PRESENTER_KEY
    private static final java.lang.String ACTION_VIEW_STATES_KEY
    private static final java.lang.String EXPANDED_ACTION_VIEW_ID
androidx.recyclerview.widget.RecyclerView$AdapterDataObservable:
    public boolean hasObservers()
    public void notifyChanged()
    public void notifyItemRangeChanged(int,int)
    public void notifyItemRangeChanged(int,int,java.lang.Object)
    public void notifyItemRangeInserted(int,int)
    public void notifyItemRangeRemoved(int,int)
    public void notifyItemMoved(int,int)
android.support.v4.media.session.MediaSessionCompat$Callback$StubApi21
androidx.recyclerview.widget.RecyclerView$ViewCacheExtension:
    public void <init>()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat:
    public static androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat obtain(int,int,boolean)
    public int getColumnCount()
    public int getRowCount()
    public boolean isHierarchical()
    public int getSelectionMode()
    public static final int SELECTION_MODE_NONE
    public static final int SELECTION_MODE_SINGLE
    public static final int SELECTION_MODE_MULTIPLE
androidx.appcompat.widget.ThemeUtils:
    public static android.content.res.ColorStateList createDisabledStateList(int,int)
    private void <init>()
androidx.appcompat.resources.R
androidx.camera.core.ImageCapture$10
androidx.appcompat.app.ActionBarDrawerToggle$Delegate
android.support.v4.media.session.PlaybackStateCompat$CustomAction$Builder
androidx.appcompat.widget.ButtonBarLayout:
    private static final int PEEK_BUTTON_DP
androidx.appcompat.widget.RtlSpacingHelper:
    public static final int UNDEFINED
androidx.recyclerview.widget.LinearLayoutManager$LayoutState:
    void log()
    static final java.lang.String TAG
    static final int LAYOUT_START
    static final int LAYOUT_END
    static final int INVALID_LAYOUT
    static final int ITEM_DIRECTION_HEAD
    static final int ITEM_DIRECTION_TAIL
    static final int SCROLLING_OFFSET_NaN
androidx.print.PrintHelper$PrintBitmapAdapter
com.squareup.picasso.Dispatcher$DispatcherHandler
okhttp3.internal.http2.StreamResetException
okhttp3.internal.http2.Http2Connection$1
androidx.core.view.ActionProvider:
    public android.content.Context getContext()
    public void refreshVisibility()
    public void subUiVisibilityChanged(boolean)
    private static final java.lang.String TAG
androidx.media.MediaBrowserServiceCompat$ConnectionRecord$1
com.squareup.picasso.NetworkPolicy
androidx.appcompat.widget.AppCompatButton:
    public void <init>(android.content.Context)
androidx.camera.core.ImageCapture$Metadata:
    public boolean isReversedHorizontal
    public boolean isReversedVertical
    public android.location.Location location
androidx.versionedparcelable.R
androidx.core.app.NotificationManagerCompat
androidx.vectordrawable.animated.R
androidx.core.app.RemoteInput$Source
androidx.appcompat.app.NavItemSelectedListener
androidx.core.app.NotificationManagerCompat$CancelTask
androidx.appcompat.widget.ActivityChooserView$4
androidx.collection.ArraySet:
    public void <init>(androidx.collection.ArraySet)
    public void <init>(java.util.Collection)
    public void addAll(androidx.collection.ArraySet)
    public boolean removeAll(androidx.collection.ArraySet)
    private static final boolean DEBUG
    private static final java.lang.String TAG
    private static final int BASE_SIZE
    private static final int CACHE_SIZE
androidx.coordinatorlayout.R
androidx.camera.camera2.impl.ImageAnalysisConfigProvider:
    private static final java.lang.String TAG
androidx.core.os.OperationCanceledException
androidx.camera.core.CameraRepository:
    private synthetic void lambda$deinit$1(androidx.camera.core.BaseCamera)
    private synthetic java.lang.Object lambda$deinit$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    public com.google.common.util.concurrent.ListenableFuture deinit()
    java.util.Set getCameraIds()
    private com.google.common.util.concurrent.ListenableFuture mDeinitFuture
    private androidx.concurrent.futures.CallbackToFutureAdapter$Completer mDeinitCompleter
    private static final java.lang.String TAG
android.support.v4.media.ParceledListSliceAdapterApi21
androidx.savedstate.SavedStateRegistry:
    public void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)
    public void unregisterSavedStateProvider(java.lang.String)
    public boolean isRestored()
    public void runOnNextRecreation(java.lang.Class)
    private androidx.savedstate.Recreator$SavedStateProvider mRecreatorProvider
    private static final java.lang.String SAVED_COMPONENTS_KEY
androidx.exifinterface.media.ExifInterface
androidx.vectordrawable.animated.R$styleable
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$8
androidx.slidingpanelayout.widget.SlidingPaneLayout$DragHelperCallback
androidx.recyclerview.R$style
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$1
okhttp3.TlsVersion
androidx.core.text.TextDirectionHeuristicsCompat$FirstStrong
okhttp3.internal.http2.Http2Stream
androidx.core.app.NotificationCompat$GroupAlertBehavior
androidx.appcompat.widget.AppCompatSpinner:
    public void <init>(android.content.Context)
    public void <init>(android.content.Context,int)
    private static final int MAX_ITEMS_MEASURED
    private static final java.lang.String TAG
    private static final int MODE_DIALOG
    private static final int MODE_DROPDOWN
    private static final int MODE_THEME
androidx.activity.R$style
android.support.v4.media.session.MediaSessionCompat$Callback
androidx.exifinterface.media.ExifInterface$IfdType
androidx.recyclerview.selection.OnDragInitiatedListener
androidx.recyclerview.selection.Shared
androidx.media.app.NotificationCompat$MediaStyle
androidx.camera.core.impl.utils.futures.AsyncFunction
androidx.recyclerview.selection.StableIdKeyProvider$1
com.facebook.jni.IteratorHelper
androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListenerWrapper
androidx.core.content.res.ColorStateListInflaterCompat:
    private void <init>()
io.github.prabhuomkar.pytorchandroid.Constants:
    public void <init>()
    public static final java.lang.String PLACEHOLDER_IMAGE_NAME
    public static final java.lang.String BUTTON_STATE_DOWNLOAD
    public static final java.lang.String BUTTON_STATE_DOWNLOADING
    public static final java.lang.String BUTTON_STATE_CANCEL
    public static final java.lang.String BUTTON_STATE_DONE
    public static final java.lang.String DOWNLOAD_PROGRESS_STATE_DONE
    public static final java.lang.String CONTACT_EMAIL
    public static final java.lang.String HELP_URL
    public static final java.lang.String ERR_NO_EMAIL_CLIENT
    public static final java.lang.String ERR_MODEL_NOT_FOUND
    public static final java.lang.String ERR_PERMISSION_TITLE
    public static final java.lang.String ERR_PERMISSION_MESSAGE
    public static final java.lang.String TASK_IMAGE_CLASSIFICATION
androidx.core.text.TextDirectionHeuristicsCompat$AnyStrong
org.pytorch.R$styleable
androidx.camera.core.ImageCapture$6
androidx.slidingpanelayout.R$layout
androidx.camera.core.Preview:
    private androidx.camera.core.CameraControlInternal getCurrentCameraControl()
    private void invalidateMetadata()
    public androidx.camera.core.Preview$PreviewSurfaceCallback getPreviewSurfaceCallback()
    public void setPreviewSurfaceCallback(androidx.camera.core.Preview$PreviewSurfaceCallback)
    public void removePreviewSurfaceCallback()
    public void zoom(android.graphics.Rect)
    public void enableTorch(boolean)
    public boolean isTorchOn()
    public void setTargetRotation(int)
    private static final java.lang.String TAG
    private static final java.lang.String CONFLICTING_SURFACE_API_ERROR_MESSAGE
androidx.camera.camera2.impl.compat.params.package-info
com.squareup.picasso.BitmapHunter
androidx.appcompat.widget.ScrollingTabContainerView:
    public void <init>(android.content.Context)
    private androidx.appcompat.widget.LinearLayoutCompat createTabLayout()
    public void animateToVisibility(int)
    public void addTab(androidx.appcompat.app.ActionBar$Tab,boolean)
    public void addTab(androidx.appcompat.app.ActionBar$Tab,int,boolean)
    public void updateTab(int)
    public void removeTabAt(int)
    public void removeAllTabs()
    protected android.view.ViewPropertyAnimator mVisibilityAnim
    protected final androidx.appcompat.widget.ScrollingTabContainerView$VisibilityAnimListener mVisAnimListener
    private static final java.lang.String TAG
    private static final int FADE_DURATION
androidx.drawerlayout.widget.DrawerLayout$SimpleDrawerListener
androidx.core.database.DatabaseUtilsCompat
okhttp3.internal.connection.StreamAllocation
okio.SegmentPool
androidx.asynclayoutinflater.R$id
androidx.camera.core.VideoCaptureConfig:
    public int getVideoFrameRate(int)
    public int getBitRate(int)
    public int getIFrameInterval(int)
    public int getAudioBitRate(int)
    public int getAudioSampleRate(int)
    public int getAudioChannelCount(int)
    public int getAudioRecordSource(int)
    public int getAudioMinBufferSize(int)
    public java.lang.Class getTargetClass(java.lang.Class)
    public java.lang.Class getTargetClass()
    public androidx.camera.core.CameraX$LensFacing getLensFacing()
    public androidx.camera.core.CameraIdFilter getCameraIdFilter()
    public android.util.Rational getTargetAspectRatioCustom()
    public androidx.camera.core.AspectRatio getTargetAspectRatio()
    public int getTargetRotation()
    public android.util.Size getTargetResolution()
    public android.util.Size getDefaultResolution()
    public android.util.Size getMaxResolution()
    public java.util.List getSupportedResolutions()
    public java.util.concurrent.Executor getBackgroundExecutor(java.util.concurrent.Executor)
    public java.util.concurrent.Executor getBackgroundExecutor()
    public androidx.camera.core.SessionConfig getDefaultSessionConfig()
    public androidx.camera.core.SessionConfig$OptionUnpacker getSessionOptionUnpacker()
    public androidx.camera.core.CaptureConfig getDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public androidx.camera.core.CaptureConfig getDefaultCaptureConfig()
    public androidx.camera.core.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public androidx.camera.core.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker()
    public int getSurfaceOccupancyPriority()
    public androidx.camera.core.UseCase$EventListener getUseCaseEventListener()
okhttp3.internal.http.HttpHeaders
androidx.appcompat.view.menu.ListMenuPresenter:
    int getItemIndexOffset()
    public void setItemIndexOffset(int)
    public void saveHierarchyState(android.os.Bundle)
    public void restoreHierarchyState(android.os.Bundle)
    public void setId(int)
    public int getId()
    public android.os.Parcelable onSaveInstanceState()
    public void onRestoreInstanceState(android.os.Parcelable)
    private int mId
    private static final java.lang.String TAG
    public static final java.lang.String VIEWS_TAG
androidx.recyclerview.widget.GridLayoutManager:
    public void <init>(android.content.Context,int)
    public void <init>(android.content.Context,int,int,boolean)
    public void setSpanSizeLookup(androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup)
    public androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup getSpanSizeLookup()
    public int getSpanCount()
    public void setUsingSpansToEstimateScrollbarDimensions(boolean)
    public boolean isUsingSpansToEstimateScrollbarDimensions()
    private static final boolean DEBUG
    private static final java.lang.String TAG
    public static final int DEFAULT_SPAN_COUNT
okhttp3.MultipartBody$Builder
androidx.annotation.AnimRes
androidx.annotation.XmlRes
okhttp3.internal.NamedRunnable
androidx.camera.core.UseCaseGroupLifecycleController:
    void release()
androidx.lifecycle.ViewModelStore:
    java.util.Set keys()
android.support.v4.media.MediaMetadataCompat$LongKey
androidx.appcompat.R
okhttp3.Dispatcher
androidx.activity.OnBackPressedDispatcher:
    public void <init>()
    public void addCallback(androidx.activity.OnBackPressedCallback)
    public boolean hasEnabledCallbacks()
androidx.annotation.IntDef
androidx.core.os.CancellationSignal$OnCancelListener
androidx.camera.core.impl.utils.futures.Futures$2:
    public java.lang.Object apply(java.lang.Object)
androidx.documentfile.provider.SingleDocumentFile
androidx.recyclerview.R$layout
androidx.camera.core.VideoCapture$1
android.support.v4.media.session.MediaSessionCompatApi21$QueueItem:
    public static java.lang.Object createItem(java.lang.Object,long)
    private void <init>()
androidx.core.view.KeyEventDispatcher:
    private void <init>()
android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo:
    public static int getPlaybackType(java.lang.Object)
    public static int getVolumeControl(java.lang.Object)
    public static int getMaxVolume(java.lang.Object)
    public static int getCurrentVolume(java.lang.Object)
    private void <init>()
    private static final int FLAG_SCO
    private static final int STREAM_BLUETOOTH_SCO
    private static final int STREAM_SYSTEM_ENFORCED
androidx.appcompat.view.menu.ActionMenuItemView:
    public void setShortcut(boolean,char)
    public boolean showsIcon()
    private static final java.lang.String TAG
    private static final int MAX_ICON_SIZE
androidx.core.content.res.TypedArrayUtils:
    public static boolean getBoolean(android.content.res.TypedArray,int,int,boolean)
    public static android.graphics.drawable.Drawable getDrawable(android.content.res.TypedArray,int,int)
    public static int getInt(android.content.res.TypedArray,int,int,int)
    public static int getResourceId(android.content.res.TypedArray,int,int,int)
    public static java.lang.String getString(android.content.res.TypedArray,int,int)
    public static java.lang.CharSequence getText(android.content.res.TypedArray,int,int)
    public static java.lang.CharSequence[] getTextArray(android.content.res.TypedArray,int,int)
    public static int getAttr(android.content.Context,int,int)
    private void <init>()
    private static final java.lang.String NAMESPACE
androidx.recyclerview.widget.DiffUtil$Range
androidx.recyclerview.selection.SelectionTracker$Builder$1
androidx.camera.core.CaptureBundles:
    private void <init>()
okhttp3.internal.http2.Http2Connection$Builder
androidx.core.content.pm.ShortcutManagerCompat
androidx.recyclerview.selection.GridModel$1
androidx.coordinatorlayout.R$dimen
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState:
    private static final long REVERSED_BIT
    private static final long REVERSIBLE_FLAG_BIT
androidx.core.widget.ScrollerCompat
androidx.core.provider.FontsContractCompat$4$7
androidx.camera.core.ImageCapture$CaptureCallbackChecker$1$1
androidx.camera.core.UseCaseEventConfig:
    public abstract androidx.camera.core.UseCase$EventListener getUseCaseEventListener()
androidx.media.VolumeProviderCompatApi21
androidx.camera.camera2.impl.Camera2CaptureCallbacks:
    private void <init>()
    public static varargs android.hardware.camera2.CameraCaptureSession$CaptureCallback createComboCallback(android.hardware.camera2.CameraCaptureSession$CaptureCallback[])
okhttp3.internal.tls.TrustRootIndex
androidx.media.app.NotificationCompat
androidx.appcompat.app.AppCompatDelegateImpl$ActionBarDrawableToggleImpl
androidx.recyclerview.selection.DefaultBandHost$1
androidx.media.MediaBrowserServiceCompat$ServiceCallbacks
okhttp3.internal.cache.DiskLruCache$1
androidx.camera.camera2.impl.package-info
androidx.appcompat.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener
androidx.customview.widget.FocusStrategy$SequentialComparator
android.support.v4.media.session.IMediaSession$Stub:
    public void <init>()
    public android.os.IBinder asBinder()
    public boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)
    private static final java.lang.String DESCRIPTOR
    static final int TRANSACTION_sendCommand
    static final int TRANSACTION_sendMediaButton
    static final int TRANSACTION_registerCallbackListener
    static final int TRANSACTION_unregisterCallbackListener
    static final int TRANSACTION_isTransportControlEnabled
    static final int TRANSACTION_getPackageName
    static final int TRANSACTION_getTag
    static final int TRANSACTION_getLaunchPendingIntent
    static final int TRANSACTION_getFlags
    static final int TRANSACTION_getVolumeAttributes
    static final int TRANSACTION_adjustVolume
    static final int TRANSACTION_setVolumeTo
    static final int TRANSACTION_getMetadata
    static final int TRANSACTION_getPlaybackState
    static final int TRANSACTION_getQueue
    static final int TRANSACTION_getQueueTitle
    static final int TRANSACTION_getExtras
    static final int TRANSACTION_getRatingType
    static final int TRANSACTION_isCaptioningEnabled
    static final int TRANSACTION_getRepeatMode
    static final int TRANSACTION_isShuffleModeEnabledRemoved
    static final int TRANSACTION_getShuffleMode
    static final int TRANSACTION_addQueueItem
    static final int TRANSACTION_addQueueItemAt
    static final int TRANSACTION_removeQueueItem
    static final int TRANSACTION_removeQueueItemAt
    static final int TRANSACTION_prepare
    static final int TRANSACTION_prepareFromMediaId
    static final int TRANSACTION_prepareFromSearch
    static final int TRANSACTION_prepareFromUri
    static final int TRANSACTION_play
    static final int TRANSACTION_playFromMediaId
    static final int TRANSACTION_playFromSearch
    static final int TRANSACTION_playFromUri
    static final int TRANSACTION_skipToQueueItem
    static final int TRANSACTION_pause
    static final int TRANSACTION_stop
    static final int TRANSACTION_next
    static final int TRANSACTION_previous
    static final int TRANSACTION_fastForward
    static final int TRANSACTION_rewind
    static final int TRANSACTION_seekTo
    static final int TRANSACTION_rate
    static final int TRANSACTION_rateWithExtras
    static final int TRANSACTION_setCaptioningEnabled
    static final int TRANSACTION_setRepeatMode
    static final int TRANSACTION_setShuffleModeEnabledRemoved
    static final int TRANSACTION_setShuffleMode
    static final int TRANSACTION_sendCustomAction
androidx.core.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderApi19
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$3
androidx.camera.core.impl.package-info
androidx.viewpager.widget.PagerAdapter
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21$7
androidx.appcompat.widget.ToolbarWidgetWrapper:
    private void ensureSpinner()
    public java.lang.CharSequence getSubtitle()
    public boolean hasIcon()
    public boolean hasLogo()
    public boolean hasEmbeddedTabs()
    public boolean isTitleTruncated()
    public void setNavigationMode(int)
    public void setDropdownParams(android.widget.SpinnerAdapter,android.widget.AdapterView$OnItemSelectedListener)
    public void setDropdownSelectedPosition(int)
    public int getDropdownSelectedPosition()
    public int getDropdownItemCount()
    public android.view.View getCustomView()
    public void animateToVisibility(int)
    public void setNavigationIcon(int)
    public void setDefaultNavigationIcon(android.graphics.drawable.Drawable)
    public void saveHierarchyState(android.util.SparseArray)
    public void restoreHierarchyState(android.util.SparseArray)
    public void setBackgroundDrawable(android.graphics.drawable.Drawable)
    public int getHeight()
    public int getVisibility()
    public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter$Callback,androidx.appcompat.view.menu.MenuBuilder$Callback)
    public android.view.Menu getMenu()
    private android.widget.Spinner mSpinner
    private static final java.lang.String TAG
    private static final int AFFECTS_LOGO_MASK
    private static final long DEFAULT_FADE_DURATION_MS
com.facebook.jni.ThreadScopeSupport
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi23
androidx.drawerlayout.widget.DrawerLayout$ChildAccessibilityDelegate
androidx.constraintlayout.solver.SolverVariable$1
androidx.recyclerview.selection.GestureDetectorOnItemTouchListenerAdapter
androidx.drawerlayout.R$layout
androidx.appcompat.resources.R$styleable:
    private void <init>()
com.squareup.picasso.Request
androidx.core.provider.FontsContractCompat$Columns
androidx.loader.content.Loader:
    public void <init>(android.content.Context)
    public void deliverResult(java.lang.Object)
    public void deliverCancellation()
    public android.content.Context getContext()
    public int getId()
    public void registerListener(int,androidx.loader.content.Loader$OnLoadCompleteListener)
    public void registerOnLoadCanceledListener(androidx.loader.content.Loader$OnLoadCanceledListener)
    public void unregisterOnLoadCanceledListener(androidx.loader.content.Loader$OnLoadCanceledListener)
    public boolean isStarted()
    public boolean isAbandoned()
    public boolean isReset()
    protected void onStartLoading()
    protected boolean onCancelLoad()
    public void forceLoad()
    protected void onForceLoad()
    protected void onStopLoading()
    protected void onAbandon()
    protected void onReset()
    public boolean takeContentChanged()
    public void commitContentChanged()
    public void rollbackContentChanged()
    public void onContentChanged()
    public java.lang.String toString()
    int mId
    androidx.loader.content.Loader$OnLoadCompleteListener mListener
    androidx.loader.content.Loader$OnLoadCanceledListener mOnLoadCanceledListener
    android.content.Context mContext
    boolean mStarted
    boolean mAbandoned
    boolean mReset
    boolean mContentChanged
    boolean mProcessingChange
okhttp3.Interceptor$Chain
androidx.camera.camera2.impl.SupportedSurfaceCombination:
    java.lang.String getCameraId()
    boolean isRawSupported()
    boolean isBurstCaptureSupported()
    private static final int ALIGN16
androidx.lifecycle.ClassesInfoCache:
    private static final int CALL_TYPE_NO_ARG
    private static final int CALL_TYPE_PROVIDER
    private static final int CALL_TYPE_PROVIDER_WITH_EVENT
androidx.constraintlayout.widget.ConstraintLayout:
    public void fillMetrics(androidx.constraintlayout.solver.Metrics)
    static final boolean ALLOWS_EMBEDDED
    private static final boolean CACHE_MEASURED_DIMENSION
    public static final java.lang.String VERSION
    private static final java.lang.String TAG
    private static final boolean USE_CONSTRAINTS_HELPER
    private static final boolean DEBUG
    public static final int DESIGN_INFO_ID
androidx.camera.core.ImageProxy:
    public abstract android.graphics.Rect getCropRect()
    public abstract void setTimestamp(long)
androidx.recyclerview.selection.FocusDelegate
androidx.drawerlayout.widget.DrawerLayout$LayoutParams
okhttp3.internal.http.BridgeInterceptor
androidx.print.PrintHelper
androidx.activity.R$id
androidx.appcompat.widget.ActivityChooserView$Callbacks
androidx.documentfile.provider.TreeDocumentFile
androidx.core.view.MarginLayoutParamsCompat:
    public static void setMarginStart(android.view.ViewGroup$MarginLayoutParams,int)
    public static void setMarginEnd(android.view.ViewGroup$MarginLayoutParams,int)
    public static boolean isMarginRelative(android.view.ViewGroup$MarginLayoutParams)
    public static int getLayoutDirection(android.view.ViewGroup$MarginLayoutParams)
    public static void setLayoutDirection(android.view.ViewGroup$MarginLayoutParams,int)
    public static void resolveLayoutDirection(android.view.ViewGroup$MarginLayoutParams,int)
    private void <init>()
io.github.prabhuomkar.pytorchandroid.R$font
androidx.media.MediaSessionManagerImplApi28
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat:
    public static androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat create(android.content.Context,int)
    private static boolean unregisterPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback)
    private static void registerPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback)
    private void removeAnimatorSetListener()
    public static void registerAnimationCallback(android.graphics.drawable.Drawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback)
    public static boolean unregisterAnimationCallback(android.graphics.drawable.Drawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback)
    public static void clearAnimationCallbacks(android.graphics.drawable.Drawable)
    public void registerAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback)
    public boolean unregisterAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback)
    public void clearAnimationCallbacks()
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState mCachedConstantStateDelegate
    private static final java.lang.String LOGTAG
    private static final java.lang.String ANIMATED_VECTOR
    private static final java.lang.String TARGET
    private static final boolean DBG_ANIMATION_VECTOR_DRAWABLE
androidx.core.text.PrecomputedTextCompat$PrecomputedTextFutureTask
androidx.localbroadcastmanager.content.LocalBroadcastManager
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$3
okhttp3.RequestBody$3
androidx.annotation.IntRange
io.github.prabhuomkar.pytorchandroid.R$mipmap
androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation
androidx.concurrent.futures.CallbackToFutureAdapter$Completer:
    public boolean setCancelled()
androidx.camera.camera2.impl.Camera2LensFacingCameraIdFilter:
    public androidx.camera.core.CameraX$LensFacing getLensFacing()
    private static final java.lang.String TAG
androidx.camera.core.Exif$1
com.downloader.internal.DownloadTask:
    private static final int BUFFER_SIZE
    private static final long TIME_GAP_FOR_SYNC
    private static final long MIN_BYTES_FOR_SYNC
androidx.camera.camera2.impl.compat.params.InputConfigurationCompat$InputConfigurationCompatImpl:
    public abstract int getWidth()
    public abstract int getHeight()
    public abstract int getFormat()
androidx.core.text.BidiFormatter$DirectionalityEstimator
androidx.camera.camera2.impl.Camera2CameraControl$3
androidx.camera.core.ImageCapture$19
com.squareup.picasso.AssetRequestHandler
androidx.recyclerview.selection.ViewAutoScroller
com.downloader.PRDownloaderConfig$1
androidx.recyclerview.widget.MessageThreadUtil$2$1
okhttp3.OkHttpClient$1
androidx.appcompat.app.ToolbarActionBar$MenuBuilderCallback
androidx.camera.camera2.impl.VideoCaptureConfigProvider:
    private static final java.lang.String TAG
okhttp3.internal.connection.ConnectInterceptor
okio.Okio$2
androidx.core.widget.ListViewCompat:
    public static boolean canScrollList(android.widget.ListView,int)
    private void <init>()
okio.Segment
androidx.core.R$dimen
androidx.core.view.ViewCompat$FocusRealDirection
androidx.core.app.JobIntentService$GenericWorkItem
okio.Buffer$2
androidx.camera.camera2.impl.FocusMeteringControl:
    private android.graphics.PointF getFOVAdjustedPoint(androidx.camera.core.MeteringPoint,android.util.Rational,android.util.Rational)
    private android.hardware.camera2.params.MeteringRectangle getMeteringRect(androidx.camera.core.MeteringPoint,android.graphics.PointF,android.graphics.Rect)
    private int rangeLimit(int,int,int)
    private int getDefaultTemplate()
    private void disableAutoCancel()
    private boolean shouldTriggerAF()
    void startFocusAndMetering(androidx.camera.core.FocusMeteringAction,android.util.Rational)
    void triggerAf()
    void triggerAePrecapture()
    void cancelAfAeTrigger(boolean,boolean)
    void executeMeteringAction(android.hardware.camera2.params.MeteringRectangle[],android.hardware.camera2.params.MeteringRectangle[],android.hardware.camera2.params.MeteringRectangle[],androidx.camera.core.FocusMeteringAction)
    void cancelFocusAndMetering()
    private androidx.camera.core.FocusMeteringAction mCurrentFocusMeteringAction
    private java.util.concurrent.ScheduledFuture mAutoCancelHandle
    private static final java.lang.String TAG
org.pytorch.Tensor$Tensor_int8
com.facebook.fbjni.R
io.github.prabhuomkar.pytorchandroid.BuildConfig
androidx.customview.widget.FocusStrategy$CollectionAdapter
androidx.camera.core.TargetConfig:
    public abstract java.lang.Class getTargetClass(java.lang.Class)
    public abstract java.lang.Class getTargetClass()
com.squareup.picasso.BuildConfig
androidx.documentfile.R
androidx.coordinatorlayout.R$attr
okhttp3.Call
androidx.appcompat.R$layout:
    private void <init>()
androidx.recyclerview.selection.BandSelectionHelper
androidx.media.MediaBrowserServiceCompatApi23
androidx.swiperefreshlayout.widget.CircularProgressDrawable$Ring
com.google.auto.value.AutoValue$Builder
androidx.appcompat.widget.AppCompatSeekBarHelper:
    android.graphics.drawable.Drawable getTickMark()
    void setTickMarkTintList(android.content.res.ColorStateList)
    android.content.res.ColorStateList getTickMarkTintList()
    void setTickMarkTintMode(android.graphics.PorterDuff$Mode)
    android.graphics.PorterDuff$Mode getTickMarkTintMode()
android.support.v4.media.session.MediaSessionCompat$Callback$CallbackHandler
androidx.camera.camera2.impl.compat.CameraCaptureSessionCompatBaseImpl:
    public int captureSingleRequest(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)
    public int setRepeatingBurstRequests(android.hardware.camera2.CameraCaptureSession,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)
androidx.annotation.DrawableRes
com.squareup.picasso.BitmapHunter$1
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21$1
com.facebook.jni.HybridData$Destructor
okhttp3.CacheControl
com.squareup.picasso.FileRequestHandler
androidx.recyclerview.widget.ItemTouchHelper$ViewDropHandler
androidx.media.R$string
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatApi24Impl:
    public void enableSurfaceSharing()
    boolean isSurfaceSharingEnabled()
    public void setPhysicalCameraId(java.lang.String)
    public java.util.List getSurfaces()
    public int getSurfaceGroupId()
androidx.media.MediaBrowserCompatUtils
okhttp3.internal.http.UnrepeatableRequestBody
io.github.prabhuomkar.pytorchandroid.models.Model:
    public java.lang.String getImageLink()
okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider
androidx.recyclerview.widget.ItemTouchHelper$2
androidx.recyclerview.selection.EventRouter
androidx.appcompat.widget.PopupMenu$2
okhttp3.Response
io.github.prabhuomkar.pytorchandroid.helpers.PermissionsHelper:
    public void <init>()
    private static final int PERMISSION_REQUEST_CODE
androidx.camera.core.ImageUtil:
    private void <init>()
    public static byte[] imageToJpegByteArray(androidx.camera.core.ImageProxy)
    public static byte[] cropByteArray(byte[],android.graphics.Rect)
    public static android.util.Rational rotate(android.util.Rational,int)
    private static byte[] nv21ToJpeg(byte[],int,int,android.graphics.Rect)
    private static byte[] yuv_420_888toNv21(androidx.camera.core.ImageProxy)
    private static android.util.Rational inverseRational(android.util.Rational)
    private static boolean shouldCropImage(androidx.camera.core.ImageProxy)
    private static byte[] jpegImageToJpegByteArray(androidx.camera.core.ImageProxy)
    private static byte[] yuvImageToJpegByteArray(androidx.camera.core.ImageProxy)
    private static final java.lang.String TAG
androidx.exifinterface.media.ExifInterface$Rational
androidx.appcompat.widget.ScrollingTabContainerView$VisibilityAnimListener
androidx.core.content.res.FontResourcesParserCompat$FetchStrategy
okhttp3.ConnectionPool$1
androidx.recyclerview.selection.StorageStrategy$ParcelableStorageStrategy
androidx.camera.core.CameraDeviceConfig:
    public abstract androidx.camera.core.CameraX$LensFacing getLensFacing()
    public abstract androidx.camera.core.CameraIdFilter getCameraIdFilter()
androidx.camera.camera2.impl.Camera2CaptureRequestBuilder:
    public void <init>()
    private static final java.lang.String TAG
androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImpl
androidx.annotation.LongDef
okhttp3.Callback
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$1
androidx.camera.core.CameraCaptureMetaData
okhttp3.internal.http1.Http1Codec$FixedLengthSource
androidx.exifinterface.R
androidx.core.app.ServiceCompat
androidx.constraintlayout.solver.widgets.ConstraintAnchor:
    private boolean isConnectionToMe(androidx.constraintlayout.solver.widgets.ConstraintWidget,java.util.HashSet)
    public androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType getConnectionType()
    public void setConnectionType(androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType)
    public void setConnectionCreator(int)
    public boolean connect(androidx.constraintlayout.solver.widgets.ConstraintAnchor,int,int)
    public boolean connect(androidx.constraintlayout.solver.widgets.ConstraintAnchor,int)
    public boolean isSideAnchor()
    public boolean isSimilarDimensionConnection(androidx.constraintlayout.solver.widgets.ConstraintAnchor)
    public void setStrength(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength)
    public void setMargin(int)
    public void setGoneMargin(int)
    public boolean isVerticalAnchor()
    public int getSnapPriorityLevel()
    public int getPriorityLevel()
    public boolean isSnapCompatibleWith(androidx.constraintlayout.solver.widgets.ConstraintAnchor)
    public boolean isConnectionAllowed(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintAnchor)
    public boolean isConnectionAllowed(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public final androidx.constraintlayout.solver.widgets.ConstraintAnchor getOpposite()
    private static final boolean ALLOW_BINARY
    public static final int USER_CREATOR
    public static final int SCOUT_CREATOR
    public static final int AUTO_CONSTRAINT_CREATOR
    private static final int UNSET_GONE_MARGIN
androidx.loader.content.ModernAsyncTask$2
okhttp3.internal.http2.Http2Reader$ContinuationSource
androidx.loader.content.ModernAsyncTask$WorkerRunnable
okio.Utf8
androidx.core.content.FileProvider
okhttp3.internal.http2.PushObserver
androidx.appcompat.R$string:
    private void <init>()
androidx.camera.core.ImageAnalysis$Defaults:
    private static final int DEFAULT_IMAGE_QUEUE_DEPTH
    private static final int DEFAULT_SURFACE_OCCUPANCY_PRIORITY
okhttp3.internal.ws.RealWebSocket$CancelRunnable
androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl$1
okhttp3.internal.http2.Http2Connection$ReaderRunnable$1
androidx.appcompat.app.ToolbarActionBar$ToolbarCallbackWrapper
androidx.camera.core.CameraControlInternal$ControlUpdateListener:
    public abstract void onCameraControlCaptureRequests(java.util.List)
androidx.core.content.ContextCompat:
    protected void <init>()
    public static boolean startActivities(android.content.Context,android.content.Intent[])
    public static void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)
    public static java.io.File getDataDir(android.content.Context)
    public static java.io.File[] getObbDirs(android.content.Context)
    public static java.io.File[] getExternalFilesDirs(android.content.Context,java.lang.String)
    public static java.io.File[] getExternalCacheDirs(android.content.Context)
    public static int getColor(android.content.Context,int)
    public static java.io.File getNoBackupFilesDir(android.content.Context)
    public static java.io.File getCodeCacheDir(android.content.Context)
    private static synchronized java.io.File createFilesDir(java.io.File)
    public static android.content.Context createDeviceProtectedStorageContext(android.content.Context)
    public static boolean isDeviceProtectedStorage(android.content.Context)
    public static java.util.concurrent.Executor getMainExecutor(android.content.Context)
    public static void startForegroundService(android.content.Context,android.content.Intent)
    public static java.lang.Object getSystemService(android.content.Context,java.lang.Class)
    public static java.lang.String getSystemServiceName(android.content.Context,java.lang.Class)
    private static final java.lang.String TAG
androidx.annotation.Dimension
androidx.core.widget.EdgeEffectCompat:
    public void <init>(android.content.Context)
    public void setSize(int,int)
    public boolean isFinished()
    public void finish()
    public boolean onPull(float)
    public boolean onPull(float,float)
    public boolean onRelease()
    public boolean onAbsorb(int)
    public boolean draw(android.graphics.Canvas)
    private android.widget.EdgeEffect mEdgeEffect
androidx.core.view.accessibility.AccessibilityViewCommand$SetSelectionArguments:
    public int getStart()
    public int getEnd()
androidx.constraintlayout.widget.ConstraintLayout$LayoutParams$Table:
    private void <init>()
    public static final int UNUSED
    public static final int ANDROID_ORIENTATION
    public static final int LAYOUT_CONSTRAINT_CIRCLE
    public static final int LAYOUT_CONSTRAINT_CIRCLE_RADIUS
    public static final int LAYOUT_CONSTRAINT_CIRCLE_ANGLE
    public static final int LAYOUT_CONSTRAINT_GUIDE_BEGIN
    public static final int LAYOUT_CONSTRAINT_GUIDE_END
    public static final int LAYOUT_CONSTRAINT_GUIDE_PERCENT
    public static final int LAYOUT_CONSTRAINT_LEFT_TO_LEFT_OF
    public static final int LAYOUT_CONSTRAINT_LEFT_TO_RIGHT_OF
    public static final int LAYOUT_CONSTRAINT_RIGHT_TO_LEFT_OF
    public static final int LAYOUT_CONSTRAINT_RIGHT_TO_RIGHT_OF
    public static final int LAYOUT_CONSTRAINT_TOP_TO_TOP_OF
    public static final int LAYOUT_CONSTRAINT_TOP_TO_BOTTOM_OF
    public static final int LAYOUT_CONSTRAINT_BOTTOM_TO_TOP_OF
    public static final int LAYOUT_CONSTRAINT_BOTTOM_TO_BOTTOM_OF
    public static final int LAYOUT_CONSTRAINT_BASELINE_TO_BASELINE_OF
    public static final int LAYOUT_CONSTRAINT_START_TO_END_OF
    public static final int LAYOUT_CONSTRAINT_START_TO_START_OF
    public static final int LAYOUT_CONSTRAINT_END_TO_START_OF
    public static final int LAYOUT_CONSTRAINT_END_TO_END_OF
    public static final int LAYOUT_GONE_MARGIN_LEFT
    public static final int LAYOUT_GONE_MARGIN_TOP
    public static final int LAYOUT_GONE_MARGIN_RIGHT
    public static final int LAYOUT_GONE_MARGIN_BOTTOM
    public static final int LAYOUT_GONE_MARGIN_START
    public static final int LAYOUT_GONE_MARGIN_END
    public static final int LAYOUT_CONSTRAINED_WIDTH
    public static final int LAYOUT_CONSTRAINED_HEIGHT
    public static final int LAYOUT_CONSTRAINT_HORIZONTAL_BIAS
    public static final int LAYOUT_CONSTRAINT_VERTICAL_BIAS
    public static final int LAYOUT_CONSTRAINT_WIDTH_DEFAULT
    public static final int LAYOUT_CONSTRAINT_HEIGHT_DEFAULT
    public static final int LAYOUT_CONSTRAINT_WIDTH_MIN
    public static final int LAYOUT_CONSTRAINT_WIDTH_MAX
    public static final int LAYOUT_CONSTRAINT_WIDTH_PERCENT
    public static final int LAYOUT_CONSTRAINT_HEIGHT_MIN
    public static final int LAYOUT_CONSTRAINT_HEIGHT_MAX
    public static final int LAYOUT_CONSTRAINT_HEIGHT_PERCENT
    public static final int LAYOUT_CONSTRAINT_LEFT_CREATOR
    public static final int LAYOUT_CONSTRAINT_TOP_CREATOR
    public static final int LAYOUT_CONSTRAINT_RIGHT_CREATOR
    public static final int LAYOUT_CONSTRAINT_BOTTOM_CREATOR
    public static final int LAYOUT_CONSTRAINT_BASELINE_CREATOR
    public static final int LAYOUT_CONSTRAINT_DIMENSION_RATIO
    public static final int LAYOUT_CONSTRAINT_HORIZONTAL_WEIGHT
    public static final int LAYOUT_CONSTRAINT_VERTICAL_WEIGHT
    public static final int LAYOUT_CONSTRAINT_HORIZONTAL_CHAINSTYLE
    public static final int LAYOUT_CONSTRAINT_VERTICAL_CHAINSTYLE
    public static final int LAYOUT_EDITOR_ABSOLUTEX
    public static final int LAYOUT_EDITOR_ABSOLUTEY
okio.Util
androidx.swiperefreshlayout.R$styleable
com.facebook.jni.NativeRunnable
androidx.appcompat.widget.ShareActionProvider
androidx.camera.core.ImageSaver$OnImageSavedListener
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath:
    public void printVPath(int)
    public java.lang.String nodesToString(androidx.core.graphics.PathParser$PathDataNode[])
    public boolean canApplyTheme()
    public void applyTheme(android.content.res.Resources$Theme)
    protected static final int FILL_TYPE_WINDING
androidx.core.app.NotificationCompat$Action$Builder
androidx.media.R$layout
androidx.appcompat.R$bool:
    private void <init>()
com.squareup.picasso.LruCache$1
android.support.v4.media.session.MediaSessionCompat$SessionFlags
androidx.core.os.UserManagerCompat
androidx.appcompat.app.WindowDecorActionBar$TabImpl
androidx.core.util.AtomicFile
androidx.lifecycle.LiveData:
    public void removeObservers(androidx.lifecycle.LifecycleOwner)
    int getVersion()
    public boolean hasObservers()
    static final int START_VERSION
androidx.annotation.CallSuper
androidx.vectordrawable.R$integer
androidx.camera.camera2.impl.Camera2CameraInfo:
    public int getSensorRotationDegrees()
    public androidx.lifecycle.LiveData isFlashAvailable()
    private static final java.lang.String TAG
okhttp3.CertificatePinner$Pin
androidx.loader.R$layout
org.pytorch.torchvision.R$dimen
androidx.legacy.coreui.R$dimen
com.downloader.PRDownloaderConfig
androidx.camera.camera2.R$id
androidx.customview.widget.ExploreByTouchHelper$MyNodeProvider
androidx.core.app.ShareCompat$IntentBuilder
androidx.fragment.app.FragmentManagerNonConfig
androidx.media.VolumeProviderCompat$1
androidx.core.view.MenuItemCompat:
    public static void setShowAsAction(android.view.MenuItem,int)
    public static android.view.MenuItem setActionView(android.view.MenuItem,android.view.View)
    public static android.view.MenuItem setActionView(android.view.MenuItem,int)
    public static android.view.View getActionView(android.view.MenuItem)
    public static androidx.core.view.ActionProvider getActionProvider(android.view.MenuItem)
    public static boolean expandActionView(android.view.MenuItem)
    public static boolean collapseActionView(android.view.MenuItem)
    public static boolean isActionViewExpanded(android.view.MenuItem)
    public static android.view.MenuItem setOnActionExpandListener(android.view.MenuItem,androidx.core.view.MenuItemCompat$OnActionExpandListener)
    public static java.lang.CharSequence getContentDescription(android.view.MenuItem)
    public static java.lang.CharSequence getTooltipText(android.view.MenuItem)
    public static void setShortcut(android.view.MenuItem,char,char,int,int)
    public static int getNumericModifiers(android.view.MenuItem)
    public static int getAlphabeticModifiers(android.view.MenuItem)
    public static android.content.res.ColorStateList getIconTintList(android.view.MenuItem)
    public static android.graphics.PorterDuff$Mode getIconTintMode(android.view.MenuItem)
    private void <init>()
    private static final java.lang.String TAG
    public static final int SHOW_AS_ACTION_NEVER
    public static final int SHOW_AS_ACTION_IF_ROOM
    public static final int SHOW_AS_ACTION_ALWAYS
    public static final int SHOW_AS_ACTION_WITH_TEXT
    public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW
androidx.appcompat.app.ActionBar:
    public abstract void setCustomView(android.view.View)
    public abstract void setCustomView(android.view.View,androidx.appcompat.app.ActionBar$LayoutParams)
    public abstract void setIcon(int)
    public abstract void setIcon(android.graphics.drawable.Drawable)
    public abstract void setLogo(int)
    public abstract void setLogo(android.graphics.drawable.Drawable)
    public abstract void setListNavigationCallbacks(android.widget.SpinnerAdapter,androidx.appcompat.app.ActionBar$OnNavigationListener)
    public abstract void setSelectedNavigationItem(int)
    public abstract int getSelectedNavigationIndex()
    public abstract int getNavigationItemCount()
    public abstract void setTitle(java.lang.CharSequence)
    public abstract void setTitle(int)
    public abstract void setSubtitle(java.lang.CharSequence)
    public abstract void setSubtitle(int)
    public abstract void setDisplayOptions(int,int)
    public abstract void setDisplayUseLogoEnabled(boolean)
    public abstract void setDisplayShowHomeEnabled(boolean)
    public abstract void setDisplayHomeAsUpEnabled(boolean)
    public abstract void setDisplayShowTitleEnabled(boolean)
    public abstract void setDisplayShowCustomEnabled(boolean)
    public abstract void setBackgroundDrawable(android.graphics.drawable.Drawable)
    public void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)
    public void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)
    public abstract android.view.View getCustomView()
    public abstract java.lang.CharSequence getTitle()
    public abstract java.lang.CharSequence getSubtitle()
    public abstract int getNavigationMode()
    public abstract void setNavigationMode(int)
    public abstract androidx.appcompat.app.ActionBar$Tab newTab()
    public abstract void addTab(androidx.appcompat.app.ActionBar$Tab)
    public abstract void addTab(androidx.appcompat.app.ActionBar$Tab,boolean)
    public abstract void addTab(androidx.appcompat.app.ActionBar$Tab,int)
    public abstract void addTab(androidx.appcompat.app.ActionBar$Tab,int,boolean)
    public abstract void removeTab(androidx.appcompat.app.ActionBar$Tab)
    public abstract void removeTabAt(int)
    public abstract void removeAllTabs()
    public abstract void selectTab(androidx.appcompat.app.ActionBar$Tab)
    public abstract androidx.appcompat.app.ActionBar$Tab getSelectedTab()
    public abstract androidx.appcompat.app.ActionBar$Tab getTabAt(int)
    public abstract int getTabCount()
    public abstract int getHeight()
    public abstract void show()
    public abstract void hide()
    public abstract boolean isShowing()
    public abstract void addOnMenuVisibilityListener(androidx.appcompat.app.ActionBar$OnMenuVisibilityListener)
    public abstract void removeOnMenuVisibilityListener(androidx.appcompat.app.ActionBar$OnMenuVisibilityListener)
    public void setHomeButtonEnabled(boolean)
    public boolean isTitleTruncated()
    public void setHomeAsUpIndicator(android.graphics.drawable.Drawable)
    public void setHomeAsUpIndicator(int)
    public void setHomeActionContentDescription(java.lang.CharSequence)
    public void setHomeActionContentDescription(int)
    public void setHideOnContentScrollEnabled(boolean)
    public boolean isHideOnContentScrollEnabled()
    public int getHideOffset()
    public void setHideOffset(int)
    public void setElevation(float)
    public float getElevation()
    boolean requestFocus()
    public static final int NAVIGATION_MODE_STANDARD
    public static final int NAVIGATION_MODE_LIST
    public static final int NAVIGATION_MODE_TABS
    public static final int DISPLAY_USE_LOGO
    public static final int DISPLAY_SHOW_HOME
    public static final int DISPLAY_HOME_AS_UP
    public static final int DISPLAY_SHOW_TITLE
    public static final int DISPLAY_SHOW_CUSTOM
android.support.v4.media.session.MediaSessionCompat$2
androidx.concurrent.futures.AbstractResolvableFuture:
    protected final boolean wasInterrupted()
    protected boolean setFuture(com.google.common.util.concurrent.ListenableFuture)
    final void maybePropagateCancellationTo(java.util.concurrent.Future)
    private static final long SPIN_THRESHOLD_NANOS
androidx.loader.content.Loader$OnLoadCompleteListener:
    public abstract void onLoadComplete(androidx.loader.content.Loader,java.lang.Object)
androidx.asynclayoutinflater.view.AsyncLayoutInflater
androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplBase
okhttp3.internal.http.RetryAndFollowUpInterceptor
androidx.recyclerview.widget.RecyclerView:
    public boolean hasFixedSize()
    public void swapAdapter(androidx.recyclerview.widget.RecyclerView$Adapter,boolean)
    public void addOnChildAttachStateChangeListener(androidx.recyclerview.widget.RecyclerView$OnChildAttachStateChangeListener)
    public void removeOnChildAttachStateChangeListener(androidx.recyclerview.widget.RecyclerView$OnChildAttachStateChangeListener)
    public void clearOnChildAttachStateChangeListeners()
    public androidx.recyclerview.widget.RecyclerView$ItemDecoration getItemDecorationAt(int)
    public void removeItemDecorationAt(int)
    public void clearOnScrollListeners()
    public void scrollToPosition(int)
    void jumpToPositionForSmoothScroller(int)
    public void smoothScrollToPosition(int)
    public boolean isLayoutFrozen()
    void assertInLayoutOrScroll(java.lang.String)
    public boolean isAnimating()
    public void invalidateItemDecorations()
    public int getChildPosition(android.view.View)
    public int getChildAdapterPosition(android.view.View)
    public int getChildLayoutPosition(android.view.View)
    public long getChildItemId(android.view.View)
    public androidx.recyclerview.widget.RecyclerView$ViewHolder findViewHolderForPosition(int)
    public androidx.recyclerview.widget.RecyclerView$ViewHolder findViewHolderForLayoutPosition(int)
    public android.view.View findChildViewUnder(float,float)
    public boolean hasNestedScrollingParent(int)
    public boolean dispatchNestedScroll(int,int,int,int,int[],int)
    static final java.lang.String TAG
    static final boolean DEBUG
    static final boolean VERBOSE_TRACING
    static final boolean DISPATCH_TEMP_DETACH
    public static final int HORIZONTAL
    public static final int VERTICAL
    static final int DEFAULT_ORIENTATION
    public static final int NO_POSITION
    public static final long NO_ID
    public static final int INVALID_TYPE
    public static final int TOUCH_SLOP_DEFAULT
    public static final int TOUCH_SLOP_PAGING
    public static final int UNDEFINED_DURATION
    static final int MAX_SCROLL_DURATION
    static final java.lang.String TRACE_SCROLL_TAG
    private static final java.lang.String TRACE_ON_LAYOUT_TAG
    private static final java.lang.String TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG
    private static final java.lang.String TRACE_HANDLE_ADAPTER_UPDATES_TAG
    static final java.lang.String TRACE_BIND_VIEW_TAG
    static final java.lang.String TRACE_PREFETCH_TAG
    static final java.lang.String TRACE_NESTED_PREFETCH_TAG
    static final java.lang.String TRACE_CREATE_VIEW_TAG
    private static final int INVALID_POINTER
    public static final int SCROLL_STATE_IDLE
    public static final int SCROLL_STATE_DRAGGING
    public static final int SCROLL_STATE_SETTLING
    static final long FOREVER_NS
androidx.camera.core.Exif$Speed
androidx.core.widget.AutoSizeableTextView:
    public abstract void setAutoSizeTextTypeWithDefaults(int)
    public abstract void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)
    public abstract void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)
    public abstract int getAutoSizeTextType()
    public abstract int getAutoSizeStepGranularity()
    public abstract int getAutoSizeMinTextSize()
    public abstract int getAutoSizeMaxTextSize()
    public abstract int[] getAutoSizeTextAvailableSizes()
androidx.appcompat.widget.AppCompatCompoundButtonHelper$DirectSetButtonDrawableInterface
androidx.appcompat.widget.Toolbar$ExpandedActionViewMenuPresenter:
    public androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)
    public int getId()
    public android.os.Parcelable onSaveInstanceState()
    public void onRestoreInstanceState(android.os.Parcelable)
androidx.versionedparcelable.VersionedParcelStream
androidx.appcompat.app.AppCompatDelegate:
    public static androidx.appcompat.app.AppCompatDelegate create(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback)
    public static androidx.appcompat.app.AppCompatDelegate create(android.content.Context,android.app.Activity,androidx.appcompat.app.AppCompatCallback)
    public static void setDefaultNightMode(int)
    public static void setCompatVectorFromResourcesEnabled(boolean)
    public static boolean isCompatVectorFromResourcesEnabled()
    private static void applyDayNightToActiveDelegates()
    public abstract void setSupportActionBar(androidx.appcompat.widget.Toolbar)
    public abstract androidx.appcompat.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate()
    public abstract boolean hasWindowFeature(int)
    public abstract androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)
    public abstract android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)
    public abstract void setHandleNativeActionModesEnabled(boolean)
    public abstract boolean isHandleNativeActionModesEnabled()
    public abstract boolean applyDayNight()
    public abstract void setLocalNightMode(int)
    static final java.lang.String TAG
    public static final int MODE_NIGHT_FOLLOW_SYSTEM
    public static final int MODE_NIGHT_AUTO_TIME
    public static final int MODE_NIGHT_AUTO
    public static final int MODE_NIGHT_NO
    public static final int MODE_NIGHT_YES
    public static final int MODE_NIGHT_AUTO_BATTERY
    public static final int MODE_NIGHT_UNSPECIFIED
    public static final int FEATURE_SUPPORT_ACTION_BAR
    public static final int FEATURE_SUPPORT_ACTION_BAR_OVERLAY
    public static final int FEATURE_ACTION_MODE_OVERLAY
androidx.recyclerview.widget.DiffUtil$Callback
androidx.core.view.inputmethod.EditorInfoCompat
androidx.appcompat.view.menu.MenuHelper
androidx.camera.core.CameraDeviceStateCallbacks:
    private void <init>()
    public static varargs android.hardware.camera2.CameraDevice$StateCallback createComboCallback(android.hardware.camera2.CameraDevice$StateCallback[])
androidx.appcompat.widget.ListPopupWindow$1
androidx.asynclayoutinflater.view.AsyncLayoutInflater$OnInflateFinishedListener
androidx.camera.camera2.impl.Camera2CameraCaptureResultConverter
androidx.viewpager.widget.ViewPager$4
androidx.camera.core.ImageCapture$11
io.github.prabhuomkar.pytorchandroid.datasets.imagenet.Runner:
    public void <init>()
androidx.recyclerview.selection.OperationMonitor
android.support.v4.media.MediaDescriptionCompatApi21:
    private void <init>()
okhttp3.Dns
androidx.appcompat.widget.ActionMenuPresenter$SavedState$1
androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo
android.support.v4.media.session.MediaSessionCompat$Token:
    void <init>(java.lang.Object,android.support.v4.media.session.IMediaSession)
    public static android.support.v4.media.session.MediaSessionCompat$Token fromToken(java.lang.Object)
    public static android.support.v4.media.session.MediaSessionCompat$Token fromToken(java.lang.Object,android.support.v4.media.session.IMediaSession)
    public static android.support.v4.media.session.MediaSessionCompat$Token fromBundle(android.os.Bundle)
    public java.lang.Object getToken()
    public android.os.Bundle getSessionToken2Bundle()
    public android.os.Bundle toBundle()
androidx.media.MediaBrowserProtocol
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$OnRefreshListener
androidx.constraintlayout.solver.ArrayRow:
    public androidx.constraintlayout.solver.ArrayRow createRowGreaterThan(androidx.constraintlayout.solver.SolverVariable,int,androidx.constraintlayout.solver.SolverVariable)
    public androidx.constraintlayout.solver.ArrayRow createRowEqualDimension(float,float,float,androidx.constraintlayout.solver.SolverVariable,int,androidx.constraintlayout.solver.SolverVariable,int,androidx.constraintlayout.solver.SolverVariable,int,androidx.constraintlayout.solver.SolverVariable,int)
    int sizeInBytes()
    private static final boolean DEBUG
    private static final float epsilon
androidx.camera.core.ImageCapture$5
okhttp3.internal.cache.DiskLruCache$Snapshot
androidx.swiperefreshlayout.R$integer
androidx.recyclerview.selection.SelectionTracker$Builder$2
androidx.annotation.Px
androidx.legacy.app.ActionBarDrawerToggle$SlideDrawable
androidx.media.MediaBrowserServiceCompat$ServiceBinderImpl$8
androidx.camera.core.CameraCaptureMetaData$AeState
androidx.vectordrawable.R$color
androidx.appcompat.text.AllCapsTransformationMethod
androidx.core.provider.FontsContractCompat$4$8
androidx.camera.core.ImageUtil$CodecFailedException
android.support.v4.media.MediaBrowserCompat$Subscription
androidx.core.app.ActivityCompat$SharedElementCallback21Impl$1
androidx.core.app.NotificationManagerCompat$Task
androidx.core.os.ConfigurationCompat
androidx.cardview.widget.CardView$1
androidx.legacy.app.ActionBarDrawerToggle
androidx.recyclerview.R$styleable:
    private void <init>()
androidx.media.AudioAttributesImplApi21:
    void <init>(android.media.AudioAttributes)
    void <init>(android.media.AudioAttributes,int)
    static java.lang.reflect.Method getAudioAttributesToLegacyStreamTypeMethod()
    public static androidx.media.AudioAttributesImpl fromBundle(android.os.Bundle)
    public java.lang.Object getAudioAttributes()
    public int getVolumeControlStream()
    public int getLegacyStreamType()
    public int getRawLegacyStreamType()
    public int getContentType()
    public int getUsage()
    public int getFlags()
    public android.os.Bundle toBundle()
    private static final java.lang.String TAG
    static java.lang.reflect.Method sAudioAttributesToLegacyStreamType
okhttp3.HttpUrl$Builder$ParseResult
androidx.annotation.StringRes
androidx.asynclayoutinflater.R
io.github.prabhuomkar.pytorchandroid.helpers.UIHelper:
    public void <init>()
org.pytorch.torchvision.R$bool
androidx.core.app.NotificationManagerCompat$ServiceConnectedEvent
androidx.core.view.inputmethod.InputConnectionCompat$2
org.pytorch.R$bool
androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerWrapper
androidx.core.app.JobIntentService$WorkEnqueuer
androidx.appcompat.app.ToolbarActionBar:
    void <init>(androidx.appcompat.widget.Toolbar,java.lang.CharSequence,android.view.Window$Callback)
    private android.view.Menu getMenu()
    public android.view.Window$Callback getWrappedWindowCallback()
    public void setCustomView(android.view.View)
    public void setCustomView(android.view.View,androidx.appcompat.app.ActionBar$LayoutParams)
    public void setCustomView(int)
    public void setIcon(int)
    public void setIcon(android.graphics.drawable.Drawable)
    public void setLogo(int)
    public void setLogo(android.graphics.drawable.Drawable)
    public void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)
    public void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)
    public void setHomeButtonEnabled(boolean)
    public void setElevation(float)
    public float getElevation()
    public android.content.Context getThemedContext()
    public boolean isTitleTruncated()
    public void setHomeAsUpIndicator(android.graphics.drawable.Drawable)
    public void setHomeAsUpIndicator(int)
    public void setHomeActionContentDescription(java.lang.CharSequence)
    public void setDefaultDisplayHomeAsUpEnabled(boolean)
    public void setHomeActionContentDescription(int)
    public void setShowHideAnimationEnabled(boolean)
    public void onConfigurationChanged(android.content.res.Configuration)
    public void setListNavigationCallbacks(android.widget.SpinnerAdapter,androidx.appcompat.app.ActionBar$OnNavigationListener)
    public void setSelectedNavigationItem(int)
    public int getSelectedNavigationIndex()
    public int getNavigationItemCount()
    public void setTitle(java.lang.CharSequence)
    public void setTitle(int)
    public void setWindowTitle(java.lang.CharSequence)
    public boolean requestFocus()
    public void setSubtitle(java.lang.CharSequence)
    public void setSubtitle(int)
    public void setDisplayOptions(int)
    public void setDisplayOptions(int,int)
    public void setDisplayUseLogoEnabled(boolean)
    public void setDisplayShowHomeEnabled(boolean)
    public void setDisplayHomeAsUpEnabled(boolean)
    public void setDisplayShowTitleEnabled(boolean)
    public void setDisplayShowCustomEnabled(boolean)
    public void setBackgroundDrawable(android.graphics.drawable.Drawable)
    public android.view.View getCustomView()
    public java.lang.CharSequence getTitle()
    public java.lang.CharSequence getSubtitle()
    public int getNavigationMode()
    public void setNavigationMode(int)
    public int getDisplayOptions()
    public androidx.appcompat.app.ActionBar$Tab newTab()
    public void addTab(androidx.appcompat.app.ActionBar$Tab)
    public void addTab(androidx.appcompat.app.ActionBar$Tab,boolean)
    public void addTab(androidx.appcompat.app.ActionBar$Tab,int)
    public void addTab(androidx.appcompat.app.ActionBar$Tab,int,boolean)
    public void removeTab(androidx.appcompat.app.ActionBar$Tab)
    public void removeTabAt(int)
    public void removeAllTabs()
    public void selectTab(androidx.appcompat.app.ActionBar$Tab)
    public androidx.appcompat.app.ActionBar$Tab getSelectedTab()
    public androidx.appcompat.app.ActionBar$Tab getTabAt(int)
    public int getTabCount()
    public int getHeight()
    public void show()
    public void hide()
    public boolean isShowing()
    public boolean openOptionsMenu()
    public boolean closeOptionsMenu()
    public boolean invalidateOptionsMenu()
    public boolean collapseActionView()
    void populateOptionsMenu()
    public boolean onMenuKeyEvent(android.view.KeyEvent)
    public boolean onKeyShortcut(int,android.view.KeyEvent)
    void onDestroy()
    public void addOnMenuVisibilityListener(androidx.appcompat.app.ActionBar$OnMenuVisibilityListener)
    public void removeOnMenuVisibilityListener(androidx.appcompat.app.ActionBar$OnMenuVisibilityListener)
    public void dispatchMenuVisibilityChanged(boolean)
    androidx.appcompat.widget.DecorToolbar mDecorToolbar
    boolean mToolbarMenuPrepared
    android.view.Window$Callback mWindowCallback
    private boolean mMenuCallbackSet
    private boolean mLastMenuVisibility
    private java.util.ArrayList mMenuVisibilityListeners
    private final java.lang.Runnable mMenuInvalidator
    private final androidx.appcompat.widget.Toolbar$OnMenuItemClickListener mMenuClicker
org.pytorch.torchvision.TensorImageUtils:
    public void <init>()
    public static org.pytorch.Tensor bitmapToFloat32Tensor(android.graphics.Bitmap,float[],float[])
    public static void bitmapToFloatBuffer(android.graphics.Bitmap,int,int,int,int,float[],float[],java.nio.FloatBuffer,int)
    public static org.pytorch.Tensor bitmapToFloat32Tensor(android.graphics.Bitmap,int,int,int,int,float[],float[])
org.pytorch.R$id
okhttp3.Cache$2
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi23$1
okhttp3.internal.ws.RealWebSocket$Close
androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult
androidx.camera.core.Exif$Speed$Converter
androidx.fragment.app.Fragment$SavedState
androidx.appcompat.app.ToolbarActionBar$ActionMenuPresenterCallback
androidx.camera.core.FocusMeteringAction
androidx.camera.core.DisplayOrientedMeteringPointFactory
androidx.recyclerview.selection.ItemKeyProvider
androidx.camera.core.ImageReaderFormatRecommender:
    private void <init>()
okhttp3.internal.http2.Header
androidx.core.app.NotificationCompat$InboxStyle
okhttp3.internal.http2.Huffman$Node
androidx.recyclerview.widget.DiffUtil$DiffResult
androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl
androidx.core.util.Preconditions:
    public static void checkArgument(boolean,java.lang.Object)
    public static int checkArgumentNonnegative(int,java.lang.String)
    public static int checkArgumentInRange(int,int,int,java.lang.String)
    private void <init>()
android.support.v4.media.RatingCompat:
    public static android.support.v4.media.RatingCompat newUnratedRating(int)
    public static android.support.v4.media.RatingCompat newHeartRating(boolean)
    public static android.support.v4.media.RatingCompat newThumbRating(boolean)
    public static android.support.v4.media.RatingCompat newStarRating(int,float)
    public static android.support.v4.media.RatingCompat newPercentageRating(float)
    public static android.support.v4.media.RatingCompat fromRating(java.lang.Object)
    public boolean isRated()
    public int getRatingStyle()
    public boolean hasHeart()
    public boolean isThumbUp()
    public float getStarRating()
    public float getPercentRating()
    public java.lang.Object getRating()
    private java.lang.Object mRatingObj
    private static final java.lang.String TAG
    public static final int RATING_NONE
    public static final int RATING_HEART
    public static final int RATING_THUMB_UP_DOWN
    public static final int RATING_3_STARS
    public static final int RATING_4_STARS
    public static final int RATING_5_STARS
    public static final int RATING_PERCENTAGE
    private static final float RATING_NOT_RATED
androidx.slidingpanelayout.R$color
androidx.core.widget.CompoundButtonCompat:
    private void <init>()
    public static android.content.res.ColorStateList getButtonTintList(android.widget.CompoundButton)
    public static android.graphics.PorterDuff$Mode getButtonTintMode(android.widget.CompoundButton)
    private static final java.lang.String TAG
okio.Base64
androidx.core.text.TextUtilsCompat
androidx.appcompat.resources.R$style
androidx.core.app.NotificationCompat$Action$WearableExtender
androidx.camera.camera2.impl.compat.params.InputConfigurationCompat$InputConfigurationCompatApi23Impl:
    void <init>(int,int,int)
    public int getWidth()
    public int getHeight()
    public int getFormat()
androidx.camera.core.SensorOrientedMeteringPointFactory
io.github.prabhuomkar.pytorchandroid.helpers.DataHelper:
    public void <init>()
com.google.auto.value.AutoOneOf
androidx.recyclerview.selection.R$drawable
androidx.coordinatorlayout.widget.CoordinatorLayout$OnPreDrawListener
androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal
com.squareup.picasso.FetchAction
okio.Sink
androidx.versionedparcelable.ParcelImpl:
    public void <init>(androidx.versionedparcelable.VersionedParcelable)
    public androidx.versionedparcelable.VersionedParcelable getVersionedParcel()
androidx.recyclerview.R$id
androidx.camera.core.VideoCapture$2
okhttp3.internal.connection.StreamAllocation$StreamAllocationReference
okhttp3.RequestBody
androidx.camera.core.ImageCapture$ImageCaptureRequest:
    void <init>(androidx.camera.core.ImageCapture,int,android.util.Rational,java.util.concurrent.Executor,androidx.camera.core.ImageCapture$OnImageCapturedListener)
    void callbackError(androidx.camera.core.ImageCapture$ImageCaptureError,java.lang.String,java.lang.Throwable)
    final synthetic androidx.camera.core.ImageCapture this$0
androidx.appcompat.app.AppCompatDialog:
    public void <init>(android.content.Context)
    protected void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)
    public androidx.appcompat.app.ActionBar getSupportActionBar()
com.squareup.picasso.Picasso$1
androidx.constraintlayout.solver.LinearSystem:
    private void addSingleError(androidx.constraintlayout.solver.ArrayRow,int)
    private androidx.constraintlayout.solver.SolverVariable createVariable(java.lang.String,androidx.constraintlayout.solver.SolverVariable$Type)
    private void displayRows()
    private void displaySolverVariables()
    private java.lang.String getDisplaySize(int)
    private java.lang.String getDisplayStrength(int)
    public static androidx.constraintlayout.solver.ArrayRow createRowEquals(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,boolean)
    public static androidx.constraintlayout.solver.ArrayRow createRowGreaterThan(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,boolean)
    public static androidx.constraintlayout.solver.ArrayRow createRowLowerThan(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,boolean)
    public static androidx.constraintlayout.solver.ArrayRow createRowCentering(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,float,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,boolean)
    public void fillMetrics(androidx.constraintlayout.solver.Metrics)
    androidx.constraintlayout.solver.LinearSystem$Row getGoal()
    androidx.constraintlayout.solver.ArrayRow getRow(int)
    float getValueFor(java.lang.String)
    androidx.constraintlayout.solver.SolverVariable getVariable(java.lang.String,androidx.constraintlayout.solver.SolverVariable$Type)
    void displayReadableRows()
    public void displayVariablesReadableRows()
    public int getMemoryUsed()
    public int getNumEquations()
    public int getNumVariables()
    void displaySystemInformations()
    public void addGreaterThan(androidx.constraintlayout.solver.SolverVariable,int)
    public void addEquality(androidx.constraintlayout.solver.SolverVariable,int,int)
    public static final boolean FULL_DEBUG
    private static final boolean DEBUG
androidx.camera.core.LensFacingCameraIdFilter:
    public abstract androidx.camera.core.CameraX$LensFacing getLensFacing()
androidx.camera.camera2.impl.Camera2CameraControl$CameraControlSessionCallback:
    void addListener(androidx.camera.camera2.impl.Camera2CameraControl$CaptureResultListener)
    void removeListener(androidx.camera.camera2.impl.Camera2CameraControl$CaptureResultListener)
androidx.core.view.animation.PathInterpolatorApi14
androidx.exifinterface.media.ExifInterface$ExifAttribute
androidx.fragment.app.FragmentActivity:
    public void <init>(int)
    private int allocateRequestIndex(androidx.fragment.app.Fragment)
    public void supportFinishAfterTransition()
    public void setEnterSharedElementCallback(androidx.core.app.SharedElementCallback)
    public void setExitSharedElementCallback(androidx.core.app.SharedElementCallback)
    public void supportPostponeEnterTransition()
    public void supportStartPostponedEnterTransition()
    public androidx.loader.app.LoaderManager getSupportLoaderManager()
    public void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int)
    public void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle)
    public void startIntentSenderFromFragment(androidx.fragment.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
    void requestPermissionsFromFragment(androidx.fragment.app.Fragment,java.lang.String[],int)
    private static final java.lang.String TAG
    static final java.lang.String FRAGMENTS_TAG
    static final java.lang.String NEXT_CANDIDATE_REQUEST_INDEX_TAG
    static final java.lang.String ALLOCATED_REQUEST_INDICIES_TAG
    static final java.lang.String REQUEST_FRAGMENT_WHO_TAG
    static final int MAX_NUM_PENDING_FRAGMENT_ACTIVITY_RESULTS
androidx.annotation.FractionRes
androidx.appcompat.widget.LinearLayoutCompat$DividerMode
com.downloader.database.DbHelper:
    public abstract void update(com.downloader.database.DownloadModel)
    public abstract void clear()
androidx.localbroadcastmanager.content.LocalBroadcastManager$1
androidx.fragment.app.ListFragment$1
okhttp3.HttpUrl$Builder
androidx.core.app.NotificationManagerCompat$SideChannelManager
androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture:
    boolean cancelWithoutNotifyingCompleter(boolean)
androidx.recyclerview.widget.SnapHelper$2
androidx.media.VolumeProviderCompatApi21$Delegate
androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState:
    public void clearMenuPresenters()
    android.os.Parcelable onSaveInstanceState()
    void onRestoreInstanceState(android.os.Parcelable)
    void applyFrozenState()
    boolean wasLastOpen
    android.os.Bundle frozenMenuState
androidx.core.app.DialogCompat
androidx.core.view.MenuItemCompat$1
androidx.media.R$color
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$4
androidx.media.R$id
com.squareup.picasso.NetworkRequestHandler
androidx.core.view.ViewCompat$4:
    void frameworkSet(android.view.View,java.lang.CharSequence)
    boolean shouldUpdate(java.lang.CharSequence,java.lang.CharSequence)
    synthetic bridge void frameworkSet(android.view.View,java.lang.Object)
    synthetic bridge boolean shouldUpdate(java.lang.Object,java.lang.Object)
androidx.appcompat.widget.Toolbar:
    private static boolean isCustomView(android.view.View)
    public void setTitleMargin(int,int,int,int)
    public boolean isTitleTruncated()
    public void setContentInsetsAbsolute(int,int)
    public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter$Callback,androidx.appcompat.view.menu.MenuBuilder$Callback)
    private static final java.lang.String TAG
com.squareup.picasso.RemoteViewsAction$RemoteViewsTarget
androidx.asynclayoutinflater.view.AsyncLayoutInflater$InflateThread
androidx.legacy.content.WakefulBroadcastReceiver
androidx.exifinterface.media.ExifInterface$ByteOrderedDataInputStream
androidx.core.content.pm.PackageInfoCompat
okhttp3.RequestBody$2
androidx.fragment.app.FragmentManagerViewModel:
    void restoreFromSnapshot(androidx.fragment.app.FragmentManagerNonConfig)
    androidx.fragment.app.FragmentManagerNonConfig getSnapshot()
okhttp3.Cache$CacheResponseBody$1
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$2
androidx.core.app.ActivityManagerCompat
androidx.swiperefreshlayout.widget.CircularProgressDrawable$ProgressDrawableSize
androidx.appcompat.app.ActionBarDrawerToggle$DelegateProvider
androidx.camera.core.Exif$2
androidx.camera.core.CameraCaptureCallbacks$ComboCameraCaptureCallback:
    void <init>(java.util.List)
androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale
androidx.camera.camera2.impl.Camera2CameraControl:
    public void startFocusAndMetering(androidx.camera.core.FocusMeteringAction)
    public void cancelFocusAndMetering()
    public void setCropRegion(android.graphics.Rect)
    public androidx.camera.core.FlashMode getFlashMode()
    public void enableTorch(boolean)
    public boolean isTorchOn()
    public void triggerAf()
    public void triggerAePrecapture()
    public void cancelAfAeTrigger(boolean,boolean)
    public void submitCaptureRequests(java.util.List)
    void setCropRegionInternal(android.graphics.Rect)
    android.graphics.Rect getCropSensorRegion()
    android.graphics.Rect getSensorRect()
    void removeCaptureResultListener(androidx.camera.camera2.impl.Camera2CameraControl$CaptureResultListener)
    void addCaptureResultListener(androidx.camera.camera2.impl.Camera2CameraControl$CaptureResultListener)
    void enableTorchInternal(boolean)
    void submitCaptureRequestsInternal(java.util.List)
    private static final java.lang.String TAG
androidx.appcompat.widget.AppCompatHintHelper:
    private void <init>()
okhttp3.MediaType
androidx.constraintlayout.widget.R$styleable:
    private void <init>()
androidx.camera.camera2.R$color
androidx.recyclerview.widget.RecyclerView$LayoutManager:
    public static int getChildMeasureSpec(int,int,int,boolean)
    public void assertInLayoutOrScroll(java.lang.String)
    public void setAutoMeasureEnabled(boolean)
    public final void setItemPrefetchEnabled(boolean)
    public void postOnAnimation(java.lang.Runnable)
    public void scrollToPosition(int)
    public void smoothScrollToPosition(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$State,int)
    public void startSmoothScroll(androidx.recyclerview.widget.RecyclerView$SmoothScroller)
    public void endAnimation(android.view.View)
    public void removeAllViews()
    public int getItemViewType(android.view.View)
    public void detachView(android.view.View)
    public void attachView(android.view.View)
    public void removeDetachedView(android.view.View)
    public void detachAndScrapView(android.view.View,androidx.recyclerview.widget.RecyclerView$Recycler)
    public void detachAndScrapViewAt(int,androidx.recyclerview.widget.RecyclerView$Recycler)
    public int getPaddingStart()
    public int getPaddingEnd()
    public boolean isFocused()
    public boolean hasFocus()
    public int getItemCount()
    public void ignoreView(android.view.View)
    public void stopIgnoringView(android.view.View)
    public void measureChild(android.view.View,int,int)
    public boolean isMeasurementCacheEnabled()
    public void setMeasurementCacheEnabled(boolean)
    public void layoutDecorated(android.view.View,int,int,int,int)
    void onSmoothScrollerStopped(androidx.recyclerview.widget.RecyclerView$SmoothScroller)
androidx.recyclerview.R
androidx.coordinatorlayout.widget.CoordinatorLayout$1
androidx.core.app.NotificationCompat$CarExtender$UnreadConversation
androidx.customview.R$id
androidx.appcompat.widget.SwitchCompat$1
androidx.core.view.ViewCompat$FocusRelativeDirection
com.facebook.jni.HybridClassBase
androidx.media.R
okhttp3.internal.http2.Http2Connection$ReaderRunnable$2
io.github.prabhuomkar.pytorchandroid.R$color
okio.Buffer$1
com.squareup.picasso.Request$1
com.squareup.picasso.Action
androidx.appcompat.widget.PopupMenu$3
androidx.versionedparcelable.VersionedParcel$1
org.pytorch.torchvision.BuildConfig
org.pytorch.Module:
    public varargs org.pytorch.IValue runMethod(java.lang.String,org.pytorch.IValue[])
    public void destroy()
okhttp3.CertificatePinner$Builder
androidx.core.app.ActivityOptionsCompat$ActivityOptionsCompatImpl
androidx.camera.core.VideoCapture:
    public void <init>(androidx.camera.core.VideoCaptureConfig)
    private boolean writeVideoEncodedBuffer(int)
    private boolean writeAudioEncodedBuffer(int)
    private java.nio.ByteBuffer getInputBuffer(android.media.MediaCodec,int)
    private java.nio.ByteBuffer getOutputBuffer(android.media.MediaCodec,int)
    public void startRecording(java.io.File,java.util.concurrent.Executor,androidx.camera.core.VideoCapture$OnVideoSavedListener)
    public void startRecording(java.io.File,androidx.camera.core.VideoCapture$Metadata,java.util.concurrent.Executor,androidx.camera.core.VideoCapture$OnVideoSavedListener)
    public void stopRecording()
    public void setTargetRotation(int)
    boolean videoEncode(androidx.camera.core.VideoCapture$OnVideoSavedListener)
    boolean audioEncode(androidx.camera.core.VideoCapture$OnVideoSavedListener)
    private final android.media.MediaCodec$BufferInfo mVideoBufferInfo
    private final java.lang.Object mMuxerLock
    private final android.os.Handler mVideoHandler
    private final android.os.Handler mAudioHandler
    private final java.util.concurrent.atomic.AtomicBoolean mEndOfVideoStreamSignal
    private final java.util.concurrent.atomic.AtomicBoolean mEndOfAudioStreamSignal
    private final java.util.concurrent.atomic.AtomicBoolean mEndOfAudioVideoSignal
    private final android.media.MediaCodec$BufferInfo mAudioBufferInfo
    private final java.util.concurrent.atomic.AtomicBoolean mIsFirstVideoSampleWrite
    private final java.util.concurrent.atomic.AtomicBoolean mIsFirstAudioSampleWrite
    private final androidx.camera.core.VideoCaptureConfig$Builder mUseCaseConfigBuilder
    private android.media.MediaMuxer mMuxer
    private boolean mMuxerStarted
    private static final java.lang.String TAG
    private static final int DEQUE_TIMEOUT_USEC
    private static final java.lang.String VIDEO_MIME_TYPE
    private static final java.lang.String AUDIO_MIME_TYPE
androidx.camera.core.ImageCapture$Defaults:
    private static final int DEFAULT_SURFACE_OCCUPANCY_PRIORITY
androidx.versionedparcelable.NonParcelField
okhttp3.internal.connection.RealConnection
androidx.core.view.GravityCompat:
    public static void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)
    public static void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int)
    public static void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int)
    private void <init>()
    public static final int RELATIVE_LAYOUT_DIRECTION
    public static final int START
    public static final int END
    public static final int RELATIVE_HORIZONTAL_GRAVITY_MASK
androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState:
    final void clearMutated()
    public final int getEnterFadeDuration()
    public final int getExitFadeDuration()
    public final boolean isStateful()
androidx.recyclerview.widget.ScrollbarHelper:
    private void <init>()
androidx.legacy.coreutils.R$style
com.downloader.internal.stream.FileDownloadRandomAccessFile:
    public void setLength(long)
androidx.camera.camera2.impl.Camera2CameraControl$2
androidx.annotation.InspectableProperty$ValueType
androidx.camera.core.ImageProxyBundle:
    public abstract com.google.common.util.concurrent.ListenableFuture getImageProxy(int)
    public abstract java.util.List getCaptureIds()
android.support.v4.media.MediaMetadataCompat$RatingKey
androidx.swiperefreshlayout.R$dimen
androidx.camera.core.SessionConfig$ValidatingBuilder:
    private static final java.lang.String TAG
androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat$SessionMode
androidx.recyclerview.selection.GridModel$RelativeCoordinate
okio.Okio$1
android.support.v4.media.MediaBrowserCompat$ConnectionCallback
androidx.recyclerview.widget.ItemTouchHelper$ItemTouchHelperGestureListener
okhttp3.EventListener$1
androidx.core.app.NotificationManagerCompat$NotifyTask
androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi26
androidx.constraintlayout.widget.Guideline:
    public void <init>(android.content.Context,android.util.AttributeSet)
    public void <init>(android.content.Context,android.util.AttributeSet,int)
    public void <init>(android.content.Context,android.util.AttributeSet,int,int)
androidx.core.view.NestedScrollingParent:
    public abstract int getNestedScrollAxes()
androidx.recyclerview.selection.SelectionTracker
androidx.fragment.app.ListFragment
androidx.coordinatorlayout.R$style
androidx.media.MediaBrowserServiceCompat$ServiceBinderImpl$1
org.pytorch.R$layout
okio.RealBufferedSink$1
com.downloader.request.RequestBuilder
androidx.core.provider.FontsContractCompat$4$1
androidx.viewpager.R$dimen
androidx.coordinatorlayout.widget.CoordinatorLayout$AttachedBehavior
okhttp3.internal.http.HttpDate
androidx.appcompat.widget.MenuPopupWindow:
    private static final java.lang.String TAG
androidx.loader.content.ModernAsyncTask
androidx.camera.core.impl.LiveDataObservable:
    public void postError(java.lang.Throwable)
    public androidx.lifecycle.LiveData getLiveData()
    public com.google.common.util.concurrent.ListenableFuture fetchData()
androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener
androidx.swiperefreshlayout.widget.CircleImageView
androidx.camera.core.R$color
androidx.swiperefreshlayout.R$attr
android.support.v4.media.session.MediaControllerCompat$MediaControllerImpl
androidx.camera.core.UseCaseConfig$Builder:
    public abstract java.lang.Object setDefaultSessionConfig(androidx.camera.core.SessionConfig)
    public abstract java.lang.Object setDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public abstract java.lang.Object setSessionOptionUnpacker(androidx.camera.core.SessionConfig$OptionUnpacker)
    public abstract java.lang.Object setCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public abstract java.lang.Object setSurfaceOccupancyPriority(int)
androidx.recyclerview.selection.OnContextClickListener
androidx.fragment.R$integer
androidx.appcompat.view.menu.MenuPopup:
    public androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)
    public int getId()
androidx.legacy.coreui.R$style
com.squareup.picasso.BitmapHunter$2
androidx.core.graphics.drawable.DrawableCompat:
    public static void clearColorFilter(android.graphics.drawable.Drawable)
    public static android.graphics.drawable.Drawable unwrap(android.graphics.drawable.Drawable)
    private void <init>()
    private static final java.lang.String TAG
androidx.legacy.coreutils.R$styleable
androidx.viewpager.R$id
io.github.prabhuomkar.pytorchandroid.R$drawable
okhttp3.Request$Builder
androidx.recyclerview.selection.ResetManager$2
androidx.constraintlayout.solver.widgets.Guideline:
    public int getRelativeBehaviour()
    public androidx.constraintlayout.solver.widgets.Rectangle getHead()
    public androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor()
    public java.lang.String getType()
    public void setMinimumPosition(int)
    public void setPositionRelaxed(boolean)
    public void setGuidePercent(int)
    public float getRelativePercent()
    public int getRelativeBegin()
    public int getRelativeEnd()
    public void setDrawOrigin(int,int)
    void inferRelativePercentPosition()
    void inferRelativeBeginPosition()
    void inferRelativeEndPosition()
    public void cyclePosition()
    public static final int HORIZONTAL
    public static final int VERTICAL
    public static final int RELATIVE_PERCENT
    public static final int RELATIVE_BEGIN
    public static final int RELATIVE_END
    public static final int RELATIVE_UNKNWON
androidx.media.AudioAttributesCompat$AttributeUsage
okhttp3.internal.tls.DistinguishedNameParser
androidx.recyclerview.widget.ItemTouchHelper$1
androidx.viewpager.widget.ViewPager$MyAccessibilityDelegate
androidx.viewpager.R$attr
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$Command
androidx.legacy.coreutils.R$layout
com.downloader.internal.SynchronousCall
okhttp3.internal.cache.InternalCache
org.pytorch.Tensor$Tensor_uint8
androidx.lifecycle.Transformations$1
androidx.concurrent.futures.ResolvableFuture:
    public boolean setFuture(com.google.common.util.concurrent.ListenableFuture)
androidx.camera.core.CameraCaptureResults
android.support.v4.media.MediaBrowserCompat$SubscriptionCallback$StubApi26
androidx.core.util.TimeUtils
androidx.recyclerview.selection.DefaultSelectionTracker$AdapterObserver
androidx.legacy.coreutils.R$string
androidx.activity.R$layout
com.squareup.picasso.Stats$StatsHandler
androidx.appcompat.widget.DecorContentParent:
    public abstract java.lang.CharSequence getTitle()
    public abstract void setUiOptions(int)
    public abstract boolean hasIcon()
    public abstract boolean hasLogo()
    public abstract void setIcon(int)
    public abstract void setIcon(android.graphics.drawable.Drawable)
    public abstract void setLogo(int)
    public abstract void saveToolbarHierarchyState(android.util.SparseArray)
    public abstract void restoreToolbarHierarchyState(android.util.SparseArray)
io.github.prabhuomkar.pytorchandroid.R$styleable
androidx.camera.core.UseCaseEventConfig$Builder
androidx.legacy.v4.R$attr
androidx.viewpager.R$style
androidx.core.widget.AutoScrollHelper:
    public boolean isEnabled()
    public androidx.core.widget.AutoScrollHelper setExclusive(boolean)
    public boolean isExclusive()
    public static final float RELATIVE_UNSPECIFIED
    public static final float NO_MAX
    public static final float NO_MIN
    public static final int EDGE_TYPE_INSIDE
    public static final int EDGE_TYPE_INSIDE_EXTEND
    public static final int EDGE_TYPE_OUTSIDE
    private static final int HORIZONTAL
    private static final int VERTICAL
    private static final int DEFAULT_EDGE_TYPE
    private static final int DEFAULT_MINIMUM_VELOCITY_DIPS
    private static final int DEFAULT_MAXIMUM_VELOCITY_DIPS
    private static final float DEFAULT_MAXIMUM_EDGE
    private static final float DEFAULT_RELATIVE_EDGE
    private static final float DEFAULT_RELATIVE_VELOCITY
    private static final int DEFAULT_RAMP_UP_DURATION
    private static final int DEFAULT_RAMP_DOWN_DURATION
android.support.v4.media.session.MediaSessionCompatApi21$CallbackProxy
org.pytorch.R$string
androidx.media.MediaSessionManagerImplBase$RemoteUserInfoImplBase
androidx.media.MediaBrowserServiceCompat$Result
okhttp3.CookieJar
androidx.swiperefreshlayout.R$style
androidx.camera.core.ImageCapture$12
android.support.v4.media.session.ParcelableVolumeInfo:
    public void <init>(int,int,int,int,int)
androidx.camera.core.impl.utils.futures.ImmediateFuture:
    private static final java.lang.String TAG
android.support.v4.media.MediaBrowserCompat
okio.RealBufferedSink
com.squareup.picasso.MarkableInputStream
org.pytorch.R$drawable
okio.BufferedSink
androidx.camera.core.CameraCaptureMetaData$FlashState
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView:
    public void <init>(android.content.Context)
androidx.loader.content.ModernAsyncTask$1
androidx.core.widget.TextViewCompat$AutoSizeTextType
androidx.annotation.NavigationRes
okhttp3.Authenticator$1
android.support.v4.media.session.MediaSessionCompat$Callback$StubApi24
androidx.core.view.accessibility.AccessibilityNodeInfoCompat:
    static androidx.core.view.accessibility.AccessibilityNodeInfoCompat wrapNonNullInstance(java.lang.Object)
    public void <init>(java.lang.Object)
    public static androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtain(android.view.View)
    public static androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtain(android.view.View,int)
    public static androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtain()
    public static androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtain(androidx.core.view.accessibility.AccessibilityNodeInfoCompat)
    private java.util.List extrasCharSequenceList(java.lang.String)
    private boolean getBooleanProperty(int)
    public java.lang.Object getInfo()
    public void setSource(android.view.View)
    public void setSource(android.view.View,int)
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat findFocus(int)
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat focusSearch(int)
    public int getWindowId()
    public int getChildCount()
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat getChild(int)
    public void addChild(android.view.View)
    public void addChild(android.view.View,int)
    public boolean removeChild(android.view.View)
    public boolean removeChild(android.view.View,int)
    public boolean removeAction(androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat)
    public boolean performAction(int)
    public void setMovementGranularities(int)
    public int getMovementGranularities()
    public java.util.List findAccessibilityNodeInfosByText(java.lang.String)
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat getParent()
    public void setParent(android.view.View)
    public void setParent(android.view.View,int)
    public void setBoundsInParent(android.graphics.Rect)
    public void setBoundsInScreen(android.graphics.Rect)
    public void setCheckable(boolean)
    public void setChecked(boolean)
    public void setFocusable(boolean)
    public void setFocused(boolean)
    public boolean isVisibleToUser()
    public void setVisibleToUser(boolean)
    public boolean isAccessibilityFocused()
    public void setAccessibilityFocused(boolean)
    public void setSelected(boolean)
    public void setClickable(boolean)
    public void setLongClickable(boolean)
    public void setEnabled(boolean)
    public void setPassword(boolean)
    public boolean isImportantForAccessibility()
    public void setImportantForAccessibility(boolean)
    public void setPackageName(java.lang.CharSequence)
    public void setText(java.lang.CharSequence)
    public void setContentDescription(java.lang.CharSequence)
    public void recycle()
    public void setViewIdResourceName(java.lang.String)
    public int getLiveRegion()
    public void setLiveRegion(int)
    public int getDrawingOrder()
    public void setDrawingOrder(int)
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat getCollectionInfo()
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat getCollectionItemInfo()
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat getRangeInfo()
    public void setRangeInfo(androidx.core.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat)
    public java.util.List getActionList()
    public void setContentInvalid(boolean)
    public boolean isContentInvalid()
    public boolean isContextClickable()
    public void setContextClickable(boolean)
    public java.lang.CharSequence getHintText()
    public void setHintText(java.lang.CharSequence)
    public void setError(java.lang.CharSequence)
    public java.lang.CharSequence getError()
    public void setLabelFor(android.view.View)
    public void setLabelFor(android.view.View,int)
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat getLabelFor()
    public void setLabeledBy(android.view.View)
    public void setLabeledBy(android.view.View,int)
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat getLabeledBy()
    public boolean canOpenPopup()
    public void setCanOpenPopup(boolean)
    public java.util.List findAccessibilityNodeInfosByViewId(java.lang.String)
    public int getInputType()
    public void setInputType(int)
    public void setMaxTextLength(int)
    public int getMaxTextLength()
    public void setTextSelection(int,int)
    public int getTextSelectionStart()
    public int getTextSelectionEnd()
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat getTraversalBefore()
    public void setTraversalBefore(android.view.View)
    public void setTraversalBefore(android.view.View,int)
    public androidx.core.view.accessibility.AccessibilityNodeInfoCompat getTraversalAfter()
    public void setTraversalAfter(android.view.View)
    public void setTraversalAfter(android.view.View,int)
    public androidx.core.view.accessibility.AccessibilityWindowInfoCompat getWindow()
    public boolean isDismissable()
    public void setDismissable(boolean)
    public boolean isEditable()
    public void setEditable(boolean)
    public boolean isMultiLine()
    public void setMultiLine(boolean)
    public java.lang.CharSequence getTooltipText()
    public void setTooltipText(java.lang.CharSequence)
    public java.lang.CharSequence getPaneTitle()
    public boolean isScreenReaderFocusable()
    public boolean isShowingHintText()
    public void setShowingHintText(boolean)
    public boolean isHeading()
    public boolean isTextEntryKey()
    public void setTextEntryKey(boolean)
    public boolean refresh()
    public java.lang.CharSequence getRoleDescription()
    public void setRoleDescription(java.lang.CharSequence)
    private static final java.lang.String ROLE_DESCRIPTION_KEY
    private static final java.lang.String PANE_TITLE_KEY
    private static final java.lang.String TOOLTIP_TEXT_KEY
    private static final java.lang.String HINT_TEXT_KEY
    private static final java.lang.String BOOLEAN_PROPERTY_KEY
    private static final java.lang.String SPANS_ID_KEY
    private static final java.lang.String SPANS_START_KEY
    private static final java.lang.String SPANS_END_KEY
    private static final java.lang.String SPANS_FLAGS_KEY
    private static final java.lang.String SPANS_ACTION_ID_KEY
    private static final int BOOLEAN_PROPERTY_SCREEN_READER_FOCUSABLE
    private static final int BOOLEAN_PROPERTY_IS_HEADING
    private static final int BOOLEAN_PROPERTY_IS_SHOWING_HINT
    private static final int BOOLEAN_PROPERTY_IS_TEXT_ENTRY_KEY
    public static final int ACTION_FOCUS
    public static final int ACTION_CLEAR_FOCUS
    public static final int ACTION_SELECT
    public static final int ACTION_CLEAR_SELECTION
    public static final int ACTION_CLICK
    public static final int ACTION_LONG_CLICK
    public static final int ACTION_ACCESSIBILITY_FOCUS
    public static final int ACTION_CLEAR_ACCESSIBILITY_FOCUS
    public static final int ACTION_NEXT_AT_MOVEMENT_GRANULARITY
    public static final int ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY
    public static final int ACTION_NEXT_HTML_ELEMENT
    public static final int ACTION_PREVIOUS_HTML_ELEMENT
    public static final int ACTION_SCROLL_FORWARD
    public static final int ACTION_SCROLL_BACKWARD
    public static final int ACTION_COPY
    public static final int ACTION_PASTE
    public static final int ACTION_CUT
    public static final int ACTION_SET_SELECTION
    public static final int ACTION_EXPAND
    public static final int ACTION_COLLAPSE
    public static final int ACTION_DISMISS
    public static final int ACTION_SET_TEXT
    public static final java.lang.String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT
    public static final java.lang.String ACTION_ARGUMENT_HTML_ELEMENT_STRING
    public static final java.lang.String ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN
    public static final java.lang.String ACTION_ARGUMENT_SELECTION_START_INT
    public static final java.lang.String ACTION_ARGUMENT_SELECTION_END_INT
    public static final java.lang.String ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE
    public static final java.lang.String ACTION_ARGUMENT_ROW_INT
    public static final java.lang.String ACTION_ARGUMENT_COLUMN_INT
    public static final java.lang.String ACTION_ARGUMENT_PROGRESS_VALUE
    public static final java.lang.String ACTION_ARGUMENT_MOVE_WINDOW_X
    public static final java.lang.String ACTION_ARGUMENT_MOVE_WINDOW_Y
    public static final int FOCUS_INPUT
    public static final int FOCUS_ACCESSIBILITY
    public static final int MOVEMENT_GRANULARITY_CHARACTER
    public static final int MOVEMENT_GRANULARITY_WORD
    public static final int MOVEMENT_GRANULARITY_LINE
    public static final int MOVEMENT_GRANULARITY_PARAGRAPH
    public static final int MOVEMENT_GRANULARITY_PAGE
androidx.appcompat.view.menu.MenuView:
    public abstract int getWindowAnimations()
androidx.camera.core.ImageCapture$ImageCaptureError
androidx.appcompat.widget.SuggestionsAdapter:
    public int getQueryRefinement()
    public void close()
    private static final boolean DBG
    private static final java.lang.String LOG_TAG
    private static final int QUERY_LIMIT
    static final int REFINE_NONE
    static final int REFINE_BY_ENTRY
    static final int REFINE_ALL
    static final int INVALID_INDEX
androidx.core.view.WindowInsetsCompat:
    public void <init>(androidx.core.view.WindowInsetsCompat)
    public boolean hasSystemWindowInsets()
    public boolean hasInsets()
    public boolean isConsumed()
    public boolean isRound()
    public androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
    public androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(android.graphics.Rect)
    public int getStableInsetTop()
    public int getStableInsetLeft()
    public int getStableInsetRight()
    public int getStableInsetBottom()
    public boolean hasStableInsets()
    public androidx.core.view.WindowInsetsCompat consumeStableInsets()
    public androidx.core.view.DisplayCutoutCompat getDisplayCutout()
    public androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
androidx.appcompat.widget.TooltipPopup:
    private static final java.lang.String TAG
androidx.appcompat.app.AppCompatActivity:
    public void <init>(int)
    public void setSupportActionBar(androidx.appcompat.widget.Toolbar)
    public boolean supportRequestWindowFeature(int)
    public androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)
    public void setSupportProgressBarVisibility(boolean)
    public void setSupportProgressBarIndeterminateVisibility(boolean)
    public void setSupportProgressBarIndeterminate(boolean)
    public void setSupportProgress(int)
    public androidx.appcompat.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate()
androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm
androidx.recyclerview.widget.SnapHelper$1
androidx.recyclerview.widget.ViewInfoStore$InfoRecord:
    static final int FLAG_DISAPPEARED
    static final int FLAG_APPEAR
    static final int FLAG_PRE
    static final int FLAG_POST
    static final int FLAG_APPEAR_AND_DISAPPEAR
    static final int FLAG_PRE_AND_POST
    static final int FLAG_APPEAR_PRE_AND_POST
okhttp3.WebSocket$Factory
com.downloader.database.DatabaseOpenHelper
android.support.v4.media.session.MediaControllerCompat
androidx.appcompat.widget.AppCompatRatingBar:
    public void <init>(android.content.Context)
androidx.legacy.coreutils.R$dimen
androidx.camera.core.ThreadConfig:
    public abstract java.util.concurrent.Executor getBackgroundExecutor(java.util.concurrent.Executor)
    public abstract java.util.concurrent.Executor getBackgroundExecutor()
androidx.appcompat.widget.AppCompatSpinner$DialogPopup:
    public int getHorizontalOriginalOffset()
androidx.print.PrintHelper$OnPrintFinishCallback
androidx.core.text.BidiFormatter
androidx.core.view.inputmethod.InputConnectionCompat$1
androidx.loader.content.AsyncTaskLoader
androidx.recyclerview.widget.DiffUtil$Snake
android.support.v4.media.session.PlaybackStateCompatApi22:
    public static java.lang.Object newInstance(int,long,long,float,long,java.lang.CharSequence,long,java.util.List,long,android.os.Bundle)
    private void <init>()
androidx.constraintlayout.widget.ConstraintSet$Constraint:
    static synthetic void access$100(androidx.constraintlayout.widget.ConstraintSet$Constraint,int,androidx.constraintlayout.widget.ConstraintLayout$LayoutParams)
    static final int UNSET
okhttp3.internal.http1.Http1Codec$ChunkedSource
okhttp3.Cache$1
okhttp3.internal.ws.WebSocketReader$FrameCallback
androidx.recyclerview.R$drawable
androidx.fragment.app.FragmentTabHost$DummyTabFactory
androidx.recyclerview.selection.GestureSelectionHelper$ViewDelegate
android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallback
androidx.recyclerview.R$color
androidx.fragment.R$id
android.support.v4.media.session.MediaSessionCompatApi23$CallbackProxy
androidx.activity.R$string
androidx.camera.core.AndroidImageProxy:
    public synchronized android.graphics.Rect getCropRect()
    public synchronized void setTimestamp(long)
androidx.recyclerview.widget.ItemTouchHelper
okio.Timeout
android.support.v4.media.session.MediaSessionCompat$3
androidx.appcompat.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo
android.support.v4.media.session.MediaSessionCompat$MediaSessionImplApi18$1
androidx.lifecycle.ComputableLiveData$1
androidx.drawerlayout.widget.DrawerLayout$1
androidx.camera.camera2.impl.Camera$7
androidx.camera.camera2.impl.compat.CameraCaptureSessionCompat:
    private void <init>()
    public static int captureSingleRequest(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)
    public static int setRepeatingBurstRequests(android.hardware.camera2.CameraCaptureSession,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)
androidx.core.app.NotificationCompat$Builder
okhttp3.internal.http2.Http2Reader
androidx.core.graphics.TypefaceCompatApi21Impl:
    private static final java.lang.String TAG
    private static final java.lang.String FONT_FAMILY_CLASS
    private static final java.lang.String ADD_FONT_WEIGHT_STYLE_METHOD
    private static final java.lang.String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD
androidx.appcompat.widget.AppCompatDrawableManager:
    synchronized android.graphics.drawable.Drawable onDrawableLoadedFromResources(android.content.Context,androidx.appcompat.widget.VectorEnabledTintResources,int)
    boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)
    private static final java.lang.String TAG
    private static final boolean DEBUG
androidx.camera.core.ImageSaver$1
androidx.recyclerview.widget.DividerItemDecoration:
    public void setDrawable(android.graphics.drawable.Drawable)
    public android.graphics.drawable.Drawable getDrawable()
    public static final int HORIZONTAL
    public static final int VERTICAL
    private static final java.lang.String TAG
com.squareup.picasso.PicassoExecutorService$PicassoFutureTask
androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat:
    private void <init>(androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat$SessionConfigurationCompatImpl)
    public static androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat wrap(java.lang.Object)
    public void setInputConfiguration(androidx.camera.camera2.impl.compat.params.InputConfigurationCompat)
    public android.hardware.camera2.CaptureRequest getSessionParameters()
    public static final int SESSION_REGULAR
    public static final int SESSION_HIGH_SPEED
androidx.swiperefreshlayout.widget.CircularProgressDrawable
androidx.loader.content.ModernAsyncTask$Status
androidx.core.view.ViewCompat:
    private static android.graphics.Rect getEmptyTempRect()
    public static boolean canScrollHorizontally(android.view.View,int)
    public static boolean canScrollVertically(android.view.View,int)
    public static int getOverScrollMode(android.view.View)
    public static void setOverScrollMode(android.view.View,int)
    public static void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)
    public static void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)
    public static void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat)
    public static varargs void setAutofillHints(android.view.View,java.lang.String[])
    public static boolean isImportantForAutofill(android.view.View)
    public static boolean hasAccessibilityDelegate(android.view.View)
    static androidx.core.view.AccessibilityDelegateCompat getOrCreateAccessibilityDelegateCompat(android.view.View)
    public static void setHasTransientState(android.view.View,boolean)
    public static void postInvalidateOnAnimation(android.view.View,int,int,int,int)
    public static boolean isImportantForAccessibility(android.view.View)
    public static boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)
    public static int addAccessibilityAction(android.view.View,java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand)
    private static int getAvailableActionIdFromResources(android.view.View)
    public static void replaceAccessibilityAction(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat,java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand)
    private static void addAccessibilityAction(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat)
    public static void removeAccessibilityAction(android.view.View,int)
    private static void removeActionWithId(int,android.view.View)
    private static java.util.List getActionList(android.view.View)
    public static void enableAccessibleClickableSpanSupport(android.view.View)
    public static androidx.core.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)
    public static float getAlpha(android.view.View)
    public static void setLayerType(android.view.View,int,android.graphics.Paint)
    public static int getLayerType(android.view.View)
    public static int getLabelFor(android.view.View)
    public static void setLabelFor(android.view.View,int)
    public static void setLayerPaint(android.view.View,android.graphics.Paint)
    public static void setLayoutDirection(android.view.View,int)
    public static android.view.ViewParent getParentForAccessibility(android.view.View)
    public static android.view.View requireViewById(android.view.View,int)
    public static boolean isOpaque(android.view.View)
    public static int resolveSizeAndState(int,int,int)
    public static int getMeasuredWidthAndState(android.view.View)
    public static int getMeasuredHeightAndState(android.view.View)
    public static int getMeasuredState(android.view.View)
    public static int combineMeasuredStates(int,int)
    public static void setAccessibilityLiveRegion(android.view.View,int)
    public static int getPaddingStart(android.view.View)
    public static int getPaddingEnd(android.view.View)
    public static void setPaddingRelative(android.view.View,int,int,int,int)
    private static void bindTempDetach()
    public static void dispatchStartTemporaryDetach(android.view.View)
    public static void dispatchFinishTemporaryDetach(android.view.View)
    public static float getTranslationX(android.view.View)
    public static float getTranslationY(android.view.View)
    public static android.graphics.Matrix getMatrix(android.view.View)
    public static void setTranslationX(android.view.View,float)
    public static void setTranslationY(android.view.View,float)
    public static void setAlpha(android.view.View,float)
    public static void setX(android.view.View,float)
    public static void setY(android.view.View,float)
    public static void setRotation(android.view.View,float)
    public static void setRotationX(android.view.View,float)
    public static void setRotationY(android.view.View,float)
    public static void setScaleX(android.view.View,float)
    public static void setScaleY(android.view.View,float)
    public static float getPivotX(android.view.View)
    public static void setPivotX(android.view.View,float)
    public static float getPivotY(android.view.View)
    public static void setPivotY(android.view.View,float)
    public static float getRotation(android.view.View)
    public static float getRotationX(android.view.View)
    public static float getRotationY(android.view.View)
    public static float getScaleX(android.view.View)
    public static float getScaleY(android.view.View)
    public static float getX(android.view.View)
    public static float getY(android.view.View)
    public static float getElevation(android.view.View)
    public static void setTranslationZ(android.view.View,float)
    public static float getTranslationZ(android.view.View)
    public static void setChildrenDrawingOrderEnabled(android.view.ViewGroup,boolean)
    public static boolean getFitsSystemWindows(android.view.View)
    public static void setFitsSystemWindows(android.view.View,boolean)
    public static void jumpDrawablesToCurrentState(android.view.View)
    public static androidx.core.view.WindowInsetsCompat dispatchApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)
    public static void setSaveFromParentEnabled(android.view.View,boolean)
    public static void setActivated(android.view.View,boolean)
    public static boolean hasOverlappingRendering(android.view.View)
    public static boolean isPaddingRelative(android.view.View)
    public static void setNestedScrollingEnabled(android.view.View,boolean)
    public static boolean isNestedScrollingEnabled(android.view.View)
    public static boolean startNestedScroll(android.view.View,int)
    public static boolean hasNestedScrollingParent(android.view.View)
    public static boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[])
    public static boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[])
    public static boolean startNestedScroll(android.view.View,int,int)
    public static void stopNestedScroll(android.view.View,int)
    public static boolean hasNestedScrollingParent(android.view.View,int)
    public static void dispatchNestedScroll(android.view.View,int,int,int,int,int[],int,int[])
    public static boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[],int)
    public static boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[],int)
    public static boolean dispatchNestedFling(android.view.View,float,float,boolean)
    public static boolean dispatchNestedPreFling(android.view.View,float,float)
    public static boolean isInLayout(android.view.View)
    public static boolean isLayoutDirectionResolved(android.view.View)
    public static float getZ(android.view.View)
    public static void setZ(android.view.View,float)
    public static void offsetTopAndBottom(android.view.View,int)
    private static void compatOffsetTopAndBottom(android.view.View,int)
    public static void offsetLeftAndRight(android.view.View,int)
    private static void compatOffsetLeftAndRight(android.view.View,int)
    private static void tickleInvalidationFlag(android.view.View)
    public static void setClipBounds(android.view.View,android.graphics.Rect)
    public static android.graphics.Rect getClipBounds(android.view.View)
    public static void setScrollIndicators(android.view.View,int)
    public static int getScrollIndicators(android.view.View)
    public static void setPointerIcon(android.view.View,androidx.core.view.PointerIconCompat)
    public static void setTooltipText(android.view.View,java.lang.CharSequence)
    public static boolean startDragAndDrop(android.view.View,android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)
    public static void cancelDragAndDrop(android.view.View)
    public static void updateDragShadow(android.view.View,android.view.View$DragShadowBuilder)
    public static int getNextClusterForwardId(android.view.View)
    public static void setNextClusterForwardId(android.view.View,int)
    public static boolean isKeyboardNavigationCluster(android.view.View)
    public static void setKeyboardNavigationCluster(android.view.View,boolean)
    public static boolean isFocusedByDefault(android.view.View)
    public static void setFocusedByDefault(android.view.View,boolean)
    public static android.view.View keyboardNavigationClusterSearch(android.view.View,android.view.View,int)
    public static void addKeyboardNavigationClusters(android.view.View,java.util.Collection,int)
    public static boolean restoreDefaultFocus(android.view.View)
    public static boolean hasExplicitFocusable(android.view.View)
    public static int generateViewId()
    public static void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
    public static void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
    protected void <init>()
    public static void setScreenReaderFocusable(android.view.View,boolean)
    public static void setAccessibilityPaneTitle(android.view.View,java.lang.CharSequence)
    public static void setAccessibilityHeading(android.view.View,boolean)
    private static final java.lang.String TAG
    public static final int OVER_SCROLL_ALWAYS
    public static final int OVER_SCROLL_IF_CONTENT_SCROLLS
    public static final int OVER_SCROLL_NEVER
    public static final int IMPORTANT_FOR_ACCESSIBILITY_AUTO
    public static final int IMPORTANT_FOR_ACCESSIBILITY_YES
    public static final int IMPORTANT_FOR_ACCESSIBILITY_NO
    public static final int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS
    public static final int ACCESSIBILITY_LIVE_REGION_NONE
    public static final int ACCESSIBILITY_LIVE_REGION_POLITE
    public static final int ACCESSIBILITY_LIVE_REGION_ASSERTIVE
    public static final int LAYER_TYPE_NONE
    public static final int LAYER_TYPE_SOFTWARE
    public static final int LAYER_TYPE_HARDWARE
    public static final int LAYOUT_DIRECTION_LTR
    public static final int LAYOUT_DIRECTION_RTL
    public static final int LAYOUT_DIRECTION_INHERIT
    public static final int LAYOUT_DIRECTION_LOCALE
    public static final int MEASURED_SIZE_MASK
    public static final int MEASURED_STATE_MASK
    public static final int MEASURED_HEIGHT_STATE_SHIFT
    public static final int MEASURED_STATE_TOO_SMALL
    public static final int SCROLL_AXIS_NONE
    public static final int SCROLL_AXIS_HORIZONTAL
    public static final int SCROLL_AXIS_VERTICAL
    public static final int TYPE_TOUCH
    public static final int TYPE_NON_TOUCH
    public static final int SCROLL_INDICATOR_TOP
    public static final int SCROLL_INDICATOR_BOTTOM
    public static final int SCROLL_INDICATOR_LEFT
    public static final int SCROLL_INDICATOR_RIGHT
    public static final int SCROLL_INDICATOR_START
    public static final int SCROLL_INDICATOR_END
    private static java.lang.reflect.Method sDispatchStartTemporaryDetach
    private static java.lang.reflect.Method sDispatchFinishTemporaryDetach
    private static boolean sTempDetachBound
    private static java.lang.reflect.Method sChildrenDrawingOrderMethod
    private static java.lang.ThreadLocal sThreadLocalRect
androidx.camera.core.ImageCapture$CaptureCallbackChecker$1
okhttp3.internal.tls.CertificateChainCleaner
androidx.recyclerview.selection.ResetManager$1
androidx.fragment.app.FragmentManagerImpl$FragmentTag:
    private void <init>()
    public static final int Fragment_id
    public static final int Fragment_name
    public static final int Fragment_tag
androidx.vectordrawable.animated.R$string
androidx.core.os.CancellationSignal
androidx.swiperefreshlayout.R$drawable
com.squareup.picasso.MediaStoreRequestHandler
androidx.core.app.NotificationCompat$BadgeIconType
android.support.v4.media.MediaBrowserCompatApi21
androidx.recyclerview.widget.MessageThreadUtil$SyncQueueItem
androidx.recyclerview.widget.RecyclerView$SmoothScroller:
    public void <init>()
    void start(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$LayoutManager)
    public android.graphics.PointF computeScrollVectorForPosition(int)
    public androidx.recyclerview.widget.RecyclerView$LayoutManager getLayoutManager()
    public int getChildPosition(android.view.View)
    public int getChildCount()
    public android.view.View findViewByPosition(int)
    public void instantScrollToPosition(int)
    protected void normalize(android.graphics.PointF)
    protected abstract void onStart()
    protected abstract void onStop()
    protected abstract void onSeekTargetStep(int,int,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.RecyclerView$SmoothScroller$Action)
    protected abstract void onTargetFound(android.view.View,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.RecyclerView$SmoothScroller$Action)
    private int mTargetPosition
    private androidx.recyclerview.widget.RecyclerView mRecyclerView
    private androidx.recyclerview.widget.RecyclerView$LayoutManager mLayoutManager
    private boolean mPendingInitialRun
    private boolean mRunning
    private android.view.View mTargetView
    private final androidx.recyclerview.widget.RecyclerView$SmoothScroller$Action mRecyclingAction
    private boolean mStarted
androidx.camera.core.FocusMeteringAction$MeteringMode
androidx.appcompat.widget.Toolbar$LayoutParams:
    public void <init>(int,int,int)
    public void <init>(int)
    static final int CUSTOM
    static final int SYSTEM
    static final int EXPANDED
okhttp3.Request
androidx.recyclerview.widget.AsyncListDiffer
android.support.v4.os.IResultReceiver$Stub:
    private static final java.lang.String DESCRIPTOR
    static final int TRANSACTION_send
android.support.v4.app.INotificationSideChannel$Stub$Proxy
androidx.lifecycle.MediatorLiveData
android.support.v4.media.session.IMediaControllerCallback$Stub$Proxy
androidx.coordinatorlayout.widget.CoordinatorLayout$DefaultBehavior
androidx.recyclerview.selection.DefaultSelectionTracker$RangeCallbacks
androidx.loader.R$string
androidx.appcompat.app.WindowDecorActionBar:
    public void <init>(android.view.View)
    private void ensureTabsExist()
    private void cleanupTabs()
    private void configureTab(androidx.appcompat.app.ActionBar$Tab,int)
    public float getElevation()
    public void addOnMenuVisibilityListener(androidx.appcompat.app.ActionBar$OnMenuVisibilityListener)
    public void removeOnMenuVisibilityListener(androidx.appcompat.app.ActionBar$OnMenuVisibilityListener)
    public void setDisplayUseLogoEnabled(boolean)
    public void setDisplayShowHomeEnabled(boolean)
    public void setDisplayShowTitleEnabled(boolean)
    public void setDisplayShowCustomEnabled(boolean)
    public void setTitle(int)
    public void setSubtitle(int)
    public void setSelectedNavigationItem(int)
    public void removeAllTabs()
    public void setTitle(java.lang.CharSequence)
    public boolean requestFocus()
    public void setSubtitle(java.lang.CharSequence)
    public void setBackgroundDrawable(android.graphics.drawable.Drawable)
    public void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)
    public void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)
    public android.view.View getCustomView()
    public java.lang.CharSequence getTitle()
    public java.lang.CharSequence getSubtitle()
    public void addTab(androidx.appcompat.app.ActionBar$Tab)
    public void addTab(androidx.appcompat.app.ActionBar$Tab,int)
    public void addTab(androidx.appcompat.app.ActionBar$Tab,boolean)
    public void addTab(androidx.appcompat.app.ActionBar$Tab,int,boolean)
    public androidx.appcompat.app.ActionBar$Tab newTab()
    public void removeTab(androidx.appcompat.app.ActionBar$Tab)
    public void removeTabAt(int)
    public void selectTab(androidx.appcompat.app.ActionBar$Tab)
    public androidx.appcompat.app.ActionBar$Tab getSelectedTab()
    public int getHeight()
    public void show()
    public void hide()
    public boolean isHideOnContentScrollEnabled()
    public int getHideOffset()
    public void setHideOffset(int)
    public boolean isShowing()
    public boolean isTitleTruncated()
    public void setHomeAsUpIndicator(android.graphics.drawable.Drawable)
    public void setHomeAsUpIndicator(int)
    public void setHomeActionContentDescription(java.lang.CharSequence)
    public void setHomeActionContentDescription(int)
    public void setCustomView(android.view.View,androidx.appcompat.app.ActionBar$LayoutParams)
    public void setListNavigationCallbacks(android.widget.SpinnerAdapter,androidx.appcompat.app.ActionBar$OnNavigationListener)
    public int getSelectedNavigationIndex()
    public int getNavigationItemCount()
    public int getTabCount()
    public void setNavigationMode(int)
    public androidx.appcompat.app.ActionBar$Tab getTabAt(int)
    public void setIcon(int)
    public void setIcon(android.graphics.drawable.Drawable)
    public boolean hasIcon()
    public void setLogo(int)
    public void setLogo(android.graphics.drawable.Drawable)
    public boolean hasLogo()
    private androidx.appcompat.app.WindowDecorActionBar$TabImpl mSelectedTab
    private static final java.lang.String TAG
    private static final int INVALID_POSITION
    private static final long FADE_OUT_DURATION_MS
    private static final long FADE_IN_DURATION_MS
androidx.recyclerview.selection.SelectionTracker$Builder$3
androidx.concurrent.futures.DirectExecutor
androidx.media.MediaBrowserServiceCompat$ServiceBinderImpl$9
androidx.core.os.LocaleListCompat
io.github.prabhuomkar.pytorchandroid.R$interpolator
androidx.core.view.ViewCompat$UnhandledKeyEventManager:
    static void registerListeningView(android.view.View)
    static void unregisterListeningView(android.view.View)
okhttp3.internal.http2.Hpack$Writer
okhttp3.HttpUrl$1
androidx.core.provider.FontsContractCompat$4$9
androidx.appcompat.widget.LinearLayoutCompat$LayoutParams:
    public void <init>(int,int,float)
    public void <init>(android.view.ViewGroup$MarginLayoutParams)
    public void <init>(androidx.appcompat.widget.LinearLayoutCompat$LayoutParams)
androidx.annotation.AnyRes
androidx.appcompat.widget.AppCompatToggleButton:
    public void <init>(android.content.Context)
android.support.v4.app.INotificationSideChannel$Stub
androidx.core.app.JobIntentService$JobServiceEngineImpl
androidx.media.MediaBrowserServiceCompat$1
androidx.vectordrawable.R$attr
androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState:
    void invalidateAnchorPositionInfo()
androidx.core.app.BundleCompat:
    private void <init>()
    public static void putBinder(android.os.Bundle,java.lang.String,android.os.IBinder)
androidx.appcompat.widget.ActivityChooserModel$PersistHistoryAsyncTask
androidx.recyclerview.selection.StorageStrategy
android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$3
androidx.loader.content.CursorLoader
androidx.core.app.NavUtils:
    public static void navigateUpFromSameTask(android.app.Activity)
    public static android.content.Intent getParentActivityIntent(android.content.Context,java.lang.Class)
    private void <init>()
    private static final java.lang.String TAG
    public static final java.lang.String PARENT_ACTIVITY
androidx.core.graphics.ColorUtils:
    private void <init>()
    public static android.graphics.Color compositeColors(android.graphics.Color,android.graphics.Color)
    public static double calculateLuminance(int)
    public static double calculateContrast(int,int)
    public static int calculateMinimumAlpha(int,int,float)
    public static void RGBToHSL(int,int,int,float[])
    public static void colorToHSL(int,float[])
    public static int HSLToColor(float[])
    public static void colorToLAB(int,double[])
    public static void RGBToLAB(int,int,int,double[])
    public static void colorToXYZ(int,double[])
    public static void RGBToXYZ(int,int,int,double[])
    public static void XYZToLAB(double,double,double,double[])
    public static void LABToXYZ(double,double,double,double[])
    public static int XYZToColor(double,double,double)
    public static int LABToColor(double,double,double)
    public static double distanceEuclidean(double[],double[])
    private static float constrain(float,float,float)
    private static int constrain(int,int,int)
    private static double pivotXyzComponent(double)
    public static int blendARGB(int,int,float)
    public static void blendHSL(float[],float[],float,float[])
    public static void blendLAB(double[],double[],double,double[])
    static float circularInterpolate(float,float,float)
    private static double[] getTempDouble3Array()
    private static final double XYZ_WHITE_REFERENCE_X
    private static final double XYZ_WHITE_REFERENCE_Y
    private static final double XYZ_WHITE_REFERENCE_Z
    private static final double XYZ_EPSILON
    private static final double XYZ_KAPPA
    private static final int MIN_ALPHA_SEARCH_MAX_ITERATIONS
    private static final int MIN_ALPHA_SEARCH_PRECISION
androidx.recyclerview.widget.RecyclerView$SimpleOnItemTouchListener
okhttp3.internal.platform.AndroidPlatform$AndroidTrustRootIndex
androidx.media.R$attr
androidx.coordinatorlayout.widget.DirectedAcyclicGraph
androidx.constraintlayout.widget.Placeholder:
    public void <init>(android.content.Context)
    public void <init>(android.content.Context,android.util.AttributeSet)
    public void <init>(android.content.Context,android.util.AttributeSet,int)
    public void <init>(android.content.Context,android.util.AttributeSet,int,int)
    private void init(android.util.AttributeSet)
androidx.core.content.res.ResourcesCompat:
    public static android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources,int,int,android.content.res.Resources$Theme)
    public static int getColor(android.content.res.Resources,int,android.content.res.Resources$Theme)
    public static android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)
    public static float getFloat(android.content.res.Resources,int)
    public static android.graphics.Typeface getFont(android.content.Context,int)
    public static void getFont(android.content.Context,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler)
    private void <init>()
    private static final java.lang.String TAG
androidx.camera.core.ImageInfoProcessor:
    public abstract androidx.camera.core.CaptureStage getCaptureStage()
androidx.camera.core.impl.utils.futures.ChainingListenableFuture$1
androidx.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21
androidx.core.view.ViewCompat$3:
    void frameworkSet(android.view.View,java.lang.Boolean)
    boolean shouldUpdate(java.lang.Boolean,java.lang.Boolean)
    synthetic bridge void frameworkSet(android.view.View,java.lang.Object)
    synthetic bridge boolean shouldUpdate(java.lang.Object,java.lang.Object)
androidx.arch.core.executor.TaskExecutor:
    public void executeOnMainThread(java.lang.Runnable)
androidx.core.net.DatagramSocketWrapper$DatagramSocketImplWrapper
androidx.core.graphics.PathSegment
okhttp3.internal.http2.ConnectionShutdownException
androidx.vectordrawable.animated.R$layout
com.squareup.picasso.Callback
okhttp3.internal.http.RealInterceptorChain
androidx.core.graphics.drawable.RoundedBitmapDrawable
androidx.constraintlayout.widget.Constraints:
    public void <init>(android.content.Context)
    public void <init>(android.content.Context,android.util.AttributeSet)
    public void <init>(android.content.Context,android.util.AttributeSet,int)
    private void init(android.util.AttributeSet)
    public static final java.lang.String TAG
com.google.auto.value.extension.memoized.Memoized
com.squareup.picasso.RemoteViewsAction$AppWidgetAction
androidx.coordinatorlayout.widget.CoordinatorLayout$DispatchChangeEvent
androidx.media.MediaBrowserServiceCompatApi21
okio.package-info
androidx.recyclerview.widget.PagerSnapHelper
androidx.core.database.sqlite.SQLiteCursorCompat
androidx.camera.core.DeferrableSurface$SurfaceClosedException:
    public void <init>(java.lang.String,java.lang.Throwable,androidx.camera.core.DeferrableSurface)
androidx.fragment.app.ListFragment$2
android.support.v4.media.MediaBrowserCompat$CustomActionCallback:
    public void <init>()
com.facebook.jni.CppException
androidx.legacy.v4.R$dimen
androidx.appcompat.app.AppCompatDialogFragment
androidx.core.net.TrafficStatsCompat
androidx.core.view.ViewCompat$AccessibilityViewProperty:
    void set(android.view.View,java.lang.Object)
    boolean shouldUpdate(java.lang.Object,java.lang.Object)
    abstract void frameworkSet(android.view.View,java.lang.Object)
    boolean booleanNullToFalseEquals(java.lang.Boolean,java.lang.Boolean)
okhttp3.internal.http2.Http2Reader$Handler
androidx.activity.ImmLeaksCleaner:
    private static final int NOT_INITIALIAZED
    private static final int INIT_SUCCESS
    private static final int INIT_FAILED
androidx.appcompat.widget.ScrollingTabContainerView$TabView:
    private static final java.lang.String ACCESSIBILITY_CLASS_NAME
androidx.core.app.NotificationCompat$Action$Extender
com.squareup.picasso.Picasso$CleanupThread
com.squareup.picasso.PicassoExecutorService
android.support.v4.media.MediaMetadataCompat$BitmapKey
androidx.camera.camera2.Camera2Config:
    public java.lang.Object getCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)
    public static final java.lang.String CAPTURE_REQUEST_ID_STEM
androidx.camera.core.ReferenceCountedImageProxy:
    synchronized int getReferenceCount()
android.support.v4.media.session.MediaControllerCompat$Callback:
    public void onSessionReady()
    public void onCaptioningEnabledChanged(boolean)
    public void onRepeatModeChanged(int)
    public void onShuffleModeChanged(int)
    public android.support.v4.media.session.IMediaControllerCallback getIControllerCallback()
    void setHandler(android.os.Handler)
androidx.swiperefreshlayout.widget.SwipeRefreshLayout$OnChildScrollUpCallback
androidx.appcompat.view.menu.BaseMenuPresenter:
    public boolean flagActionItems()
    public int getId()
androidx.annotation.ColorLong
android.support.v4.media.session.MediaControllerCompat$TransportControlsApi24
okhttp3.internal.platform.Platform
androidx.appcompat.widget.SwitchCompat
androidx.recyclerview.selection.DummyOnItemTouchListener
androidx.appcompat.view.StandaloneActionMode:
    public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean)
    public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder)
    public void onCloseSubMenu(androidx.appcompat.view.menu.SubMenuBuilder)
    public boolean isUiFocusable()
androidx.core.os.MessageCompat
okhttp3.internal.http2.Http2Codec$StreamFinishingSource
androidx.camera.camera2.Camera2Config$Extender
androidx.appcompat.widget.AppCompatBackgroundHelper:
    public final boolean shouldApplyFrameworkTintUsingColorFilter()
    public final boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)
androidx.core.view.ActionProvider$VisibilityListener:
    public abstract void onActionProviderVisibilityChanged(boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath:
    public void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)
    public final void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)
androidx.camera.camera2.impl.Camera2CameraControl$11
androidx.camera.camera2.impl.Camera$16
androidx.collection.SimpleArrayMap:
    public static int binarySearchHashes(int[],int,int)
    public void ensureCapacity(int)
androidx.core.graphics.TypefaceCompat:
    public static android.graphics.Typeface findFromCache(android.content.res.Resources,int,int)
    public static android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int)
    public static android.graphics.Typeface getBestFontFromFamily(android.content.Context,android.graphics.Typeface,int)
androidx.appcompat.app.AlertController$AlertParams$2
android.support.v4.media.MediaDescriptionCompat:
    public void <init>(android.os.Parcel)
    public java.lang.Object getMediaDescription()
androidx.media.AudioAttributesImplBase:
    public int getLegacyStreamType()
    public int getContentType()
    public int getUsage()
    public int getFlags()
android.support.v4.media.session.ParcelableVolumeInfo$1:
    public android.support.v4.media.session.ParcelableVolumeInfo createFromParcel(android.os.Parcel)
    public android.support.v4.media.session.ParcelableVolumeInfo[] newArray(int)
androidx.camera.core.Observable:
    public abstract void addObserver(java.util.concurrent.Executor,androidx.camera.core.Observable$Observer)
    public abstract void removeObserver(androidx.camera.core.Observable$Observer)
androidx.camera.core.ImageReaderProxys:
    public void <init>()
    public static androidx.camera.core.ImageReaderProxy createIsolatedReader(int,int,int,int)
    public static androidx.camera.core.ImageReaderProxy createSharedReader(java.lang.String,int,int,int,int,java.util.concurrent.Executor)
    public static void clearSharedReaders()
    public static final java.lang.String TAG
androidx.appcompat.app.AlertController$2:
    public void onScrollChange(androidx.core.widget.NestedScrollView,int,int,int,int)
    public final synthetic androidx.appcompat.app.AlertController this$0
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$FrameInterpolator:
    public int updateFrames(android.graphics.drawable.AnimationDrawable,boolean)
    public int getTotalDuration()
androidx.interpolator.view.animation.LookupTableInterpolator
com.downloader.core.DefaultExecutorSupplier:
    public com.downloader.core.DownloadExecutor forDownloadTasks()
    public java.util.concurrent.Executor forBackgroundTasks()
    public java.util.concurrent.Executor forMainThreadTasks()
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompat:
    public static androidx.camera.camera2.impl.compat.params.OutputConfigurationCompat wrap(java.lang.Object)
    public java.lang.String getPhysicalCameraId()
    public android.view.Surface getSurface()
    public java.lang.Object unwrap()
androidx.appcompat.widget.DrawableUtils:
    public static void fixVectorDrawableTinting(android.graphics.drawable.Drawable)
    public static final android.graphics.Rect INSETS_NONE
    public static java.lang.Class sInsetsClazz
androidx.core.app.ComponentActivity:
    public androidx.collection.SimpleArrayMap mExtraDataMap
androidx.camera.core.impl.utils.futures.ListFuture:
    public void setOneValue(int,java.util.concurrent.Future)
    public java.util.List get()
    public java.util.List get1()
    public final void init(java.util.concurrent.Executor)
    public final void callAllGets()
androidx.core.widget.NestedScrollView$SavedState$1:
    public androidx.core.widget.NestedScrollView$SavedState createFromParcel(android.os.Parcel)
    public androidx.core.widget.NestedScrollView$SavedState[] newArray(int)
androidx.activity.OnBackPressedCallback:
    public final void setEnabled(boolean)
    public final boolean isEnabled()
    public final void remove()
    public abstract void handleOnBackPressed()
    public void addCancellable(androidx.activity.Cancellable)
    public void removeCancellable(androidx.activity.Cancellable)
android.support.v4.media.session.PlaybackStateCompat:
    public void <init>(int,long,long,float,long,int,java.lang.CharSequence,long,java.util.List,long,android.os.Bundle)
    public static android.support.v4.media.session.PlaybackStateCompat fromPlaybackState(java.lang.Object)
    public java.lang.Object mStateObj
androidx.camera.camera2.impl.CameraAvailabilityRegistry:
    public androidx.camera.core.Observable getAvailableCameraCount()
    public java.lang.StringBuilder mDebugString
androidx.savedstate.Recreator:
    public final void reflectiveNew(java.lang.String)
io.github.prabhuomkar.pytorchandroid.models.Task:
    public java.lang.String getName()
    public java.lang.String getDescription()
    public java.lang.String getImageLink()
androidx.core.view.NestedScrollingChild
androidx.appcompat.widget.Toolbar$SavedState$1:
    public androidx.appcompat.widget.Toolbar$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)
    public androidx.appcompat.widget.Toolbar$SavedState createFromParcel(android.os.Parcel)
    public androidx.appcompat.widget.Toolbar$SavedState[] newArray(int)
androidx.savedstate.SavedStateRegistryController:
    public static androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)
    public androidx.savedstate.SavedStateRegistry getSavedStateRegistry()
androidx.versionedparcelable.VersionedParcelParcel:
    public void writeByteArray(byte[])
    public void writeInt(int)
    public void writeString(java.lang.String)
    public void writeParcelable(android.os.Parcelable)
    public void writeBoolean(boolean)
    public void writeCharSequence(java.lang.CharSequence)
    public java.lang.CharSequence readCharSequence()
    public int readInt()
    public java.lang.String readString()
    public byte[] readByteArray()
    public android.os.Parcelable readParcelable()
    public boolean readBoolean()
androidx.camera.core.impl.utils.executor.SequentialExecutor$1:
    public final synthetic androidx.camera.core.impl.utils.executor.SequentialExecutor this$0
androidx.collection.ArrayMap:
    public boolean retainAll(java.util.Collection)
androidx.camera.core.SettableImageProxyBundle
androidx.appcompat.app.AppCompatDelegateImpl$5:
    public void onAttachedFromWindow()
    public void onDetachedFromWindow()
androidx.camera.core.impl.utils.executor.HandlerScheduledExecutorService$1:
    public java.util.concurrent.ScheduledExecutorService initialValue()
androidx.recyclerview.widget.RecyclerView$OnScrollListener:
    public void onScrollStateChanged()
androidx.core.widget.TextViewCompat$OreoCallback:
    public final void recomputeProcessTextMenuItems(android.view.Menu)
    public final java.util.List getSupportedActivities(android.content.Context,android.content.pm.PackageManager)
    public final boolean isSupportedActivity(android.content.pm.ResolveInfo,android.content.Context)
    public final android.content.Intent createProcessTextIntentForResolveInfo(android.content.pm.ResolveInfo,android.widget.TextView)
    public final boolean isEditable(android.widget.TextView)
    public final android.content.Intent createProcessTextIntent()
androidx.camera.core.ImageAnalysis:
    public void setAnalyzer(java.util.concurrent.Executor,androidx.camera.core.ImageAnalysis$Analyzer)
    public final void tryUpdateRelativeRotation(java.lang.String)
    public final androidx.camera.core.ImageAnalysisConfig$Builder mUseCaseConfigBuilder
androidx.recyclerview.widget.RecyclerView$5:
    public void addView(android.view.View,int)
    public int indexOfChild(android.view.View)
    public void removeAllViews()
    public androidx.recyclerview.widget.RecyclerView$ViewHolder getChildViewHolder(android.view.View)
    public void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)
    public void detachViewFromParent(int)
    public void onEnteredHiddenState(android.view.View)
    public void onLeftHiddenState(android.view.View)
androidx.camera.camera2.impl.ImageCaptureConfigProvider:
    public androidx.camera.core.ImageCaptureConfig getConfig(androidx.camera.core.CameraX$LensFacing)
androidx.camera.core.AndroidImageReaderProxy:
    public synchronized int getImageFormat()
    public synchronized void setOnImageAvailableListener(androidx.camera.core.ImageReaderProxy$OnImageAvailableListener,android.os.Handler)
androidx.appcompat.view.ContextThemeWrapper:
    public void <init>(android.content.Context,android.content.res.Resources$Theme)
    public int getThemeResId()
    public void onApplyThemeResource(android.content.res.Resources$Theme,int)
    public final android.content.res.Resources getResourcesInternal()
    public android.content.res.Configuration mOverrideConfiguration
androidx.appcompat.widget.AppCompatDrawableManager$1:
    public android.graphics.drawable.Drawable createDrawableFor(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)
    public boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)
    public boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)
    public android.graphics.PorterDuff$Mode getTintModeForDrawableRes(int)
    public final android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)
    public final android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context)
    public final android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)
    public final android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)
androidx.camera.core.UseCaseGroup:
    public boolean isActive()
androidx.camera.core.ImageCapture:
    public final androidx.camera.core.CaptureBundle getCaptureBundle(androidx.camera.core.CaptureBundle)
    public final java.util.concurrent.ExecutorService mExecutor
    public final androidx.camera.core.ImageCapture$CaptureCallbackChecker mSessionCallbackChecker
    public final androidx.camera.core.CaptureBundle mCaptureBundle
    public final int mMaxCaptureStages
    public final androidx.camera.core.CaptureProcessor mCaptureProcessor
    public androidx.camera.core.CameraCaptureCallback mMetadataMatchingCaptureCallback
    public androidx.camera.core.ImageCaptureConfig mConfig
    public androidx.camera.core.FlashMode mFlashMode
    public static final androidx.camera.core.ImageCapture$Metadata EMPTY_METADATA
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatBaseImpl$OutputConfigurationParamsApi21:
    public static android.util.Size getSurfaceSize(android.view.Surface)
    public static int getSurfaceFormat(android.view.Surface)
    public static int getSurfaceGenerationId(android.view.Surface)
com.downloader.internal.DownloadRequestQueue:
    public void cancel(java.lang.Object)
    public void addRequest(com.downloader.request.DownloadRequest)
    public void finish(com.downloader.request.DownloadRequest)
    public final int getSequenceNumber()
androidx.collection.SparseArrayCompat:
    public void clear()
androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraBinderRequestResultReceiver:
    public java.lang.ref.WeakReference mMediaControllerImpl
androidx.core.util.DebugUtils
io.github.prabhuomkar.pytorchandroid.helpers.FragmentHelper
android.support.v4.media.session.MediaControllerCompat$Callback$MessageHandler
androidx.camera.camera2.impl.CaptureSession$1:
    public final synthetic androidx.camera.camera2.impl.CaptureSession this$0
androidx.camera.camera2.impl.ImageCaptureOptionUnpacker:
    public androidx.camera.core.DeviceProperties mDeviceProperties
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition:
    public void <init>()
android.support.v4.media.session.PlaybackStateCompatApi21
androidx.camera.core.AutoValue_SurfaceConfig:
    public androidx.camera.core.SurfaceConfig$ConfigType getConfigType()
    public androidx.camera.core.SurfaceConfig$ConfigSize getConfigSize()
androidx.collection.LongSparseArray:
    public void <init>(int)
    public java.lang.Object get(long)
    public void delete(long)
    public void remove(long)
    public void removeAt(int)
    public int size()
    public long keyAt(int)
    public java.lang.Object valueAt(int)
androidx.core.graphics.drawable.WrappedDrawableState:
    public boolean canConstantState()
androidx.core.view.ActionProvider$SubUiVisibilityListener
org.pytorch.NativePeer:
    public final com.facebook.jni.HybridData mHybridData
androidx.appcompat.view.menu.MenuAdapter:
    public void setForceShowIcon(boolean)
    public androidx.appcompat.view.menu.MenuBuilder getAdapterMenu()
androidx.camera.core.UseCaseAttachState$AttachStateFilter
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState:
    public void drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter,android.graphics.Rect)
    public boolean hasTranslucentRoot()
    public android.graphics.Paint getPaint(android.graphics.ColorFilter)
    public void createCachedBitmapIfNeeded(int,int)
    public boolean canReuseBitmap(int,int)
    public boolean canReuseCache()
    public void updateCacheStates()
    public boolean onStateChanged(int[])
androidx.camera.core.UseCaseGroup$StateChangeListener:
    public abstract void onGroupActive(androidx.camera.core.UseCaseGroup)
    public abstract void onGroupInactive(androidx.camera.core.UseCaseGroup)
androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener:
    public abstract boolean onMenuItemClick(android.view.MenuItem)
androidx.appcompat.view.SupportMenuInflater:
    public java.lang.Object getRealOwner()
androidx.appcompat.widget.TintTypedArray:
    public static androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,int,int[])
    public float getFloat(int,float)
    public int getColor(int,int)
    public int getInteger(int,int)
    public java.lang.CharSequence[] getTextArray(int)
    public void recycle()
androidx.camera.core.SurfaceConfig$ConfigSize:
    public int getId()
androidx.camera.core.FixedSizeSurfaceTexture:
    public boolean mIsSuperReleased
androidx.core.graphics.PathParser$PathDataNode:
    public static void addCommand(android.graphics.Path,float[],char,char,float[])
    public static void arcToBezier(android.graphics.Path,double,double,double,double,double,double,double,double,double)
    public void interpolatePathDataNode(androidx.core.graphics.PathParser$PathDataNode,androidx.core.graphics.PathParser$PathDataNode,float)
android.support.v4.media.MediaDescriptionCompatApi23
androidx.appcompat.view.menu.MenuDialogHelper:
    public void show(android.os.IBinder)
    public void dismiss()
    public androidx.appcompat.view.menu.MenuPresenter$Callback mPresenterCallback
org.pytorch.INativePeer
androidx.camera.core.ImageCapture$OnImageCapturedListener
androidx.lifecycle.Lifecycling:
    public static java.lang.reflect.Constructor generatedConstructor(java.lang.Class)
    public static int resolveObserverCallbackType(java.lang.Class)
    public static boolean isLifecycleParent(java.lang.Class)
androidx.lifecycle.FullLifecycleObserverAdapter$1
androidx.appcompat.app.TwilightCalculator:
    public static androidx.appcompat.app.TwilightCalculator getInstance()
androidx.appcompat.graphics.drawable.StateListDrawable:
    public int[] extractStateSet(android.util.AttributeSet)
androidx.camera.core.CameraX:
    public static varargs void bindToLifecycle(androidx.lifecycle.LifecycleOwner,androidx.camera.core.UseCase[])
    public static varargs void unbind(androidx.camera.core.UseCase[])
    public static java.lang.String getCameraWithLensFacing(androidx.camera.core.CameraX$LensFacing)
    public static void postError(androidx.camera.core.CameraX$ErrorCode,java.lang.String)
    public static void init(android.content.Context,androidx.camera.core.AppConfig)
    public static boolean isInitialized()
    public static void attach(java.lang.String,androidx.camera.core.UseCase)
    public static void detach(java.lang.String,java.util.List)
    public static varargs void calculateSuggestedResolutions(androidx.lifecycle.LifecycleOwner,androidx.camera.core.UseCase[])
    public final androidx.camera.core.CameraDeviceSurfaceManager getCameraDeviceSurfaceManager()
    public final androidx.camera.core.UseCaseConfigFactory getDefaultConfigFactory()
    public final void initInternal(android.content.Context,androidx.camera.core.AppConfig)
    public final androidx.camera.core.UseCaseGroupLifecycleController getOrCreateUseCaseGroup(androidx.lifecycle.LifecycleOwner)
    public final androidx.camera.core.CameraRepository getCameraRepository()
    public android.content.Context mContext
androidx.core.app.ActivityCompat$PermissionCompatDelegate:
    public abstract boolean requestPermissions(android.app.Activity,java.lang.String[],int)
    public abstract boolean onActivityResult(android.app.Activity,int,int,android.content.Intent)
androidx.core.widget.ImageViewCompat
androidx.appcompat.widget.AppCompatTextHelper:
    public void setTypefaceByCallback(android.graphics.Typeface)
    public void runOnUiThread(java.lang.Runnable)
    public void setAllCaps(boolean)
    public void onSetCompoundDrawables()
    public void onLayout()
    public void setTextSize(int,float)
    public void autoSizeText()
    public int getAutoSizeTextType()
    public int getAutoSizeStepGranularity()
    public int getAutoSizeMinTextSize()
    public int getAutoSizeMaxTextSize()
    public int[] getAutoSizeTextAvailableSizes()
    public android.content.res.ColorStateList getCompoundDrawableTintList()
    public void setCompoundDrawableTintList(android.content.res.ColorStateList)
    public android.graphics.PorterDuff$Mode getCompoundDrawableTintMode()
    public void setCompoundDrawableTintMode(android.graphics.PorterDuff$Mode)
    public final void setTextSizeInternal(int,float)
    public final void setCompoundTints()
    public final void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
androidx.camera.core.MutableOptionsBundle:
    public void insertOption(androidx.camera.core.Config$Option,java.lang.Object)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath:
    public void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)
    public final android.graphics.Paint$Cap getStrokeLineCap(int,android.graphics.Paint$Cap)
    public final android.graphics.Paint$Join getStrokeLineJoin(int,android.graphics.Paint$Join)
    public final void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)
androidx.appcompat.widget.TooltipCompatHandler:
    public static void setTooltipText(android.view.View,java.lang.CharSequence)
    public final void scheduleShow()
    public final void cancelPendingShow()
    public final boolean updateAnchorPos(android.view.MotionEvent)
androidx.constraintlayout.solver.widgets.Analyzer
androidx.appcompat.graphics.drawable.DrawableContainer:
    public boolean onStateChange(int[])
    public int getCurrentIndex()
    public final void updateDensity(android.content.res.Resources)
    public void applyTheme(android.content.res.Resources$Theme)
    public final boolean needsMirroring()
    public int mLastIndex
androidx.constraintlayout.solver.widgets.Snapshot:
    public void updateFrom(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public void applyTo(androidx.constraintlayout.solver.widgets.ConstraintWidget)
androidx.camera.core.AutoValue_Preview_PreviewOutput:
    public android.graphics.SurfaceTexture getSurfaceTexture()
    public android.util.Size getTextureSize()
    public int getRotationDegrees()
androidx.core.os.HandlerCompat
androidx.constraintlayout.solver.widgets.ResolutionNode:
    public void addDependent(androidx.constraintlayout.solver.widgets.ResolutionNode)
    public void reset()
androidx.appcompat.widget.ScrollingTabContainerView$TabClickListener
org.pytorch.Tensor:
    public static java.nio.FloatBuffer allocateFloatBuffer(int)
    public static org.pytorch.Tensor fromBlob(java.nio.FloatBuffer,long[])
    public void <init>(long[])
    public static long numel(long[])
    public static void checkShapeAndDataCapacityConsistency(int,long[])
    public float[] getDataAsFloatArray()
androidx.appcompat.widget.LinearLayoutCompat:
    public void drawDividersVertical(android.graphics.Canvas)
    public void drawDividersHorizontal(android.graphics.Canvas)
    public android.view.View getVirtualChildAt(int)
    public void measureVertical(int,int)
    public void measureHorizontal(int,int)
    public int getChildrenSkipCount()
    public int measureNullChild()
    public int getLocationOffset()
    public int getNextLocationOffset()
    public void layoutVertical(int,int,int,int)
    public void layoutHorizontal(int,int,int,int)
    public final void setChildFrame(android.view.View,int,int,int,int)
androidx.recyclerview.widget.RecyclerView$4:
    public void processPersistent(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public void unused(androidx.recyclerview.widget.RecyclerView$ViewHolder)
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat:
    public void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState cloneConstantState()
    public final boolean selectTransition(int)
    public final void updateStateFromTypedArray(android.content.res.TypedArray)
    public final void init()
    public final void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public final int parseTransition(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public final int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public static final java.lang.String LOGTAG
com.downloader.PRDownloader
android.support.v4.media.MediaBrowserCompat$MediaItem$1:
    public android.support.v4.media.MediaBrowserCompat$MediaItem createFromParcel(android.os.Parcel)
    public android.support.v4.media.MediaBrowserCompat$MediaItem[] newArray(int)
androidx.core.graphics.PathParser$ExtractFloatResult
androidx.core.provider.SelfDestructiveThread:
    public void postAndReply(java.util.concurrent.Callable,androidx.core.provider.SelfDestructiveThread$ReplyCallback)
android.support.v4.media.session.MediaControllerCompatApi21
androidx.appcompat.widget.ContentFrameLayout:
    public void setDecorPadding(int,int,int,int)
androidx.appcompat.widget.AppCompatTextClassifierHelper:
    public void setTextClassifier(android.view.textclassifier.TextClassifier)
androidx.appcompat.app.TwilightManager:
    public static androidx.appcompat.app.TwilightManager getInstance(android.content.Context)
    public boolean isNight()
    public final android.location.Location getLastKnownLocation()
    public final boolean isStateValid()
    public final void updateState(android.location.Location)
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatApi26Impl:
    public static androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatApi26Impl wrap(android.hardware.camera2.params.OutputConfiguration)
com.downloader.database.NoOpsDbHelper:
    public com.downloader.database.DownloadModel find()
    public void insert()
    public void updateProgress()
    public void remove()
    public java.util.List getUnwantedModels()
androidx.appcompat.widget.VectorEnabledTintResources:
    public void <init>(android.content.Context,android.content.res.Resources)
    public static boolean isCompatVectorFromResourcesEnabled()
    public static void <clinit>()
    public android.graphics.drawable.Drawable getDrawable(int)
    public final android.graphics.drawable.Drawable superGetDrawable(int)
    public final java.lang.ref.WeakReference mContextRef
    public static boolean sCompatVectorFromResourcesEnabled
androidx.constraintlayout.solver.widgets.Snapshot$Connection:
    public void updateFrom(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public void applyTo(androidx.constraintlayout.solver.widgets.ConstraintWidget)
androidx.collection.MapCollections$MapIterator:
    public java.util.Map$Entry next()
android.support.v4.media.MediaDescriptionCompatApi21$Builder:
    public static java.lang.Object newInstance()
    public static void setMediaId(java.lang.Object,java.lang.String)
    public static void setTitle(java.lang.Object,java.lang.CharSequence)
    public static void setSubtitle(java.lang.Object,java.lang.CharSequence)
    public static void setDescription(java.lang.Object,java.lang.CharSequence)
    public static void setIconBitmap(java.lang.Object,android.graphics.Bitmap)
    public static void setIconUri(java.lang.Object,android.net.Uri)
    public static void setExtras(java.lang.Object,android.os.Bundle)
    public static java.lang.Object build(java.lang.Object)
    public static java.lang.String getMediaId(java.lang.Object)
    public static java.lang.CharSequence getTitle(java.lang.Object)
    public static java.lang.CharSequence getSubtitle(java.lang.Object)
    public static java.lang.CharSequence getDescription(java.lang.Object)
    public static android.graphics.Bitmap getIconBitmap(java.lang.Object)
    public static android.net.Uri getIconUri(java.lang.Object)
    public static android.os.Bundle getExtras(java.lang.Object)
    public static void writeToParcel(java.lang.Object,android.os.Parcel,int)
    public static java.lang.Object fromParcel(android.os.Parcel)
    public static void setMediaUri(java.lang.Object,android.net.Uri)
    public static android.net.Uri getMediaUri(java.lang.Object)
    public static void writeToParcel1(java.lang.Object,android.os.Parcel,int)
    public static android.media.AudioAttributes getAudioAttributes(java.lang.Object)
    public static int getLegacyAudioStream(java.lang.Object)
    public static int toLegacyStreamType(android.media.AudioAttributes)
    public static java.lang.Object createCallback(android.support.v4.media.session.MediaControllerCompatApi21$Callback)
    public static java.lang.Object getDescription(java.lang.Object)
    public static long getQueueId(java.lang.Object)
    public static java.lang.String getAction(java.lang.Object)
    public static java.lang.CharSequence getName(java.lang.Object)
    public static int getIcon(java.lang.Object)
    public static android.os.Bundle getExtras1(java.lang.Object)
    public static int getState(java.lang.Object)
    public static long getPosition(java.lang.Object)
    public static long getBufferedPosition(java.lang.Object)
    public static float getPlaybackSpeed(java.lang.Object)
    public static long getActions(java.lang.Object)
    public static java.lang.CharSequence getErrorMessage(java.lang.Object)
    public static long getLastPositionUpdateTime(java.lang.Object)
    public static java.util.List getCustomActions(java.lang.Object)
    public static long getActiveQueueItemId(java.lang.Object)
    public static android.os.Bundle getExtras2(java.lang.Object)
    public static void flush(android.content.res.Resources)
    public static void flushLollipops(android.content.res.Resources)
    public static void flushMarshmallows(android.content.res.Resources)
    public static void flushNougats(android.content.res.Resources)
    public static androidx.camera.core.AppConfig create(android.content.Context)
    public static android.hardware.camera2.CameraCaptureSession$CaptureCallback createNoOpCallback()
    public static android.hardware.camera2.CameraCaptureSession$CaptureCallback createComboCallback(java.util.List)
    public static java.util.List getConfiguredSurfaces(java.util.List,java.util.Map)
    public static android.hardware.camera2.CaptureRequest buildWithoutTarget(androidx.camera.core.CaptureConfig,android.hardware.camera2.CameraDevice)
    public static void checkUseCaseLimitNotExceeded(java.util.List,java.util.List)
    public static android.hardware.camera2.CameraCaptureSession$StateCallback createNoOpCallback()
    public static android.hardware.camera2.CameraCaptureSession$StateCallback createComboCallback(java.util.List)
    public static android.hardware.camera2.CameraDevice$StateCallback createNoOpCallback()
    public static android.hardware.camera2.CameraDevice$StateCallback createComboCallback(java.util.List)
    public static int getRelativeImageRotation(int,int,boolean)
    public static int surfaceRotationToDegrees(int)
    public static androidx.camera.core.CaptureBundle singleDefaultCaptureBundle()
    public static varargs androidx.camera.core.CaptureBundle createCaptureBundle(androidx.camera.core.CaptureStage[])
    public static androidx.camera.core.CaptureBundle createCaptureBundle(java.util.List)
    public static androidx.camera.core.FixedSizeSurfaceTexture createDetachedSurfaceTexture(android.util.Size)
    public static androidx.camera.core.ImageProxy$PlaneProxy createPlaneProxy(int,int,byte[])
    public static androidx.camera.core.ImageReaderFormatRecommender$FormatCombo chooseCombo()
    public static boolean isAspectRatioValid(android.util.Rational)
    public static boolean isAspectRatioValid(android.util.Size,android.util.Rational)
    public static android.graphics.Rect computeCropRectFromAspectRatio(android.util.Size,android.util.Rational)
    public static boolean isCropAspectRatioHasEffect(android.util.Size,android.util.Rational)
    public static boolean isMainThread()
    public static java.util.concurrent.ScheduledExecutorService mainThreadExecutor()
    public static java.util.concurrent.Executor directExecutor()
    public static java.util.concurrent.Executor newSequentialExecutor(java.util.concurrent.Executor)
    public static boolean isSequentialExecutor(java.util.concurrent.Executor)
    public static java.util.concurrent.ScheduledExecutorService newHandlerExecutor(android.os.Handler)
    public static java.util.concurrent.Executor highPriorityExecutor()
    public static boolean determineGroups(androidx.constraintlayout.solver.widgets.ConstraintWidget,java.util.List,boolean)
    public static void invalidate(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup)
    public static void setConnection(androidx.constraintlayout.solver.widgets.ConstraintAnchor)
    public static void singleGroup(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer)
    public static void updateSizeDependentWidgets(androidx.constraintlayout.solver.widgets.ConstraintWidget,int,int)
    public static java.lang.String permissionToOp(java.lang.String)
    public static int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String)
    public static android.os.IBinder getBinder(android.os.Bundle,java.lang.String)
    public static android.os.IBinder getBinder1(android.os.Bundle,java.lang.String)
    public static boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent)
    public static void navigateUpTo(android.app.Activity,android.content.Intent)
    public static java.lang.String getParentActivityName(android.app.Activity)
    public static int checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String)
    public static android.content.res.ColorStateList inflate(android.content.res.Resources,int,android.content.res.Resources$Theme)
    public static android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public static android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])
    public static int modulateColorAlpha(int,float)
    public static androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)
    public static androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)
    public static int getType(android.content.res.TypedArray,int)
    public static androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry readFont(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)
    public static android.graphics.Shader createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public static androidx.core.content.res.GradientColorInflaterCompat$ColorStops inflateChildElements(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public static androidx.core.content.res.GradientColorInflaterCompat$ColorStops checkColors(androidx.core.content.res.GradientColorInflaterCompat$ColorStops,int,int,boolean,int)
    public static android.graphics.Shader$TileMode parseTileMode(int)
    public static android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)
    public static android.graphics.Typeface getFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback)
    public static android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean)
    public static android.graphics.Typeface loadFont(android.content.Context,android.content.res.Resources,android.util.TypedValue,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean)
    public static boolean getNamedBoolean(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,boolean)
    public static android.content.res.ColorStateList getNamedColorStateList(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme,java.lang.String,int)
    public static android.content.res.ColorStateList getNamedColorStateListFromInt(android.util.TypedValue)
    public static int getNamedResourceId(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)
    public static android.util.TypedValue peekNamedValue(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)
    public static void updateNodes(androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[])
    public static int nextStart(java.lang.String,int)
    public static void addNode(java.util.ArrayList,char,float[])
    public static float[] getFloats(java.lang.String)
    public static void extract(java.lang.String,int,androidx.core.graphics.PathParser$ExtractFloatResult)
    public static java.nio.ByteBuffer mmap(java.io.File)
    public static java.nio.ByteBuffer copyToDirectBuffer(android.content.Context,android.content.res.Resources,int)
    public static void closeQuietly(java.io.Closeable)
    public static void jumpToCurrentState(android.graphics.drawable.Drawable)
    public static void setAutoMirrored(android.graphics.drawable.Drawable,boolean)
    public static boolean isAutoMirrored(android.graphics.drawable.Drawable)
    public static void setHotspot(android.graphics.drawable.Drawable,float,float)
    public static void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)
    public static int getAlpha(android.graphics.drawable.Drawable)
    public static void applyTheme(android.graphics.drawable.Drawable,android.content.res.Resources$Theme)
    public static boolean canApplyTheme(android.graphics.drawable.Drawable)
    public static android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable)
    public static void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public static boolean setLayoutDirection(android.graphics.drawable.Drawable,int)
    public static void beginSection(java.lang.String)
    public static void endSection()
    public static varargs int hash(java.lang.Object[])
    public static void checkState(boolean)
    public static int getAbsoluteGravity(int,int)
    public static void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)
    public static void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)
    public static int getMarginStart(android.view.ViewGroup$MarginLayoutParams)
    public static int getMarginEnd(android.view.ViewGroup$MarginLayoutParams)
    public static android.view.MenuItem setActionProvider(android.view.MenuItem,androidx.core.view.ActionProvider)
    public static void setContentDescription(android.view.MenuItem,java.lang.CharSequence)
    public static void setTooltipText(android.view.MenuItem,java.lang.CharSequence)
    public static void setNumericShortcut(android.view.MenuItem,char,int)
    public static void setAlphabeticShortcut(android.view.MenuItem,char,int)
    public static void setIconTintList(android.view.MenuItem,android.content.res.ColorStateList)
    public static void setIconTintMode(android.view.MenuItem,android.graphics.PorterDuff$Mode)
    public static boolean isFromSource(android.view.MotionEvent,int)
    public static boolean isTransitionGroup(android.view.ViewGroup)
    public static boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int,int)
    public static void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int,int)
    public static void onStopNestedScroll(android.view.ViewParent,android.view.View,int)
    public static void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int,int,int[])
    public static void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[],int)
    public static boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean)
    public static boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float)
    public static void setContentChangeTypes(android.view.accessibility.AccessibilityEvent,int)
    public static int getContentChangeTypes(android.view.accessibility.AccessibilityEvent)
    public static void setMaxScrollX(android.view.accessibility.AccessibilityRecord,int)
    public static void setMaxScrollY(android.view.accessibility.AccessibilityRecord,int)
    public static void setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList)
    public static void setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode)
    public static void onPull(android.widget.EdgeEffect,float,float)
    public static android.content.res.ColorStateList getImageTintList(android.widget.ImageView)
    public static void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)
    public static android.graphics.PorterDuff$Mode getImageTintMode(android.widget.ImageView)
    public static void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)
    public static void scrollListBy(android.widget.ListView,int)
    public static void showAsDropDown(android.widget.PopupWindow,android.view.View,int,int,int)
    public static int getFirstBaselineToTopHeight(android.widget.TextView)
    public static int getLastBaselineToBottomHeight(android.widget.TextView)
    public static void setTextMetricsParams(android.widget.TextView,androidx.core.text.PrecomputedTextCompat$Params)
    public static android.text.TextDirectionHeuristic getTextDirectionHeuristic(android.widget.TextView)
    public static int getTextDirection(android.text.TextDirectionHeuristic)
    public static void setCompoundDrawableTintList(android.widget.TextView,android.content.res.ColorStateList)
    public static void setCompoundDrawableTintMode(android.widget.TextView,android.graphics.PorterDuff$Mode)
    public static android.view.animation.Interpolator loadInterpolator(android.content.Context,int)
    public static android.view.animation.Interpolator createInterpolatorFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser)
    public static android.animation.Animator loadAnimator(android.content.Context,int)
    public static android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int)
    public static android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float)
    public static void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser)
    public static void setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser)
    public static void setupPathMotion(android.graphics.Path,android.animation.ObjectAnimator,float,java.lang.String,java.lang.String)
    public static android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,float)
    public static android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)
    public static int inferValueTypeOfKeyframe(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser)
    public static int inferValueTypeFromValues(android.content.res.TypedArray,int,int)
    public static android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int)
    public static void distributeKeyframes(android.animation.Keyframe[],float,int,int)
    public static android.animation.Keyframe loadKeyframe(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int,org.xmlpull.v1.XmlPullParser)
    public static android.animation.ObjectAnimator loadObjectAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,float,org.xmlpull.v1.XmlPullParser)
    public static com.downloader.request.DownloadRequestBuilder download(java.lang.String,java.lang.String,java.lang.String)
    public static void cancel(java.lang.Object)
    public static void cleanUp(int)
    public static void deleteTempFileAndDatabaseEntryInBackground(java.lang.String,int)
    public static void deleteUnwantedModelsAndTempFiles(int)
    public static int getUniqueId(java.lang.String,java.lang.String,java.lang.String)
    public static boolean isRedirection(int)
    public static androidx.camera.core.Preview buildPreview(io.github.prabhuomkar.pytorchandroid.playground.AutoFitTextureView)
    public static androidx.camera.core.ImageAnalysis buildImageAnalysis()
    public static java.util.ArrayList getModelListForTask(java.lang.String)
    public static int downloadModel(android.content.Context,android.view.View,java.lang.String,java.lang.String,java.lang.String)
    public static void cancelDownload(java.lang.String)
    public static int getImageResourceId(android.content.Context,java.lang.String)
    public static boolean checkIfFileExists(java.lang.String)
    public static void setCustomActionBar(androidx.appcompat.app.AppCompatActivity)
    public static java.lang.reflect.Method sGetIBinderMethod
    public static boolean sGetIBinderMethodFetched
    public static java.lang.reflect.Field sLayoutInflaterFactory2Field
    public static boolean sCheckedField
androidx.cursoradapter.widget.ResourceCursorAdapter:
    public android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)
androidx.camera.core.impl.utils.executor.CameraXExecutors
androidx.constraintlayout.solver.widgets.Barrier:
    public void setBarrierType(int)
    public void setAllowsGoneWidget(boolean)
androidx.core.widget.ListViewAutoScrollHelper:
    public void scrollTargetBy(int,int)
    public boolean canTargetScrollHorizontally(int)
    public boolean canTargetScrollVertically(int)
androidx.arch.core.executor.ArchTaskExecutor:
    public static void <clinit>()
    public void executeOnDiskIO(java.lang.Runnable)
    public static final java.util.concurrent.Executor sMainThreadExecutor
    public static final java.util.concurrent.Executor sIOThreadExecutor
androidx.activity.ComponentActivity$NonConfigurationInstances:
    public java.lang.Object custom
androidx.camera.camera2.impl.compat.CameraDeviceCompatBaseImpl:
    public static void checkPhysicalCameraIdValid(android.hardware.camera2.CameraDevice,java.util.List)
    public void createBaseCaptureSession(android.hardware.camera2.CameraDevice,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)
androidx.camera.camera2.impl.UseCaseSurfaceOccupancyManager
androidx.camera.core.QueuedImageReaderProxy:
    public int getImageFormat()
    public synchronized void setOnImageAvailableListener(androidx.camera.core.ImageReaderProxy$OnImageAvailableListener,android.os.Handler)
androidx.appcompat.widget.AppCompatPopupWindow:
    public static void <clinit>()
    public final void init(android.content.Context,android.util.AttributeSet,int,int)
    public final void setSupportOverlapAnchor(boolean)
    public boolean mOverlapAnchor
    public static final boolean COMPAT_OVERLAP_ANCHOR
com.downloader.request.DownloadRequest:
    public static synthetic com.downloader.OnDownloadListener access$000(com.downloader.request.DownloadRequest)
    public static synthetic com.downloader.OnStartOrResumeListener access$200(com.downloader.request.DownloadRequest)
    public static synthetic com.downloader.OnPauseListener access$300(com.downloader.request.DownloadRequest)
    public static synthetic com.downloader.OnCancelListener access$400(com.downloader.request.DownloadRequest)
    public com.downloader.Priority getPriority()
    public java.lang.Object getTag()
    public java.lang.String getUrl()
    public void setUrl(java.lang.String)
    public java.lang.String getDirPath()
    public java.lang.String getFileName()
    public int getSequenceNumber()
    public void setSequenceNumber(int)
    public java.util.HashMap getHeaders()
    public void setFuture(java.util.concurrent.Future)
    public long getDownloadedBytes()
    public void setDownloadedBytes(long)
    public long getTotalBytes()
    public void setTotalBytes(long)
    public int getReadTimeout()
    public int getConnectTimeout()
    public java.lang.String getUserAgent()
    public int getDownloadId()
    public com.downloader.Status getStatus()
    public void setStatus(com.downloader.Status)
    public com.downloader.OnProgressListener getOnProgressListener()
    public com.downloader.request.DownloadRequest setOnProgressListener(com.downloader.OnProgressListener)
    public com.downloader.request.DownloadRequest setOnCancelListener(com.downloader.OnCancelListener)
    public int start(com.downloader.OnDownloadListener)
    public void deliverSuccess()
    public void deliverPauseEvent()
    public void cancel()
    public final void deliverCancelEvent()
    public final void finish()
    public final void destroy()
    public final int getReadTimeoutFromConfig()
    public final int getConnectTimeoutFromConfig()
androidx.camera.core.impl.utils.executor.HandlerScheduledExecutorService$2:
    public java.lang.Void call()
    public final synthetic androidx.camera.core.impl.utils.executor.HandlerScheduledExecutorService this$0
io.github.prabhuomkar.pytorchandroid.ui.fragments.TaskFragment:
    public static io.github.prabhuomkar.pytorchandroid.ui.fragments.TaskFragment newInstance(io.github.prabhuomkar.pytorchandroid.models.Task)
androidx.camera.core.VideoCapture$Metadata
androidx.core.content.res.ResourcesCompat$FontCallback:
    public abstract void onFontRetrievalFailed(int)
androidx.recyclerview.widget.RecyclerView$RecyclerViewDataObserver:
    public final synthetic androidx.recyclerview.widget.RecyclerView this$0
androidx.camera.core.VideoCapture$Defaults:
    public androidx.camera.core.VideoCaptureConfig getConfig()
    public static final android.os.Handler DEFAULT_HANDLER
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState:
    public void setupAnimatorSet()
androidx.camera.core.AutoValue_SurfaceSizeDefinition:
    public android.util.Size getAnalysisSize()
    public android.util.Size getPreviewSize()
    public android.util.Size getRecordSize()
androidx.core.view.accessibility.AccessibilityViewCommand$CommandArguments:
    public void setBundle(android.os.Bundle)
    public android.os.Bundle mBundle
    public static final android.os.Bundle sEmptyBundle
com.downloader.httpclient.DefaultHttpClient:
    public com.downloader.httpclient.HttpClient clone()
    public java.io.InputStream getInputStream()
    public long getContentLength()
    public java.lang.String getResponseHeader(java.lang.String)
    public void close()
    public java.util.Map getHeaderFields()
    public java.io.InputStream getErrorStream()
    public final void addHeaders(com.downloader.request.DownloadRequest)
androidx.appcompat.widget.SearchView$SavedState$1:
    public androidx.appcompat.widget.SearchView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)
    public androidx.appcompat.widget.SearchView$SavedState createFromParcel(android.os.Parcel)
    public androidx.appcompat.widget.SearchView$SavedState[] newArray(int)
androidx.recyclerview.widget.RecyclerView$ItemAnimatorRestoreListener:
    public void onAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder)
androidx.constraintlayout.solver.Pools$Pool
androidx.camera.camera2.impl.Camera2LensFacingCameraIdFilter$1
androidx.lifecycle.LifecycleRegistry$1
androidx.appcompat.widget.TintResources:
    public void <init>(android.content.Context,android.content.res.Resources)
    public android.graphics.drawable.Drawable getDrawable(int)
    public final java.lang.ref.WeakReference mContextRef
androidx.camera.core.MetadataImageReader:
    public int getImageFormat()
    public androidx.camera.core.CameraCaptureCallback getCameraCaptureCallback()
    public final void init(java.util.concurrent.Executor)
androidx.recyclerview.widget.RecyclerView$Recycler:
    public void setViewCacheSize(int)
    public java.util.List getScrapList()
    public boolean validateViewHolderForOffsetPosition(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public android.view.View getViewForPosition(int)
    public android.view.View getViewForPosition(int,boolean)
    public void quickRecycleScrapView(android.view.View)
    public int getScrapCount()
    public android.view.View getScrapViewAt(int)
    public void clearScrap()
    public androidx.recyclerview.widget.RecyclerView$ViewHolder getChangedScrapViewForPosition(int)
    public androidx.recyclerview.widget.RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int,boolean)
    public androidx.recyclerview.widget.RecyclerView$ViewHolder getScrapOrCachedViewForId(long,int,boolean)
    public void dispatchViewRecycled(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public void onAdapterChanged(androidx.recyclerview.widget.RecyclerView$Adapter,androidx.recyclerview.widget.RecyclerView$Adapter,boolean)
    public void offsetPositionRecordsForMove(int,int)
    public void offsetPositionRecordsForInsert(int,int)
    public void offsetPositionRecordsForRemove(int,int,boolean)
    public void setViewCacheExtension(androidx.recyclerview.widget.RecyclerView$ViewCacheExtension)
    public void setRecycledViewPool(androidx.recyclerview.widget.RecyclerView$RecycledViewPool)
    public void viewRangeUpdate(int,int)
    public void markKnownViewsInvalid()
    public void clearOldPositions()
    public void markItemDecorInsetsDirty()
    public final boolean tryBindViewHolderByDeadline(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,long)
    public final void attachAccessibilityDelegateOnBind(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public final void invalidateDisplayListInt(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public androidx.recyclerview.widget.RecyclerView$ViewCacheExtension mViewCacheExtension
androidx.camera.core.impl.LiveDataObservable$LiveDataObserverAdapter:
    public void disable()
    public void onChanged(androidx.camera.core.impl.LiveDataObservable$Result)
io.github.prabhuomkar.pytorchandroid.ui.adapters.TaskListAdapter:
    public io.github.prabhuomkar.pytorchandroid.ui.adapters.TaskListAdapter$TaskView onCreateViewHolder(android.view.ViewGroup)
    public void onBindViewHolder(io.github.prabhuomkar.pytorchandroid.ui.adapters.TaskListAdapter$TaskView,int)
androidx.recyclerview.widget.RecyclerView$OnChildAttachStateChangeListener
androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo:
    public android.widget.ListView getListView()
androidx.loader.app.LoaderManagerImpl$LoaderViewModel:
    public static androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore)
    public void markForRedelivery()
    public void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
    public boolean mCreatingLoader
androidx.constraintlayout.solver.widgets.WidgetContainer:
    public void add(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public void remove(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer getRootConstraintContainer()
    public void removeAllChildren()
androidx.appcompat.widget.ActionMenuView:
    public boolean isOverflowReserved()
    public androidx.appcompat.widget.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet)
    public androidx.appcompat.widget.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams()
    public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter$Callback,androidx.appcompat.view.menu.MenuBuilder$Callback)
    public androidx.appcompat.view.menu.MenuBuilder peekMenu()
    public boolean showOverflowMenu()
    public boolean hideOverflowMenu()
    public boolean isOverflowMenuShowing()
    public boolean isOverflowMenuShowPending()
    public void dismissPopupMenus()
    public final void onMeasureExactFormat(int,int)
androidx.recyclerview.widget.ViewInfoStore:
    public void clear()
    public androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo popFromPreLayout(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo popFromPostLayout(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public void addToOldChangeHolders(long,androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public void addToAppearedInPreLayoutHolders(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public boolean isInPreLayout(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public androidx.recyclerview.widget.RecyclerView$ViewHolder getFromOldChangeHolders(long)
    public void process(androidx.recyclerview.widget.ViewInfoStore$ProcessCallback)
    public void onDetach()
    public void onViewDetached(androidx.recyclerview.widget.RecyclerView$ViewHolder)
androidx.lifecycle.ClassesInfoCache$CallbackInfo:
    public void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)
androidx.appcompat.widget.Toolbar$1:
    public boolean onMenuItemClick(android.view.MenuItem)
androidx.constraintlayout.solver.widgets.ResolutionAnchor:
    public void setType(int)
    public void update()
    public void setOpposite(androidx.constraintlayout.solver.widgets.ResolutionAnchor,float)
    public void setOpposite(androidx.constraintlayout.solver.widgets.ResolutionAnchor,int,androidx.constraintlayout.solver.widgets.ResolutionDimension)
    public float getResolvedValue()
    public float computedValue
    public float oppositeOffset
androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback:
    public abstract androidx.appcompat.view.menu.ShowableListMenu getPopup()
androidx.recyclerview.widget.SimpleItemAnimator:
    public boolean canReuseUpdatedViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public boolean animateDisappearance(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public boolean animateAppearance(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public boolean animatePersistence(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public abstract boolean animateRemove(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public abstract boolean animateAdd(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public abstract boolean animateChange(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,int,int)
    public final void dispatchRemoveFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public final void dispatchMoveFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public final void dispatchAddFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public final void dispatchChangeFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder,boolean)
    public final void dispatchRemoveStarting(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public final void dispatchMoveStarting(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public final void dispatchAddStarting(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public final void dispatchChangeStarting(androidx.recyclerview.widget.RecyclerView$ViewHolder,boolean)
    public void onRemoveStarting()
    public void onRemoveFinished()
    public void onAddStarting()
    public void onAddFinished()
    public void onMoveStarting()
    public void onMoveFinished()
    public void onChangeStarting()
    public void onChangeFinished()
androidx.core.provider.FontsContractCompat$5:
    public int compare(byte[],byte[])
androidx.core.view.accessibility.AccessibilityNodeProviderCompat:
    public java.lang.Object getProvider()
androidx.fragment.app.Fragment$OnStartEnterTransitionListener:
    public abstract void onStartEnterTransition()
    public abstract void startListening()
androidx.appcompat.app.AlertDialog$Builder:
    public void <init>(android.content.Context,int)
    public android.content.Context getContext()
    public androidx.appcompat.app.AlertDialog$Builder setTitle(java.lang.CharSequence)
    public androidx.appcompat.app.AlertDialog$Builder setCustomTitle(android.view.View)
    public androidx.appcompat.app.AlertDialog$Builder setMessage(java.lang.CharSequence)
    public androidx.appcompat.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)
    public androidx.appcompat.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setCancelable(boolean)
    public androidx.appcompat.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)
    public androidx.appcompat.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)
    public androidx.appcompat.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)
androidx.appcompat.widget.AppCompatTextHelper$ApplyTextViewCallback:
    public void onFontRetrievalFailed(int)
androidx.constraintlayout.widget.ConstraintHelper:
    public void updatePostLayout()
    public void updatePostMeasure()
androidx.camera.core.impl.utils.futures.ImmediateFuture$ImmediateFailedScheduledFuture:
    public int compareTo()
androidx.loader.app.LoaderManagerImpl$LoaderObserver:
    public boolean hasDeliveredData()
    public void reset()
    public void dump(java.lang.String,java.io.PrintWriter)
androidx.camera.core.SurfaceCombination:
    public boolean isSupported(java.util.List)
    public final java.util.List getElementsArrangements(int)
androidx.core.graphics.TypefaceCompatBaseImpl:
    public static java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)
    public static long getUniqueKey(android.graphics.Typeface)
    public androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry getFontFamily(android.graphics.Typeface)
    public final androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int)
    public final void addFontFamily(android.graphics.Typeface,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry)
androidx.camera.core.AutoValue_ImageReaderFormatRecommender_FormatCombo:
    public int imageCaptureFormat()
    public int imageAnalysisFormat()
androidx.fragment.app.FragmentManagerImpl$1:
    public void handleOnBackPressed()
androidx.appcompat.app.AppCompatViewInflater:
    public static android.content.Context themifyContext(android.content.Context,android.util.AttributeSet,boolean,boolean)
    public final android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean)
    public androidx.appcompat.widget.AppCompatTextView createTextView(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatImageView createImageView(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatButton createButton(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatEditText createEditText(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatSpinner createSpinner(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatImageButton createImageButton(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatCheckBox createCheckBox(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatRadioButton createRadioButton(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatCheckedTextView createCheckedTextView(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatAutoCompleteTextView createAutoCompleteTextView(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView createMultiAutoCompleteTextView(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatRatingBar createRatingBar(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatSeekBar createSeekBar(android.content.Context,android.util.AttributeSet)
    public androidx.appcompat.widget.AppCompatToggleButton createToggleButton(android.content.Context,android.util.AttributeSet)
    public android.view.View createView()
    public final android.view.View createViewFromTag(android.content.Context,java.lang.String,android.util.AttributeSet)
    public final void checkOnClickListener(android.view.View,android.util.AttributeSet)
androidx.recyclerview.widget.RecyclerView$ViewHolder:
    public void flagRemovedAndOffsetPosition(int,int,boolean)
    public void saveOldPosition()
    public final int getOldPosition()
    public final long getItemId()
    public final int getItemViewType()
    public void unScrap()
    public void clearTmpDetachFlag()
    public void setScrapContainer(androidx.recyclerview.widget.RecyclerView$Recycler,boolean)
    public boolean needsUpdate()
    public boolean isAdapterPositionUnknown()
    public void clearPayload()
    public void onEnteredHiddenState(androidx.recyclerview.widget.RecyclerView)
    public void onLeftHiddenState(androidx.recyclerview.widget.RecyclerView)
    public boolean shouldBeKeptAsChild()
    public boolean doesTransientStatePreventRecycling()
    public final void createPayloadsIfNeeded()
androidx.appcompat.widget.AppCompatEditText:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
androidx.constraintlayout.solver.widgets.Optimizer:
    public static void checkMatchParent(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public static void analyze(int,androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public static boolean applyChainOptimized(androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer,androidx.constraintlayout.solver.LinearSystem,int,int,androidx.constraintlayout.solver.widgets.ChainHead)
androidx.fragment.app.FragmentContainer:
    public androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)
androidx.camera.core.Preview$PreviewOutput:
    public static androidx.camera.core.Preview$PreviewOutput create(android.graphics.SurfaceTexture,android.util.Size,int)
    public abstract android.graphics.SurfaceTexture getSurfaceTexture()
    public abstract android.util.Size getTextureSize()
    public abstract int getRotationDegrees()
android.support.v4.os.ResultReceiver:
    public final boolean mLocal
androidx.lifecycle.LifecycleRegistry:
    public static androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State)
    public void markState(androidx.lifecycle.Lifecycle$State)
    public void setCurrentState(androidx.lifecycle.Lifecycle$State)
    public void removeObserver(androidx.lifecycle.LifecycleObserver)
    public androidx.lifecycle.Lifecycle$State getCurrentState()
    public final boolean isSynced()
    public final void pushParentState(androidx.lifecycle.Lifecycle$State)
    public final void forwardPass(androidx.lifecycle.LifecycleOwner)
    public final void backwardPass(androidx.lifecycle.LifecycleOwner)
androidx.camera.camera2.impl.CaptureCallbackConverter:
    public static android.hardware.camera2.CameraCaptureSession$CaptureCallback toCaptureCallback(androidx.camera.core.CameraCaptureCallback)
androidx.appcompat.widget.ActionBarContextView:
    public void closeMode()
    public boolean showOverflowMenu()
    public boolean isTitleOptional()
androidx.fragment.app.FragmentHostCallback:
    public void <init>(android.app.Activity,android.content.Context,android.os.Handler,int)
    public void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
    public boolean onShouldSaveFragmentState(androidx.fragment.app.Fragment)
    public android.view.LayoutInflater onGetLayoutInflater()
    public abstract java.lang.Object onGetHost()
    public void onSupportInvalidateOptionsMenu()
    public boolean onHasWindowAnimations()
    public int onGetWindowAnimations()
    public android.view.View onFindViewById(int)
    public boolean onHasView()
    public android.app.Activity getActivity()
    public android.content.Context getContext()
    public android.os.Handler getHandler()
    public void onAttachFragment(androidx.fragment.app.Fragment)
androidx.camera.core.UseCase$1
android.support.v4.media.session.IMediaControllerCallback$Stub
androidx.appcompat.widget.ActionMenuPresenter$ActionMenuPopupCallback:
    public androidx.appcompat.view.menu.ShowableListMenu getPopup()
androidx.fragment.app.FragmentTransaction:
    public androidx.fragment.app.FragmentTransaction replace(int,androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentTransaction replace(int,androidx.fragment.app.Fragment,java.lang.String)
    public androidx.fragment.app.FragmentTransaction setTransition(int)
    public androidx.fragment.app.FragmentTransaction addToBackStack(java.lang.String)
    public abstract int commit()
androidx.camera.core.CheckedSurfaceTexture:
    public void releaseResourceWhenDetached(androidx.camera.core.CheckedSurfaceTexture$Resource)
    public void runOnMainThread(java.lang.Runnable)
androidx.core.content.res.GrowingArrayUtils
androidx.appcompat.widget.AppCompatSpinner$DropdownPopup$1:
    public final synthetic androidx.appcompat.widget.AppCompatSpinner val$this$0
androidx.appcompat.view.menu.MenuItemWrapperICS:
    public void setExclusiveCheckable(boolean)
androidx.core.view.ViewCompat$5:
    public java.lang.Boolean frameworkGet(android.view.View)
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21
com.downloader.Error:
    public void setServerError(boolean)
    public void setConnectionError(boolean)
    public void setServerErrorMessage(java.lang.String)
    public void setHeaderFields(java.util.Map)
    public void setConnectionException(java.lang.Throwable)
    public void setResponseCode(int)
    public boolean isServerError
    public boolean isConnectionError
    public java.lang.String serverErrorMessage
    public java.util.Map headerFields
    public java.lang.Throwable connectionException
    public int responseCode
androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry:
    public androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries()
androidx.fragment.app.FragmentManager:
    public abstract androidx.fragment.app.FragmentTransaction beginTransaction()
    public void setFragmentFactory(androidx.fragment.app.FragmentFactory)
    public androidx.fragment.app.FragmentFactory getFragmentFactory()
androidx.core.graphics.drawable.WrappedDrawableApi14:
    public void setTintMode(android.graphics.PorterDuff$Mode)
    public final void updateLocalState(android.content.res.Resources)
    public final androidx.core.graphics.drawable.WrappedDrawableState mutateConstantState()
androidx.camera.camera2.impl.compat.CameraManagerCompat$CameraManagerCompatImpl:
    public abstract android.hardware.camera2.CameraManager getCameraManager()
androidx.fragment.app.FragmentTransition:
    public static androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl()
    public static androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int)
    public static void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap)
    public static void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList)
    public static void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap)
    public static void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)
    public static java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)
    public static java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)
    public static java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)
    public static void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)
    public static void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)
    public static void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)
    public static androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int)
androidx.camera.camera2.impl.SupportedSurfaceCombination$CompareSizesByDistanceToTargetRatio:
    public int compare(android.util.Size,android.util.Size)
androidx.appcompat.widget.AppCompatSeekBar:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
androidx.arch.core.executor.ArchTaskExecutor$1
androidx.camera.core.MutableConfig:
    public abstract void insertOption(androidx.camera.core.Config$Option,java.lang.Object)
    public abstract java.lang.Object removeOption(androidx.camera.core.Config$Option)
androidx.camera.core.CameraX$ErrorListener:
    public abstract void onError(androidx.camera.core.CameraX$ErrorCode,java.lang.String)
androidx.core.widget.NestedScrollView$OnScrollChangeListener:
    public abstract void onScrollChange(androidx.core.widget.NestedScrollView,int,int,int,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer:
    public static float cross(float,float,float,float)
    public void draw(android.graphics.Canvas,int,int,android.graphics.ColorFilter)
    public boolean isStateful()
    public boolean onStateChanged(int[])
    public final void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter)
    public final float getMatrixScale(android.graphics.Matrix)
android.support.v4.media.MediaBrowserCompat$CustomActionResultReceiver:
    public final java.lang.String mAction
    public final android.os.Bundle mExtras
    public final android.support.v4.media.MediaBrowserCompat$CustomActionCallback mCallback
androidx.camera.core.CheckedSurfaceTexture$Resource:
    public void setSurfaceTexture(androidx.camera.core.FixedSizeSurfaceTexture)
    public void setSurface(android.view.Surface)
androidx.camera.core.ForwardingImageProxy:
    public synchronized void setCropRect(android.graphics.Rect)
androidx.constraintlayout.solver.SolverVariable:
    public static void increaseErrorId()
    public static void <clinit>()
    public void setType(androidx.constraintlayout.solver.SolverVariable$Type)
    public static int uniqueSlackId
    public static int uniqueUnrestrictedId
    public static int uniqueConstantId
    public static int uniqueId
androidx.appcompat.widget.AppCompatSpinner$SavedState$1:
    public androidx.appcompat.widget.AppCompatSpinner$SavedState createFromParcel(android.os.Parcel)
    public androidx.appcompat.widget.AppCompatSpinner$SavedState[] newArray(int)
androidx.recyclerview.widget.OrientationHelper:
    public void <init>(androidx.recyclerview.widget.RecyclerView$LayoutManager)
    public static androidx.recyclerview.widget.OrientationHelper createHorizontalHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager)
    public static androidx.recyclerview.widget.OrientationHelper createVerticalHelper(androidx.recyclerview.widget.RecyclerView$LayoutManager)
    public void onLayoutComplete()
android.support.v4.media.MediaDescriptionCompatApi23$Builder
androidx.camera.camera2.impl.SupportedSurfaceCombination$1
androidx.camera.core.ProcessingSurfaceTexture:
    public void imageIncoming(androidx.camera.core.ImageReaderProxy)
androidx.core.os.TraceCompat
androidx.core.app.ActivityCompat:
    public static androidx.core.app.ActivityCompat$PermissionCompatDelegate sDelegate
androidx.appcompat.app.AlertController$AlertParams:
    public void apply(androidx.appcompat.app.AlertController)
    public final void createListView(androidx.appcompat.app.AlertController)
    public android.graphics.drawable.Drawable mPositiveButtonIcon
    public android.graphics.drawable.Drawable mNegativeButtonIcon
    public java.lang.CharSequence mNeutralButtonText
    public android.graphics.drawable.Drawable mNeutralButtonIcon
    public android.content.DialogInterface$OnClickListener mNeutralButtonListener
    public java.lang.CharSequence[] mItems
    public int mViewLayoutResId
    public android.view.View mView
    public int mViewSpacingLeft
    public int mViewSpacingTop
    public int mViewSpacingRight
    public int mViewSpacingBottom
    public boolean[] mCheckedItems
    public boolean mIsMultiChoice
    public android.content.DialogInterface$OnMultiChoiceClickListener mOnCheckboxClickListener
    public android.database.Cursor mCursor
    public java.lang.String mLabelColumn
    public java.lang.String mIsCheckedColumn
    public android.widget.AdapterView$OnItemSelectedListener mOnItemSelectedListener
    public androidx.appcompat.app.AlertController$AlertParams$OnPrepareListViewListener mOnPrepareListViewListener
    public boolean mRecycleOnMeasure
androidx.recyclerview.widget.StaggeredGridLayoutManager:
    public void setSpanCount(int)
    public void setOrientation(int)
    public void setReverseLayout(boolean)
    public void invalidateSpanAssignments()
    public void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo)
    public boolean updateAnchorFromPendingData(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo)
    public void updateMeasureSpecs(int)
    public int findFirstVisibleItemPositionInt()
    public boolean areAllEndsEqual()
    public boolean areAllStartsEqual()
    public final void createOrientationHelpers()
    public final boolean checkSpanForGap(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span)
    public final void repositionToWrapContentIfNecessary()
    public final void applyPendingSavedState(androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo)
    public final boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo)
    public final void measureChildWithDecorationsAndMargin(android.view.View,androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams,boolean)
    public final androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem createFullSpanItemFromEnd(int)
    public final androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem createFullSpanItemFromStart(int)
    public final void attachViewToSpans(android.view.View,androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams,androidx.recyclerview.widget.LayoutState)
    public final void appendViewToAllSpans(android.view.View)
    public final void prependViewToAllSpans(android.view.View)
    public final int getMaxStart(int)
    public final int getMinEnd(int)
    public final androidx.recyclerview.widget.StaggeredGridLayoutManager$Span getNextSpan(androidx.recyclerview.widget.LayoutState)
    public final int calculateScrollDirectionForPosition(int)
    public final int findFirstReferenceChildPosition(int)
    public final int findLastReferenceChildPosition(int)
    public final int convertFocusDirectionToLayoutDirection(int)
androidx.core.util.ObjectsCompat
android.support.v4.os.ResultReceiver$1:
    public android.support.v4.os.ResultReceiver createFromParcel(android.os.Parcel)
    public android.support.v4.os.ResultReceiver[] newArray(int)
androidx.appcompat.widget.AppCompatCheckBox:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
androidx.recyclerview.widget.RecyclerView$State:
    public void prepareForNestedPrefetch(androidx.recyclerview.widget.RecyclerView$Adapter)
    public boolean isPreLayout()
    public boolean willRunPredictiveAnimations()
    public int getTargetScrollPosition()
    public boolean hasTargetScrollPosition()
    public android.util.SparseArray mData
    public int mRemainingScrollVertical
androidx.camera.camera2.impl.compat.CameraDeviceCompat:
    public static void createCaptureSession(android.hardware.camera2.CameraDevice,androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat)
    public static androidx.camera.camera2.impl.compat.CameraDeviceCompat$CameraDeviceCompatImpl chooseImplementation()
androidx.camera.core.LensFacingCameraIdFilter$SettableLensFacingCameraIdFilter:
    public final androidx.camera.core.CameraX$LensFacing mLensFacing
androidx.camera.core.MutableOptionsBundle$1:
    public int compare(androidx.camera.core.Config$Option,androidx.camera.core.Config$Option)
androidx.core.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorListenerApi14
androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat$SessionConfigurationCompatBaseImpl:
    public android.hardware.camera2.CaptureRequest mSessionParameters
androidx.recyclerview.widget.ChildHelper$Callback:
    public abstract int getChildCount()
    public abstract void addView(android.view.View,int)
    public abstract int indexOfChild(android.view.View)
    public abstract void removeViewAt(int)
    public abstract android.view.View getChildAt(int)
    public abstract void removeAllViews()
    public abstract androidx.recyclerview.widget.RecyclerView$ViewHolder getChildViewHolder(android.view.View)
    public abstract void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)
    public abstract void detachViewFromParent(int)
    public abstract void onEnteredHiddenState(android.view.View)
    public abstract void onLeftHiddenState(android.view.View)
io.github.prabhuomkar.pytorchandroid.ui.adapters.ModelListAdapter$ModelView:
    public android.widget.ImageView modelImageView
androidx.camera.camera2.impl.CaptureSession$Builder:
    public void setExecutor(java.util.concurrent.Executor)
    public void setSupportedHardwareLevel(int)
androidx.appcompat.widget.ActionMenuPresenter:
    public static synthetic androidx.appcompat.view.menu.MenuBuilder access$000(androidx.appcompat.widget.ActionMenuPresenter)
    public static synthetic androidx.appcompat.view.menu.MenuBuilder access$100(androidx.appcompat.widget.ActionMenuPresenter)
    public static synthetic androidx.appcompat.view.menu.MenuView access$200(androidx.appcompat.widget.ActionMenuPresenter)
    public static synthetic androidx.appcompat.view.menu.MenuBuilder access$300(androidx.appcompat.widget.ActionMenuPresenter)
    public static synthetic androidx.appcompat.view.menu.MenuBuilder access$400(androidx.appcompat.widget.ActionMenuPresenter)
    public static synthetic androidx.appcompat.view.menu.MenuView access$500(androidx.appcompat.widget.ActionMenuPresenter)
    public void onConfigurationChanged()
    public void setReserveOverflow(boolean)
    public void setExpandedActionViewsExclusive(boolean)
    public void setOverflowIcon(android.graphics.drawable.Drawable)
    public android.graphics.drawable.Drawable getOverflowIcon()
    public androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)
    public void bindItemView(androidx.appcompat.view.menu.MenuItemImpl,androidx.appcompat.view.menu.MenuView$ItemView)
    public boolean shouldIncludeItem(int,androidx.appcompat.view.menu.MenuItemImpl)
    public boolean filterLeftoverView(android.view.ViewGroup,int)
    public boolean isOverflowMenuShowPending()
    public void setMenuView(androidx.appcompat.widget.ActionMenuView)
    public final android.view.View findViewForItem(android.view.MenuItem)
    public boolean mMaxItemsSet
    public boolean mStrictWidthLimit
    public boolean mWidthLimitSet
androidx.constraintlayout.solver.Metrics
androidx.appcompat.app.AppCompatDelegateImpl$ListMenuDecorView:
    public final boolean isOutOfBounds(int,int)
androidx.fragment.app.BackStackRecord:
    public void dump(java.lang.String,java.io.PrintWriter)
    public void runOnCommitRunnables()
    public int commit()
    public int commitInternal(boolean)
    public androidx.fragment.app.Fragment expandOps(java.util.ArrayList,androidx.fragment.app.Fragment)
    public androidx.fragment.app.Fragment trackAddedFragmentsInPop(java.util.ArrayList,androidx.fragment.app.Fragment)
    public boolean isPostponed()
    public void setOnStartPostponedListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener)
    public java.lang.String getName()
com.downloader.httpclient.HttpClient:
    public abstract com.downloader.httpclient.HttpClient clone()
    public abstract void connect(com.downloader.request.DownloadRequest)
    public abstract int getResponseCode()
    public abstract java.io.InputStream getInputStream()
    public abstract long getContentLength()
    public abstract java.lang.String getResponseHeader(java.lang.String)
    public abstract void close()
    public abstract java.util.Map getHeaderFields()
    public abstract java.io.InputStream getErrorStream()
androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo:
    public androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo setFrom(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo setFrom1(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public int right
    public int bottom
androidx.camera.core.ExtendableUseCaseConfigFactory:
    public void installDefaultProvider(java.lang.Class,androidx.camera.core.ConfigProvider)
androidx.camera.camera2.impl.CaptureSession$3
androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache:
    public static int generateCacheKey(int,android.graphics.PorterDuff$Mode)
    public android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)
    public android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)
androidx.appcompat.view.menu.MenuPopupHelper:
    public void <init>(android.content.Context,androidx.appcompat.view.menu.MenuBuilder,android.view.View,boolean,int)
    public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)
    public void setAnchorView(android.view.View)
    public void setForceShowIcon(boolean)
    public void setGravity(int)
    public void show()
    public boolean tryShow(int,int)
    public void dismiss()
    public final androidx.appcompat.view.menu.MenuPopup createPopup()
androidx.appcompat.app.AlertController$AlertParams$4
androidx.core.view.ViewPropertyAnimatorCompat$1:
    public final synthetic androidx.core.view.ViewPropertyAnimatorCompat this$0
androidx.appcompat.widget.TooltipCompat
androidx.appcompat.widget.ResourceManagerInternal:
    public static void installDefaultInflateDelegates(androidx.appcompat.widget.ResourceManagerInternal)
    public static long createCacheKey(android.util.TypedValue)
    public static android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[])
    public static boolean isVectorDrawable(android.graphics.drawable.Drawable)
    public synchronized android.graphics.drawable.Drawable onDrawableLoadedFromResources(android.content.Context,androidx.appcompat.widget.VectorEnabledTintResources,int)
    public android.graphics.PorterDuff$Mode getTintMode(int)
    public final android.content.res.ColorStateList getTintListFromCache(android.content.Context,int)
    public final void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)
    public final void checkVectorDrawableSetup(android.content.Context)
org.pytorch.Tensor$Tensor_float32:
    public float[] getDataAsFloatArray()
android.support.v4.media.session.IMediaSession$Stub$Proxy
androidx.fragment.app.FragmentTransitionCompat21$2:
    public final synthetic androidx.fragment.app.FragmentTransitionCompat21 this$0
androidx.core.app.TaskStackBuilder
androidx.lifecycle.LiveData$LifecycleBoundObserver:
    public void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer)
    public boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)
android.support.v4.media.session.PlaybackStateCompat$1:
    public android.support.v4.media.session.PlaybackStateCompat createFromParcel(android.os.Parcel)
    public android.support.v4.media.session.PlaybackStateCompat[] newArray(int)
androidx.interpolator.view.animation.FastOutSlowInInterpolator
androidx.camera.core.SessionConfig$Builder:
    public void setTemplateType(int)
    public void setTag(java.lang.Object)
    public void addAllDeviceStateCallbacks(java.util.Collection)
    public void addAllSessionStateCallbacks(java.util.List)
    public void addRepeatingCameraCaptureCallback(androidx.camera.core.CameraCaptureCallback)
    public void addAllRepeatingCameraCaptureCallbacks(java.util.Collection)
    public void addErrorListener(androidx.camera.core.SessionConfig$ErrorListener)
    public void addNonRepeatingSurface(androidx.camera.core.DeferrableSurface)
    public void setImplementationOptions(androidx.camera.core.Config)
    public void addImplementationOptions(androidx.camera.core.Config)
androidx.core.provider.SelfDestructiveThread$3:
    public final synthetic androidx.core.provider.SelfDestructiveThread this$0
androidx.camera.core.CaptureConfig$Builder:
    public static androidx.camera.core.CaptureConfig$Builder from(androidx.camera.core.CaptureConfig)
    public int getTemplateType()
    public void setTemplateType(int)
    public void addSurface(androidx.camera.core.DeferrableSurface)
    public java.util.Set getSurfaces()
    public void setImplementationOptions(androidx.camera.core.Config)
    public androidx.camera.core.Config getImplementationOptions()
    public void setTag(java.lang.Object)
io.github.prabhuomkar.pytorchandroid.helpers.FileHelper
androidx.camera.core.DeviceProperties:
    public static androidx.camera.core.DeviceProperties create(java.lang.String,java.lang.String,int)
    public abstract java.lang.String manufacturer()
    public abstract java.lang.String model()
    public abstract int sdkVersion()
androidx.fragment.app.FragmentTransitionImpl$3:
    public final synthetic androidx.fragment.app.FragmentTransitionImpl this$0
androidx.appcompat.view.menu.MenuItemImpl$1:
    public void onActionProviderVisibilityChanged(boolean)
androidx.core.view.ViewPropertyAnimatorUpdateListener:
    public abstract void onAnimationUpdate(android.view.View)
androidx.appcompat.widget.AppCompatImageButton:
    public void <init>(android.content.Context,android.util.AttributeSet)
androidx.camera.core.UseCase:
    public androidx.camera.core.UseCaseConfig applyDefaults(androidx.camera.core.UseCaseConfig,androidx.camera.core.UseCaseConfig$Builder)
    public void attachToCamera(java.lang.String,androidx.camera.core.SessionConfig)
    public void addStateChangeListener(androidx.camera.core.UseCase$StateChangeListener)
    public final void attachCameraControl(java.lang.String,androidx.camera.core.CameraControlInternal)
    public final void detachCameraControl(java.lang.String)
    public void removeStateChangeListener(androidx.camera.core.UseCase$StateChangeListener)
    public final void notifyInactive()
    public final void notifyUpdated()
    public androidx.camera.core.UseCaseConfig getUseCaseConfig()
    public void updateSuggestedResolution(java.util.Map)
    public void onBind()
    public androidx.camera.core.CameraControlInternal getCameraControl(java.lang.String)
    public int getImageFormat()
    public void setImageFormat(int)
androidx.fragment.app.BackStackState:
    public androidx.fragment.app.BackStackRecord instantiate(androidx.fragment.app.FragmentManagerImpl)
androidx.versionedparcelable.ParcelImpl$1:
    public androidx.versionedparcelable.ParcelImpl createFromParcel(android.os.Parcel)
    public androidx.versionedparcelable.ParcelImpl[] newArray(int)
android.support.v4.media.session.PlaybackStateCompat$CustomAction:
    public void <init>(java.lang.String,java.lang.CharSequence,int,android.os.Bundle)
    public static android.support.v4.media.session.PlaybackStateCompat$CustomAction fromCustomAction(java.lang.Object)
    public java.lang.Object mCustomActionObj
androidx.appcompat.app.WindowDecorActionBar$3:
    public void onAnimationUpdate(android.view.View)
androidx.recyclerview.widget.RecyclerView$LayoutParams:
    public boolean isViewInvalid()
androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton$1:
    public final synthetic androidx.appcompat.widget.ActionMenuPresenter val$this$0
com.downloader.internal.ComponentHolder:
    public static com.downloader.internal.ComponentHolder getInstance()
androidx.camera.core.Preview$OnPreviewOutputUpdateListener:
    public abstract void onUpdated(androidx.camera.core.Preview$PreviewOutput)
androidx.camera.core.ImageProxyDownsampler
androidx.appcompat.widget.SearchView:
    public void setQuery(java.lang.CharSequence,boolean)
    public boolean isIconified()
    public boolean onSuggestionsKey(int,android.view.KeyEvent)
    public void onTextChanged(java.lang.CharSequence)
    public void onVoiceClicked()
    public void onTextFocusChanged()
    public void adjustDropDownSizeAndPosition()
    public final void getChildBoundsWithinSearchView(android.view.View,android.graphics.Rect)
    public final boolean hasVoiceSearch()
    public final boolean isSubmitAreaEnabled()
    public final void postUpdateFocusedState()
    public final java.lang.CharSequence getDecoratedHint(java.lang.CharSequence)
    public final void updateSearchAutoComplete()
    public final void dismissSuggestions()
    public final void rewriteQueryFromSuggestion(int)
    public final boolean launchSuggestion(int,int,java.lang.String)
    public final void launchIntent(android.content.Intent)
    public final android.content.Intent createVoiceWebSearchIntent(android.content.Intent,android.app.SearchableInfo)
    public final android.content.Intent createIntentFromSuggestion(android.database.Cursor,int,java.lang.String)
androidx.camera.camera2.impl.Camera$4:
    public void onSuccess()
androidx.core.provider.FontsContractCompat$FontFamilyResult:
    public int getStatusCode()
    public androidx.core.provider.FontsContractCompat$FontInfo[] getFonts()
android.support.v4.media.session.PlaybackStateCompat$CustomAction$1:
    public android.support.v4.media.session.PlaybackStateCompat$CustomAction createFromParcel(android.os.Parcel)
    public android.support.v4.media.session.PlaybackStateCompat$CustomAction[] newArray(int)
androidx.recyclerview.widget.LayoutState:
    public boolean hasMore(androidx.recyclerview.widget.RecyclerView$State)
    public android.view.View next(androidx.recyclerview.widget.RecyclerView$Recycler)
androidx.appcompat.widget.AppCompatTextHelper$ApplyTextViewCallback$TypefaceApplyCallback:
    public final synthetic androidx.appcompat.widget.AppCompatTextHelper$ApplyTextViewCallback this$0
androidx.camera.core.CameraCaptureSessionStateCallbacks
androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo:
    public boolean isViewValidAsAnchor(android.view.View,androidx.recyclerview.widget.RecyclerView$State)
androidx.appcompat.widget.AlertDialogLayout:
    private void setChildFrame(android.view.View,int,int,int,int)
    public final boolean tryOnMeasure(int,int)
androidx.activity.ComponentActivity:
    public java.lang.Object onRetainCustomNonConfigurationInstance()
    public int mContentLayoutId
androidx.media.AudioAttributesCompat:
    public static final int[] SDK_USAGES
androidx.camera.core.VideoCaptureConfig$Builder:
    public void <init>()
    public static androidx.camera.core.VideoCaptureConfig$Builder fromConfig(androidx.camera.core.VideoCaptureConfig)
    public androidx.camera.core.VideoCaptureConfig$Builder setVideoFrameRate(int)
    public androidx.camera.core.VideoCaptureConfig$Builder setBitRate(int)
    public androidx.camera.core.VideoCaptureConfig$Builder setIFrameInterval(int)
    public androidx.camera.core.VideoCaptureConfig$Builder setAudioBitRate(int)
    public androidx.camera.core.VideoCaptureConfig$Builder setAudioSampleRate(int)
    public androidx.camera.core.VideoCaptureConfig$Builder setAudioChannelCount(int)
    public androidx.camera.core.VideoCaptureConfig$Builder setAudioRecordSource(int)
    public androidx.camera.core.VideoCaptureConfig$Builder setAudioMinBufferSize(int)
    public androidx.camera.core.VideoCaptureConfig$Builder setTargetClass(java.lang.Class)
    public androidx.camera.core.VideoCaptureConfig$Builder setTargetName(java.lang.String)
    public androidx.camera.core.VideoCaptureConfig$Builder setLensFacing(androidx.camera.core.CameraX$LensFacing)
    public androidx.camera.core.VideoCaptureConfig$Builder setTargetAspectRatioCustom(android.util.Rational)
    public androidx.camera.core.VideoCaptureConfig$Builder setTargetRotation(int)
    public androidx.camera.core.VideoCaptureConfig$Builder setMaxResolution(android.util.Size)
    public androidx.camera.core.VideoCaptureConfig$Builder setDefaultSessionConfig(androidx.camera.core.SessionConfig)
    public androidx.camera.core.VideoCaptureConfig$Builder setDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public androidx.camera.core.VideoCaptureConfig$Builder setSessionOptionUnpacker(androidx.camera.core.SessionConfig$OptionUnpacker)
    public androidx.camera.core.VideoCaptureConfig$Builder setCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public androidx.camera.core.VideoCaptureConfig$Builder setSurfaceOccupancyPriority(int)
androidx.camera.core.Config$OptionMatcher:
    public abstract boolean onOptionMatched(androidx.camera.core.Config$Option)
androidx.core.view.accessibility.AccessibilityRecordCompat
androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat
androidx.appcompat.app.ActionBar$Tab:
    public void <init>()
    public abstract android.graphics.drawable.Drawable getIcon()
    public abstract java.lang.CharSequence getText()
    public abstract android.view.View getCustomView()
    public abstract java.lang.CharSequence getContentDescription()
com.downloader.Response
com.downloader.core.DownloadFutureTask:
    public int compareTo(com.downloader.core.DownloadFutureTask)
androidx.camera.camera2.impl.CaptureCallbackContainer:
    public static androidx.camera.camera2.impl.CaptureCallbackContainer create(android.hardware.camera2.CameraCaptureSession$CaptureCallback)
    public android.hardware.camera2.CameraCaptureSession$CaptureCallback getCaptureCallback()
androidx.core.view.ViewPropertyAnimatorCompat:
    public long getDuration()
    public androidx.core.view.ViewPropertyAnimatorCompat setInterpolator(android.view.animation.Interpolator)
    public androidx.core.view.ViewPropertyAnimatorCompat setStartDelay(long)
    public void start()
androidx.constraintlayout.solver.widgets.ConstraintAnchor$1
androidx.core.content.res.ComplexColorCompat:
    public static androidx.core.content.res.ComplexColorCompat from(android.graphics.Shader)
    public static androidx.core.content.res.ComplexColorCompat from(android.content.res.ColorStateList)
    public static androidx.core.content.res.ComplexColorCompat from(int)
    public static androidx.core.content.res.ComplexColorCompat inflate(android.content.res.Resources,int,android.content.res.Resources$Theme)
    public android.graphics.Shader getShader()
    public int getColor()
    public void setColor(int)
    public boolean willDraw()
android.support.v4.media.MediaBrowserCompat$ItemReceiver:
    public final java.lang.String mMediaId
    public final android.support.v4.media.MediaBrowserCompat$ItemCallback mCallback
androidx.recyclerview.widget.GapWorker$Task:
    public void clear()
androidx.recyclerview.widget.ViewInfoStore$ProcessCallback:
    public abstract void processDisappeared(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public abstract void processAppeared(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public abstract void processPersistent(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public abstract void unused(androidx.recyclerview.widget.RecyclerView$ViewHolder)
androidx.appcompat.widget.TintInfo:
    public void clear()
androidx.appcompat.widget.AppCompatCheckedTextView:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
androidx.appcompat.widget.AppCompatCompoundButtonHelper:
    public void setSupportButtonTintList(android.content.res.ColorStateList)
    public android.content.res.ColorStateList getSupportButtonTintList()
    public void setSupportButtonTintMode(android.graphics.PorterDuff$Mode)
    public android.graphics.PorterDuff$Mode getSupportButtonTintMode()
    public void onSetButtonDrawable()
    public int getCompoundPaddingLeft(int)
androidx.core.graphics.TypefaceCompatBaseImpl$1
androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemAnimatorListener:
    public abstract void onAnimationFinished(androidx.recyclerview.widget.RecyclerView$ViewHolder)
androidx.fragment.app.FragmentManagerState$1:
    public androidx.fragment.app.FragmentManagerState createFromParcel(android.os.Parcel)
    public androidx.fragment.app.FragmentManagerState[] newArray(int)
androidx.arch.core.internal.SafeIterableMap:
    public int size()
    public java.util.Iterator descendingIterator()
    public java.util.Map$Entry eldest()
    public java.util.Map$Entry newest()
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper:
    public static java.lang.Object accessAndReturnWithDefault(java.lang.Object,java.lang.String,java.lang.Object)
    public static java.lang.reflect.Field getTextViewField(java.lang.String)
    public void loadFromAttributes(android.util.AttributeSet,int)
    public void setAutoSizeTextTypeWithDefaults(int)
    public void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)
    public void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)
    public int getAutoSizeTextType()
    public int getAutoSizeStepGranularity()
    public int getAutoSizeMinTextSize()
    public int getAutoSizeMaxTextSize()
    public int[] getAutoSizeTextAvailableSizes()
    public void initTempTextPaint(int)
    public android.text.StaticLayout createLayout(java.lang.CharSequence,android.text.Layout$Alignment,int,int)
    public boolean isAutoSizeEnabled()
    public final void setupAutoSizeUniformPresetSizes(android.content.res.TypedArray)
    public final void clearAutoSizeConfiguration()
    public final void setRawTextSize(float)
    public final boolean suggestedSizeFitsInSpace(int,android.graphics.RectF)
    public final android.text.StaticLayout createStaticLayoutForMeasuring(java.lang.CharSequence,android.text.Layout$Alignment,int,int)
    public final android.text.StaticLayout createStaticLayoutForMeasuringPre23(java.lang.CharSequence,android.text.Layout$Alignment,int)
    public final android.text.StaticLayout createStaticLayoutForMeasuringPre16(java.lang.CharSequence,android.text.Layout$Alignment,int)
androidx.cursoradapter.widget.CursorFilter$CursorFilterClient:
    public abstract java.lang.CharSequence convertToString(android.database.Cursor)
    public abstract android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)
    public abstract android.database.Cursor getCursor()
    public abstract void changeCursor(android.database.Cursor)
androidx.constraintlayout.solver.widgets.Rectangle
io.github.prabhuomkar.pytorchandroid.helpers.DownloadHelper$1:
    public void onDownloadComplete()
    public void onError(com.downloader.Error)
androidx.core.app.ActivityRecreator:
    public static boolean queueOnStopIfNecessary(java.lang.Object,android.app.Activity)
    public static java.lang.reflect.Method getPerformStopActivity3Params(java.lang.Class)
    public static java.lang.reflect.Method getPerformStopActivity2Params(java.lang.Class)
    public static java.lang.reflect.Method getRequestRelaunchActivityMethod(java.lang.Class)
    public static java.lang.reflect.Field getMainThreadField()
    public static java.lang.reflect.Field getTokenField()
    public static java.lang.Class getActivityThreadClass()
com.downloader.core.Core:
    public static void <clinit>()
    public com.downloader.core.ExecutorSupplier getExecutorSupplier()
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions:
    public java.util.Map$Entry next()
androidx.camera.camera2.impl.Camera2CameraCaptureResult:
    public java.lang.Object getTag()
android.support.v4.media.session.MediaControllerCompat$PlaybackInfo
androidx.fragment.app.FragmentManagerImpl:
    public static androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(float,float)
    public static void executeOps(java.util.ArrayList,java.util.ArrayList,int,int)
    public static int transitToStyleIndex(int,boolean)
    public androidx.fragment.app.FragmentTransaction beginTransaction()
    public void handleOnBackPressed()
    public int getBackStackEntryCount()
    public void putFragment(android.os.Bundle,java.lang.String,androidx.fragment.app.Fragment)
    public androidx.fragment.app.Fragment getFragment(android.os.Bundle,java.lang.String)
    public androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)
    public void addRetainedFragment(androidx.fragment.app.Fragment)
    public void removeRetainedFragment(androidx.fragment.app.Fragment)
    public boolean isDestroyed()
    public void performPendingDeferredStart(androidx.fragment.app.Fragment)
    public boolean isStateAtLeast(int)
    public void moveToState(androidx.fragment.app.Fragment)
    public void ensureInflatedFragmentView(androidx.fragment.app.Fragment)
    public void completeShowHideFragment(androidx.fragment.app.Fragment)
    public void makeInactive(androidx.fragment.app.Fragment)
    public void hideFragment(androidx.fragment.app.Fragment)
    public void showFragment(androidx.fragment.app.Fragment)
    public androidx.fragment.app.Fragment findFragmentByTag(java.lang.String)
    public void doPendingDeferredStart()
    public void reportBackStackChanged()
    public void addBackStackState(androidx.fragment.app.BackStackRecord)
    public boolean popBackStackState(java.util.ArrayList,java.util.ArrayList,java.lang.String,int,int)
    public android.os.Bundle saveFragmentBasicState(androidx.fragment.app.Fragment)
    public void dispatchActivityCreated()
    public void dispatchStart()
    public void dispatchResume()
    public void dispatchPause()
    public void dispatchStop()
    public void dispatchDestroyView()
    public void dispatchPrimaryNavigationFragmentChanged()
    public androidx.fragment.app.Fragment getPrimaryNavigationFragment()
    public boolean checkForMenus()
    public android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()
    public final boolean popBackStackImmediate(java.lang.String,int,int)
    public final void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator,int)
    public final void makeRemovedFragmentsInvisible(androidx.collection.ArraySet)
    public final int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet)
    public final androidx.fragment.app.Fragment findFragmentUnder(androidx.fragment.app.Fragment)
    public final void forcePostponedTransactions()
    public final void endAnimatingAwayFragments()
    public final void burpActive()
    public java.util.ArrayList mBackStackChangeListeners
androidx.core.graphics.TypefaceCompatApi24Impl:
    public static boolean isUsable()
    public static java.lang.Object newFamily()
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem:
    public int getGapForSpan(int)
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup:
    public int getSpan(int)
    public void setSpan(int,androidx.recyclerview.widget.StaggeredGridLayoutManager$Span)
    public int sizeForPosition(int)
    public final void offsetFullSpansForRemoval(int,int)
    public final void offsetFullSpansForAddition(int,int)
    public final int invalidateFullSpansAfter(int)
androidx.camera.core.AppConfig:
    public androidx.camera.core.CameraFactory getCameraFactory(androidx.camera.core.CameraFactory)
    public androidx.camera.core.CameraDeviceSurfaceManager getDeviceSurfaceManager(androidx.camera.core.CameraDeviceSurfaceManager)
    public androidx.camera.core.UseCaseConfigFactory getUseCaseConfigRepository(androidx.camera.core.UseCaseConfigFactory)
    public boolean containsOption(androidx.camera.core.Config$Option)
androidx.recyclerview.widget.LinearLayoutManager$SavedState:
    public void invalidateAnchor()
androidx.appcompat.widget.DropDownListView:
    public final void clickPressedItem(android.view.View,int)
    public final void drawSelectorCompat(android.graphics.Canvas)
    public final void positionSelectorLikeTouchCompat(int,android.view.View,float,float)
    public final void positionSelectorLikeFocusCompat(int,android.view.View)
    public final void positionSelectorCompat(int,android.view.View)
    public final void clearPressedItem()
    public final void setPressedItem(android.view.View,int,float,float)
    public final boolean touchModeDrawsInPressedStateCompat()
android.support.v4.media.MediaBrowserCompat$SearchResultReceiver:
    public final java.lang.String mQuery
    public final android.os.Bundle mExtras
    public final android.support.v4.media.MediaBrowserCompat$SearchCallback mCallback
androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl:
    public void setPrefetchVector(int,int)
    public void clearPrefetchPositions()
androidx.camera.core.SingleImageProxyBundle:
    public void close()
    public final int mCaptureId
com.downloader.internal.stream.FileDownloadOutputStream
androidx.recyclerview.widget.LinearLayoutManager$LayoutChunkResult:
    public void resetInternal()
androidx.core.view.ViewPropertyAnimatorCompat$2:
    public final synthetic androidx.core.view.ViewPropertyAnimatorCompat this$0
androidx.appcompat.view.menu.ListMenuItemView:
    public void setShortcut(boolean)
    public final void addContentView(android.view.View)
    public final void addContentView(android.view.View,int)
    public final void insertIconView()
    public int mMenuType
androidx.arch.core.internal.SafeIterableMap$ListIterator:
    public java.util.Map$Entry next()
    public final androidx.arch.core.internal.SafeIterableMap$Entry nextNode()
androidx.camera.core.ImageCapture$ImageCaptureRequest$1
androidx.core.provider.FontsContractCompat:
    public static android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources)
    public static java.util.List getCertificates(androidx.core.provider.FontRequest,android.content.res.Resources)
    public static boolean equalsByteArrayList(java.util.List,java.util.List)
    public static java.util.List convertToByteArrayList(android.content.pm.Signature[])
    public static androidx.core.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context,androidx.core.provider.FontRequest,java.lang.String,android.os.CancellationSignal)
androidx.appcompat.graphics.drawable.DrawableWrapper:
    public android.graphics.drawable.Drawable getWrappedDrawable()
    public void setWrappedDrawable(android.graphics.drawable.Drawable)
androidx.constraintlayout.widget.ConstraintSet$1
androidx.core.app.AppOpsManagerCompat
androidx.recyclerview.widget.LinearLayoutManager:
    public void <init>(android.content.Context)
    public int getOrientation()
    public void setReverseLayout(boolean)
    public int getExtraLayoutSpace(androidx.recyclerview.widget.RecyclerView$State)
    public androidx.recyclerview.widget.LinearLayoutManager$LayoutState createLayoutState()
    public boolean isSmoothScrollbarEnabled()
    public int findFirstVisibleItemPosition()
    public int findLastVisibleItemPosition()
    public final void layoutForPredictiveAnimations(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int,int)
    public final void updateAnchorInfoForLayout(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo)
    public final boolean updateAnchorFromChildren(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo)
    public final boolean updateAnchorFromPendingData(androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo)
    public final void updateLayoutStateToFillEnd(androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo)
    public final void updateLayoutStateToFillStart(androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo)
    public final void recycleViewsFromStart(androidx.recyclerview.widget.RecyclerView$Recycler,int,int)
    public final void recycleViewsFromEnd(androidx.recyclerview.widget.RecyclerView$Recycler,int,int)
    public final android.view.View findReferenceChildClosestToEnd(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State)
    public final android.view.View findReferenceChildClosestToStart(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State)
    public final android.view.View findPartiallyOrCompletelyInvisibleChildClosestToEnd()
    public final android.view.View findPartiallyOrCompletelyInvisibleChildClosestToStart()
    public final android.view.View findFirstPartiallyOrCompletelyInvisibleChild()
    public final android.view.View findLastPartiallyOrCompletelyInvisibleChild()
    public boolean mRecycleChildrenOnDetach
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat:
    public static android.graphics.PorterDuff$Mode parseTintModeCompat(int,android.graphics.PorterDuff$Mode)
    public java.lang.Object getTargetByName(java.lang.String)
    public void setAllowCaching(boolean)
    public final void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)
    public final void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public final boolean needMirroring()
    public android.graphics.drawable.Drawable$ConstantState mCachedConstantStateDelegate
androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState$1:
    public androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState createFromParcel(android.os.Parcel)
    public androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState[] newArray(int)
androidx.camera.core.OptionsBundle:
    public static androidx.camera.core.OptionsBundle emptyBundle()
androidx.fragment.app.FragmentTransitionCompat21$4:
    public final synthetic androidx.fragment.app.FragmentTransitionCompat21 this$0
androidx.constraintlayout.solver.LinearSystem$Row:
    public abstract androidx.constraintlayout.solver.SolverVariable getPivotCandidate(androidx.constraintlayout.solver.LinearSystem,boolean[])
    public abstract void clear()
    public abstract void initFromRow(androidx.constraintlayout.solver.LinearSystem$Row)
    public abstract androidx.constraintlayout.solver.SolverVariable getKey()
androidx.recyclerview.widget.RecyclerView$ItemAnimator:
    public long getMoveDuration()
    public long getAddDuration()
    public long getRemoveDuration()
    public long getChangeDuration()
    public void setListener(androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemAnimatorListener)
    public androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo recordPostLayoutInformation(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public abstract boolean animateDisappearance(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public abstract boolean animateAppearance(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public abstract boolean animatePersistence(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public abstract void runPendingAnimations()
    public void onAnimationFinished()
    public abstract boolean canReuseUpdatedViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()
androidx.constraintlayout.solver.widgets.Chain
androidx.camera.core.CameraOrientationUtil
androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup:
    public static int findFirstKeyLessThan(android.util.SparseIntArray,int)
    public abstract int getSpanSize(int)
    public void invalidateSpanIndexCache()
    public void invalidateSpanGroupIndexCache()
    public abstract int getSpanIndex(int,int)
androidx.camera.core.impl.utils.futures.Futures:
    public static com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)
    public static java.util.concurrent.ScheduledFuture immediateFailedScheduledFuture(java.lang.Throwable)
    public static com.google.common.util.concurrent.ListenableFuture successfulAsList(java.util.Collection)
    public static com.google.common.util.concurrent.ListenableFuture allAsList(java.util.Collection)
    public static void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)
    public static void <clinit>()
    public static final androidx.arch.core.util.Function IDENTITY_FUNCTION
androidx.recyclerview.widget.FastScroller:
    public void attachToRecyclerView(androidx.recyclerview.widget.RecyclerView)
    public void requestRedraw()
    public void hide(int)
    public void updateScrollPosition(int,int)
    public final void setupCallbacks()
    public final void destroyCallbacks()
    public final boolean isLayoutRTL()
    public final void resetHideDelay(int)
    public final void drawVerticalScrollbar(android.graphics.Canvas)
    public final void drawHorizontalScrollbar(android.graphics.Canvas)
    public final void verticalScrollTo(float)
    public final void horizontalScrollTo(float)
    public final int[] getVerticalRange()
    public final int[] getHorizontalRange()
androidx.camera.core.CameraInfo
androidx.camera.core.MultiValueSet:
    public void addAll(java.util.List)
android.support.v4.media.MediaMetadataCompat$1:
    public android.support.v4.media.MediaMetadataCompat createFromParcel(android.os.Parcel)
    public android.support.v4.media.MediaMetadataCompat[] newArray(int)
androidx.core.provider.FontRequest:
    public java.lang.String getProviderAuthority()
    public java.lang.String getProviderPackage()
    public java.lang.String getQuery()
    public java.util.List getCertificates()
    public int getCertificatesArrayResId()
    public java.lang.String getIdentifier()
androidx.recyclerview.widget.StaggeredGridLayoutManager$Span:
    public int getStartLine()
    public int getEndLine()
    public void cacheReferenceLineAndClear(boolean,int)
    public void invalidateCache()
    public void setLine(int)
    public int getDeletedSize()
    public void onOffset(int)
    public int findOnePartiallyOrCompletelyVisibleChild(int,int,boolean,boolean,boolean)
android.support.v4.media.MediaBrowserCompat$ItemCallback
androidx.camera.core.PreviewConfig$Builder:
    public void <init>()
    public androidx.camera.core.PreviewConfig$Builder setTargetClass(java.lang.Class)
    public androidx.camera.core.PreviewConfig$Builder setTargetName(java.lang.String)
    public androidx.camera.core.PreviewConfig$Builder setLensFacing(androidx.camera.core.CameraX$LensFacing)
    public androidx.camera.core.PreviewConfig$Builder setTargetAspectRatioCustom(android.util.Rational)
    public androidx.camera.core.PreviewConfig$Builder setTargetRotation(int)
    public androidx.camera.core.PreviewConfig$Builder setTargetResolution(android.util.Size)
    public androidx.camera.core.PreviewConfig$Builder setMaxResolution(android.util.Size)
    public androidx.camera.core.PreviewConfig$Builder setDefaultSessionConfig(androidx.camera.core.SessionConfig)
    public androidx.camera.core.PreviewConfig$Builder setDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public androidx.camera.core.PreviewConfig$Builder setSessionOptionUnpacker(androidx.camera.core.SessionConfig$OptionUnpacker)
    public androidx.camera.core.PreviewConfig$Builder setCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public androidx.camera.core.PreviewConfig$Builder setSurfaceOccupancyPriority(int)
androidx.core.view.OnApplyWindowInsetsListener:
    public abstract androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)
androidx.loader.app.LoaderManagerImpl$LoaderInfo:
    public void getLoader()
    public void markForRedelivery()
    public void destroy(boolean)
    public void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
    public final int mId
    public final android.os.Bundle mArgs
    public final androidx.loader.content.Loader mLoader
    public androidx.loader.content.Loader mPriorLoader
androidx.camera.core.AppConfig$Builder:
    public void <init>(androidx.camera.core.MutableOptionsBundle)
    public androidx.camera.core.AppConfig$Builder setCameraFactory(androidx.camera.core.CameraFactory)
    public androidx.camera.core.AppConfig$Builder setDeviceSurfaceManager(androidx.camera.core.CameraDeviceSurfaceManager)
    public androidx.camera.core.AppConfig$Builder setUseCaseConfigFactory(androidx.camera.core.UseCaseConfigFactory)
    public androidx.camera.core.AppConfig build()
    public androidx.camera.core.AppConfig$Builder setTargetClass(java.lang.Class)
    public androidx.camera.core.AppConfig$Builder setTargetName(java.lang.String)
androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapperJB:
    public final synthetic androidx.appcompat.view.menu.MenuItemWrapperICS this$0
androidx.recyclerview.widget.ChildHelper:
    public void addView(android.view.View,boolean)
    public void removeView(android.view.View)
    public void removeViewAt(int)
    public void removeAllViewsUnfiltered()
    public android.view.View findHiddenNonRemovedView(int)
    public void hide(android.view.View)
    public void unhide(android.view.View)
    public boolean removeViewIfHidden(android.view.View)
android.support.v4.media.session.PlaybackStateCompatApi21$CustomAction
androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator:
    public androidx.core.graphics.PathParser$PathDataNode[] evaluate(float,androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[])
androidx.camera.core.CaptureStage$DefaultCaptureStage:
    public final androidx.camera.core.CaptureConfig mCaptureConfig
androidx.constraintlayout.widget.ConstraintLayout$LayoutParams:
    public float dimensionRatioValue
androidx.lifecycle.ViewModelProvider
androidx.loader.app.LoaderManagerImpl:
    public static void <clinit>()
    public void markForRedelivery()
    public static boolean DEBUG
androidx.loader.app.LoaderManager:
    public abstract void markForRedelivery()
androidx.core.provider.SelfDestructiveThread$2:
    public final synthetic androidx.core.provider.SelfDestructiveThread this$0
io.github.prabhuomkar.pytorchandroid.helpers.CameraHelper
androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl:
    public boolean dispatchOnCreate()
androidx.core.graphics.TypefaceCompatApi26Impl:
    public java.lang.Class obtainFontFamily()
    public java.lang.reflect.Constructor obtainFontFamilyCtor(java.lang.Class)
    public java.lang.reflect.Method obtainFreezeMethod(java.lang.Class)
    public java.lang.reflect.Method obtainAbortCreationMethod(java.lang.Class)
    public final boolean addFontFromBuffer(java.lang.Object,java.nio.ByteBuffer,int,int,int)
androidx.arch.core.util.Function
androidx.core.graphics.drawable.IconCompat:
    public static java.lang.String typeToString(int)
    public static java.lang.String getResPackage(android.graphics.drawable.Icon)
    public static int getResId(android.graphics.drawable.Icon)
    public java.lang.String getResPackage()
    public int getResId()
    public void onPreParceling(boolean)
    public void onPostParceling()
androidx.core.content.res.GradientColorInflaterCompat
androidx.recyclerview.widget.GapWorker$1:
    public int compare(androidx.recyclerview.widget.GapWorker$Task,androidx.recyclerview.widget.GapWorker$Task)
androidx.appcompat.widget.TintContextWrapper:
    public static boolean shouldWrap(android.content.Context)
    public void <init>(android.content.Context)
    public android.content.res.Resources$Theme getTheme()
    public void setTheme(int)
    public android.content.res.Resources getResources()
    public android.content.res.AssetManager getAssets()
    public final android.content.res.Resources mResources
    public final android.content.res.Resources$Theme mTheme
    public static java.util.ArrayList sCache
androidx.customview.view.AbsSavedState:
    public void <init>()
    public final android.os.Parcelable getSuperState()
org.pytorch.IValue:
    public static org.pytorch.IValue from(org.pytorch.Tensor)
    public org.pytorch.Tensor toTensor()
    public final void preconditionType(int,int)
com.downloader.database.DownloadModel:
    public void <init>()
    public int getId()
    public void setId(int)
    public void setUrl(java.lang.String)
    public java.lang.String getETag()
    public void setETag(java.lang.String)
    public java.lang.String getDirPath()
    public void setDirPath(java.lang.String)
    public java.lang.String getFileName()
    public void setFileName(java.lang.String)
    public long getTotalBytes()
    public void setTotalBytes(long)
    public long getDownloadedBytes()
    public void setDownloadedBytes(long)
    public void setLastModifiedAt(long)
    public int id
    public java.lang.String url
    public java.lang.String dirPath
    public java.lang.String fileName
    public long totalBytes
    public long downloadedBytes
    public long lastModifiedAt
androidx.interpolator.view.animation.FastOutLinearInInterpolator
androidx.appcompat.widget.AppCompatProgressBarHelper:
    public android.graphics.Bitmap getSampleTile()
    public final android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable)
    public final android.graphics.drawable.shapes.Shape getDrawableShape()
android.support.v4.media.MediaDescriptionCompat$1:
    public android.support.v4.media.MediaDescriptionCompat createFromParcel(android.os.Parcel)
    public android.support.v4.media.MediaDescriptionCompat[] newArray(int)
androidx.appcompat.view.menu.MenuItemImpl:
    public boolean invoke()
    public int getOrdering()
    public java.lang.String getShortcutLabel()
    public void setSubMenu(androidx.appcompat.view.menu.SubMenuBuilder)
    public java.lang.CharSequence getTitleForItemView(androidx.appcompat.view.menu.MenuView$ItemView)
    public void setExclusiveCheckable(boolean)
    public void setMenuInfo(android.view.ContextMenu$ContextMenuInfo)
    public void actionFormatChanged()
    public boolean shouldShowIcon()
    public boolean requestsActionButton()
    public boolean requiresActionButton()
    public boolean showsTextAsAction()
    public androidx.core.internal.view.SupportMenuItem setActionView(int)
    public androidx.core.internal.view.SupportMenuItem setShowAsActionFlags(int)
    public void setActionViewExpanded(boolean)
    public java.lang.Runnable mItemCallback
android.support.v4.media.RatingCompat$1:
    public android.support.v4.media.RatingCompat createFromParcel(android.os.Parcel)
    public android.support.v4.media.RatingCompat[] newArray(int)
androidx.camera.core.CaptureConfig:
    public androidx.camera.core.Config getImplementationOptions()
    public int getTemplateType()
    public boolean isUseRepeatingSurface()
    public java.util.List getCameraCaptureCallbacks()
    public java.lang.Object getTag()
androidx.camera.core.ImageAnalysisConfig:
    public androidx.camera.core.ImageAnalysis$ImageReaderMode getImageReaderMode()
    public int getImageQueueDepth()
    public boolean containsOption(androidx.camera.core.Config$Option)
    public java.util.concurrent.Executor getBackgroundExecutor(java.util.concurrent.Executor)
androidx.versionedparcelable.VersionedParcel:
    public boolean isStream()
    public abstract void writeByteArray(byte[])
    public abstract void writeCharSequence(java.lang.CharSequence)
    public abstract void writeInt(int)
    public abstract void writeString(java.lang.String)
    public abstract void writeParcelable(android.os.Parcelable)
    public abstract void writeBoolean(boolean)
    public abstract int readInt()
    public abstract java.lang.String readString()
    public abstract byte[] readByteArray()
    public abstract java.lang.CharSequence readCharSequence()
    public abstract android.os.Parcelable readParcelable()
    public abstract boolean readBoolean()
    public void setSerializationFlags()
    public void writeBoolean(boolean,int)
    public void writeByteArray(byte[],int)
    public void writeCharSequence(java.lang.CharSequence,int)
    public void writeString(java.lang.String,int)
    public java.lang.String readString(java.lang.String,int)
    public byte[] readByteArray(byte[],int)
    public void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int)
    public androidx.versionedparcelable.VersionedParcelable readVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int)
    public androidx.versionedparcelable.VersionedParcelable readFromParcel(java.lang.String,androidx.versionedparcelable.VersionedParcel)
    public void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel)
    public final void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable)
androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat$SessionConfigurationCompatApi28Impl:
    public void <init>(java.lang.Object)
androidx.core.app.SharedElementCallback:
    public abstract void onSharedElementStart(java.util.List,java.util.List,java.util.List)
    public abstract void onSharedElementEnd(java.util.List,java.util.List,java.util.List)
    public abstract void onMapSharedElements(java.util.List,java.util.Map)
androidx.camera.core.Preview$PreviewSurfaceCallback
androidx.recyclerview.widget.OpReorderer:
    public void reorderOps(java.util.List)
    public void swapMoveRemove(java.util.List,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp)
    public void swapMoveUpdate(java.util.List,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp)
    public final void swapMoveOp(java.util.List,int,int)
    public final void swapMoveAdd(java.util.List,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp,int,androidx.recyclerview.widget.AdapterHelper$UpdateOp)
    public final int getLastMoveOutOfOrder(java.util.List)
androidx.camera.camera2.impl.Camera$3:
    public final synthetic androidx.camera.camera2.impl.Camera this$0
android.support.v4.media.MediaMetadataCompatApi21
androidx.camera.core.ProcessingImageReader
androidx.camera.core.ImageCaptureConfig:
    public boolean containsOption(androidx.camera.core.Config$Option)
    public static final androidx.camera.core.Config$Option OPTION_CAPTURE_BUNDLE
    public static final androidx.camera.core.Config$Option OPTION_CAPTURE_PROCESSOR
    public static final androidx.camera.core.Config$Option OPTION_BUFFER_FORMAT
    public static final androidx.camera.core.Config$Option OPTION_MAX_CAPTURE_STAGES
androidx.appcompat.view.SupportMenuInflater$MenuState:
    public void resetGroup()
    public void readGroup(android.util.AttributeSet)
    public void readItem(android.util.AttributeSet)
    public void addItem()
    public boolean hasAddedItem()
    public final char getShortcut(java.lang.String)
androidx.recyclerview.widget.GridLayoutManager$LayoutParams:
    public int getSpanIndex()
    public int getSpanSize()
androidx.appcompat.view.menu.StandardMenuPopup:
    public final boolean tryShow()
androidx.camera.core.CameraX$1:
    public void setup(androidx.camera.core.UseCaseGroup)
androidx.camera.core.CameraCaptureFailure:
    public final androidx.camera.core.CameraCaptureFailure$Reason mReason
androidx.camera.core.CameraCaptureResult:
    public abstract long getTimestamp()
    public abstract java.lang.Object getTag()
androidx.core.text.PrecomputedTextCompat:
    public static void <clinit>()
    public androidx.core.text.PrecomputedTextCompat$Params getParams()
    public final android.text.Spannable mText
    public final androidx.core.text.PrecomputedTextCompat$Params mParams
    public static final java.lang.Object sLock
    public static java.util.concurrent.Executor sExecutor
androidx.camera.core.ImageCaptureConfig$Builder:
    public void <init>()
    public static androidx.camera.core.ImageCaptureConfig$Builder fromConfig(androidx.camera.core.ImageCaptureConfig)
    public androidx.camera.core.ImageCaptureConfig$Builder setCaptureMode(androidx.camera.core.ImageCapture$CaptureMode)
    public androidx.camera.core.ImageCaptureConfig$Builder setFlashMode(androidx.camera.core.FlashMode)
    public androidx.camera.core.ImageCaptureConfig$Builder setTargetClass(java.lang.Class)
    public androidx.camera.core.ImageCaptureConfig$Builder setTargetName(java.lang.String)
    public androidx.camera.core.ImageCaptureConfig$Builder setLensFacing(androidx.camera.core.CameraX$LensFacing)
    public androidx.camera.core.ImageCaptureConfig$Builder setTargetAspectRatioCustom(android.util.Rational)
    public androidx.camera.core.ImageCaptureConfig$Builder setTargetRotation(int)
    public androidx.camera.core.ImageCaptureConfig$Builder setDefaultSessionConfig(androidx.camera.core.SessionConfig)
    public androidx.camera.core.ImageCaptureConfig$Builder setDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public androidx.camera.core.ImageCaptureConfig$Builder setSessionOptionUnpacker(androidx.camera.core.SessionConfig$OptionUnpacker)
    public androidx.camera.core.ImageCaptureConfig$Builder setCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public androidx.camera.core.ImageCaptureConfig$Builder setSurfaceOccupancyPriority(int)
androidx.appcompat.widget.AbsActionBarView:
    public static int next(int,int,boolean)
androidx.core.view.LayoutInflaterCompat
android.support.v4.media.session.MediaControllerCompat$Callback$StubCompat
androidx.core.view.MotionEventCompat
androidx.core.view.NestedScrollingChildHelper:
    public void setNestedScrollingEnabled(boolean)
    public boolean isNestedScrollingEnabled()
    public boolean hasNestedScrollingParent()
    public boolean startNestedScroll(int)
    public void stopNestedScroll()
    public void dispatchNestedScroll(int,int,int,int,int[],int,int[])
    public boolean dispatchNestedPreScroll(int,int,int[],int[])
    public final void setNestedScrollingParentForType(int,android.view.ViewParent)
    public final int[] getTempNestedScrollConsumed()
androidx.camera.camera2.impl.CameraAvailabilityRegistry$1:
    public void onNewData(androidx.camera.core.BaseCamera$State)
androidx.appcompat.widget.AppCompatRadioButton:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
androidx.appcompat.app.AppCompatDelegateImpl:
    public void <init>(android.app.Activity,androidx.appcompat.app.AppCompatCallback)
    public void <init>(android.app.Dialog,androidx.appcompat.app.AppCompatCallback)
    public void attachBaseContext(android.content.Context)
    public void onPostCreate(android.os.Bundle)
    public androidx.appcompat.app.ActionBar getSupportActionBar()
    public final androidx.appcompat.app.ActionBar peekSupportActionBar()
    public final android.content.Context getActionBarThemedContext()
    public android.view.MenuInflater getMenuInflater()
    public android.view.View findViewById(int)
    public void onConfigurationChanged(android.content.res.Configuration)
    public void onStart()
    public void onPostResume()
    public void onSaveInstanceState(android.os.Bundle)
    public void onDestroy()
    public void setTheme(int)
    public void onSubDecorInstalled()
    public final java.lang.CharSequence getTitle()
    public void onPanelClosed(int)
    public void onMenuOpened(int)
    public androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)
    public androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)
    public boolean isHandleNativeActionModesEnabled()
    public boolean onBackPressed()
    public boolean onKeyShortcut(int,android.view.KeyEvent)
    public boolean onKeyUp(int,android.view.KeyEvent)
    public boolean onKeyDown(int,android.view.KeyEvent)
    public android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)
    public void closePanel(int)
    public void dismissPopups()
    public int getLocalNightMode()
    public int mapNightMode(int)
    public final void cleanupAutoManagers()
    public final android.view.ViewGroup createSubDecor()
    public final void applyFixedSizeWindow()
    public final boolean shouldInheritContext(android.view.ViewParent)
    public final androidx.appcompat.app.AppCompatActivity tryUnwrapContext()
    public final boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)
    public final void reopenMenu(boolean)
    public final boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)
    public final boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)
    public final boolean onKeyDownPanel(int,android.view.KeyEvent)
    public final boolean onKeyUpPanel(int,android.view.KeyEvent)
    public final int sanitizeWindowFeatureId(int)
    public final int calculateNightMode()
    public final boolean updateForNightMode(int,boolean)
    public final void updateResourcesConfigurationForNightMode(int,boolean)
    public final androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoBatteryNightModeManager()
    public final boolean isActivityManifestHandlingUiMode()
androidx.camera.core.ProcessingImageReader$3
com.downloader.request.DownloadRequestBuilder:
    public com.downloader.request.DownloadRequestBuilder setTag(java.lang.Object)
    public com.downloader.request.DownloadRequest build()
androidx.camera.core.ImageCapture$CaptureCallbackChecker
androidx.fragment.app.FragmentManagerImpl$5:
    public final synthetic androidx.fragment.app.FragmentManagerImpl this$0
androidx.camera.core.impl.utils.executor.HandlerScheduledExecutorService$HandlerScheduledFuture:
    public int compareTo(java.util.concurrent.Delayed)
androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate$ItemDelegate:
    public void saveOriginalDelegate(android.view.View)
    public androidx.core.view.AccessibilityDelegateCompat getAndRemoveOriginalDelegateForItem(android.view.View)
androidx.core.graphics.TypefaceCompatUtil
androidx.camera.core.Config:
    public abstract boolean containsOption(androidx.camera.core.Config$Option)
androidx.appcompat.app.AppCompatDelegateImpl$1:
    public final boolean shouldWrapException(java.lang.Throwable)
androidx.appcompat.app.ResourcesFlusher
androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback:
    public java.util.List onPresetSession()
    public java.util.List onEnableSession()
    public java.util.List onRepeating()
    public java.util.List onDisableSession()
androidx.appcompat.widget.SearchView$AutoCompleteTextViewReflector:
    public void doBeforeTextChanged(android.widget.AutoCompleteTextView)
    public void doAfterTextChanged(android.widget.AutoCompleteTextView)
    public void ensureImeVisible(android.widget.AutoCompleteTextView,boolean)
androidx.core.view.accessibility.AccessibilityEventCompat
androidx.core.content.res.FontResourcesParserCompat
androidx.appcompat.widget.DropDownListView$ResolveHoverRunnable:
    public void cancel()
    public void post()
androidx.fragment.app.FragmentActivity$HostCallbacks:
    public void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
    public boolean onShouldSaveFragmentState(androidx.fragment.app.Fragment)
    public android.view.LayoutInflater onGetLayoutInflater()
    public androidx.fragment.app.FragmentActivity onGetHost()
    public void onSupportInvalidateOptionsMenu()
    public boolean onHasWindowAnimations()
    public int onGetWindowAnimations()
    public void onAttachFragment(androidx.fragment.app.Fragment)
    public java.lang.Object onGetHost()
androidx.camera.core.DeferrableSurface:
    public static void callOnSurfaceDetachedListener(androidx.camera.core.DeferrableSurface$OnSurfaceDetachedListener,java.util.concurrent.Executor)
    public static java.util.concurrent.atomic.AtomicInteger sSurfaceCount
androidx.recyclerview.widget.AdapterHelper:
    public void <init>(androidx.recyclerview.widget.AdapterHelper$Callback,boolean)
    public void reset()
    public boolean hasAnyUpdateTypes(int)
    public int findPositionOffset(int)
    public int applyPendingUpdatesToPosition(int)
    public boolean hasUpdates()
    public final void applyMove(androidx.recyclerview.widget.AdapterHelper$UpdateOp)
    public final void applyRemove(androidx.recyclerview.widget.AdapterHelper$UpdateOp)
    public final void applyUpdate(androidx.recyclerview.widget.AdapterHelper$UpdateOp)
    public final void applyAdd(androidx.recyclerview.widget.AdapterHelper$UpdateOp)
    public java.lang.Runnable mOnItemProcessedCallback
androidx.core.widget.TextViewCompat
androidx.recyclerview.widget.RecyclerView$1
androidx.core.graphics.PathParser
androidx.camera.camera2.impl.CaptureSession:
    public void forceClose()
    public final java.util.concurrent.Executor getExecutor()
androidx.camera.core.CaptureBundles$CaptureBundleImpl
androidx.core.graphics.TypefaceCompatBaseImpl$2
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatApi28Impl:
    public static androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatApi28Impl wrap(android.hardware.camera2.params.OutputConfiguration)
androidx.core.content.PermissionChecker
androidx.camera.camera2.impl.Camera:
    public void finishClose()
    public final void configAndClose()
    public final void notifyAttachToUseCaseSurfaces(androidx.camera.core.UseCase)
    public final void notifyDetachFromUseCaseSurfaces(androidx.camera.core.UseCase)
    public final void updateCameraControlPreviewAspectRatio(java.util.Collection)
    public final void clearCameraControlPreviewAspectRatio(java.util.Collection)
    public final java.util.concurrent.atomic.AtomicInteger mReleaseRequestCount
androidx.camera.core.UseCaseGroupRepository:
    public final androidx.lifecycle.LifecycleObserver createLifecycleObserver()
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager
androidx.lifecycle.Lifecycle:
    public abstract void removeObserver(androidx.lifecycle.LifecycleObserver)
    public abstract androidx.lifecycle.Lifecycle$State getCurrentState()
    public java.util.concurrent.atomic.AtomicReference mInternalScopeRef
androidx.appcompat.view.ActionMode:
    public void setTag(java.lang.Object)
    public java.lang.Object getTag()
    public boolean getTitleOptionalHint()
androidx.recyclerview.widget.RecyclerView$OnFlingListener:
    public abstract boolean onFling(int,int)
androidx.recyclerview.widget.GapWorker:
    public static boolean isPrefetchPositionAttached(androidx.recyclerview.widget.RecyclerView,int)
    public void add(androidx.recyclerview.widget.RecyclerView)
    public void remove(androidx.recyclerview.widget.RecyclerView)
    public final void buildTaskList()
    public final void prefetchInnerRecyclerViewWithDeadline(androidx.recyclerview.widget.RecyclerView,long)
    public final void flushTaskWithDeadline(androidx.recyclerview.widget.GapWorker$Task,long)
    public final void flushTasksWithDeadline(long)
androidx.constraintlayout.solver.Pools$SimplePool:
    public void releaseAll(java.lang.Object[],int)
androidx.appcompat.widget.AppCompatTextView:
    public final void consumeTextFutureAndSetBlocking()
androidx.camera.core.UseCaseAttachState:
    public void setUseCaseActive(androidx.camera.core.UseCase)
    public void setUseCaseInactive(androidx.camera.core.UseCase)
    public void setUseCaseOnline(androidx.camera.core.UseCase)
    public void setUseCaseOffline(androidx.camera.core.UseCase)
    public androidx.camera.core.SessionConfig getUseCaseSessionConfig(androidx.camera.core.UseCase)
    public final java.util.Collection getUseCases(androidx.camera.core.UseCaseAttachState$AttachStateFilter)
androidx.appcompat.widget.AppCompatImageHelper:
    public boolean hasOverlappingRendering()
    public android.content.res.ColorStateList getSupportImageTintList()
    public android.graphics.PorterDuff$Mode getSupportImageTintMode()
    public final boolean shouldApplyFrameworkTintUsingColorFilter()
    public final boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)
    public androidx.appcompat.widget.TintInfo mInternalImageTint
android.support.v4.media.session.IMediaSession:
    public abstract void registerCallbackListener(android.support.v4.media.session.IMediaControllerCallback)
androidx.fragment.app.FragmentController:
    public static androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback)
    public androidx.fragment.app.FragmentManager getSupportFragmentManager()
    public androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)
    public void attachHost(androidx.fragment.app.Fragment)
    public android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)
    public android.os.Parcelable saveAllState()
    public void restoreSaveState(android.os.Parcelable)
    public void dispatchCreate()
    public void dispatchActivityCreated()
    public void dispatchStart()
    public void dispatchResume()
    public void dispatchPause()
    public void dispatchStop()
    public void dispatchDestroy()
    public void dispatchMultiWindowModeChanged(boolean)
    public void dispatchPictureInPictureModeChanged(boolean)
    public void dispatchConfigurationChanged(android.content.res.Configuration)
    public void dispatchLowMemory()
    public boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)
    public boolean dispatchPrepareOptionsMenu(android.view.Menu)
    public boolean dispatchOptionsItemSelected(android.view.MenuItem)
    public boolean dispatchContextItemSelected(android.view.MenuItem)
    public void dispatchOptionsMenuClosed(android.view.Menu)
    public boolean execPendingActions()
androidx.camera.camera2.impl.PreviewConfigProvider:
    public androidx.camera.core.PreviewConfig getConfig(androidx.camera.core.CameraX$LensFacing)
androidx.constraintlayout.solver.widgets.ChainHead:
    public static boolean isMatchConstraintEqualityCandidate(androidx.constraintlayout.solver.widgets.ConstraintWidget,int)
    public void define()
    public final void defineChainProperties()
androidx.concurrent.futures.AbstractResolvableFuture$Waiter:
    public void setNext(androidx.concurrent.futures.AbstractResolvableFuture$Waiter)
    public void unpark()
android.support.v4.media.session.IMediaControllerCallback
androidx.fragment.app.BackStackState$1:
    public androidx.fragment.app.BackStackState createFromParcel(android.os.Parcel)
    public androidx.fragment.app.BackStackState[] newArray(int)
androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback:
    public androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback wrap(android.graphics.drawable.Drawable$Callback)
    public android.graphics.drawable.Drawable$Callback unwrap()
androidx.fragment.app.FragmentTransitionCompat21:
    public boolean canHandle(java.lang.Object)
    public java.lang.Object wrapTransitionInSet(java.lang.Object)
    public void setEpicenter(java.lang.Object,android.view.View)
    public java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object)
    public void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList)
    public java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object)
    public void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)
    public void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)
    public void addTarget(java.lang.Object,android.view.View)
    public void removeTarget(java.lang.Object,android.view.View)
    public void setEpicenter(java.lang.Object,android.graphics.Rect)
androidx.appcompat.widget.ActionBarOverlayLayout:
    public boolean isInOverlayMode()
    public androidx.appcompat.widget.ActionBarOverlayLayout$LayoutParams generateDefaultLayoutParams()
    public androidx.appcompat.widget.ActionBarOverlayLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)
    public final androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View)
    public final void postRemoveActionBarHideOffset()
    public final void postAddActionBarHideOffset()
    public final void removeActionBarHideOffset()
    public final void addActionBarHideOffset()
    public final boolean shouldHideActionBarOnFling(float)
androidx.core.app.BundleCompat$BundleCompatBaseImpl
io.github.prabhuomkar.pytorchandroid.helpers.DownloadHelper
androidx.camera.camera2.impl.Camera$CameraAvailability:
    public void onNewData(java.lang.Integer)
    public boolean isCameraAvailable()
androidx.fragment.app.FragmentManagerImpl$FragmentLifecycleCallbacksHolder:
    public final androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks mCallback
androidx.lifecycle.LiveData$ObserverWrapper:
    public boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)
androidx.arch.core.executor.DefaultTaskExecutor$1:
    public final synthetic androidx.arch.core.executor.DefaultTaskExecutor this$0
androidx.core.util.Pools$SimplePool:
    public final boolean isInPool(java.lang.Object)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat:
    public int getId()
    public boolean perform(android.view.View,android.os.Bundle)
    public final int mId
    public final java.lang.CharSequence mLabel
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_FOCUS
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLEAR_FOCUS
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SELECT
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLEAR_SELECTION
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLICK
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_LONG_CLICK
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_ACCESSIBILITY_FOCUS
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLEAR_ACCESSIBILITY_FOCUS
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_NEXT_AT_MOVEMENT_GRANULARITY
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_NEXT_HTML_ELEMENT
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PREVIOUS_HTML_ELEMENT
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_FORWARD
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_BACKWARD
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_COPY
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PASTE
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CUT
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SET_SELECTION
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_EXPAND
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_COLLAPSE
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_DISMISS
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SET_TEXT
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SHOW_ON_SCREEN
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_TO_POSITION
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_UP
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_LEFT
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_DOWN
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_RIGHT
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CONTEXT_CLICK
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SET_PROGRESS
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_MOVE_WINDOW
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SHOW_TOOLTIP
    public static final androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_HIDE_TOOLTIP
com.downloader.OnDownloadListener:
    public abstract void onDownloadComplete()
    public abstract void onError(com.downloader.Error)
androidx.camera.core.impl.utils.executor.HighPriorityExecutor$1:
    public final synthetic androidx.camera.core.impl.utils.executor.HighPriorityExecutor this$0
androidx.core.util.Pools$Pool
androidx.recyclerview.widget.RecyclerView$Adapter:
    public void onBindViewHolder1(androidx.recyclerview.widget.RecyclerView$ViewHolder,int)
    public final androidx.recyclerview.widget.RecyclerView$ViewHolder createViewHolder(android.view.ViewGroup,int)
    public final void bindViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder,int)
    public int getItemViewType()
    public long getItemId()
    public final boolean hasStableIds()
    public void onViewRecycled()
    public boolean onFailedToRecycleView()
    public void onViewAttachedToWindow()
    public void onViewDetachedFromWindow()
    public void registerAdapterDataObserver(androidx.recyclerview.widget.RecyclerView$AdapterDataObserver)
    public void unregisterAdapterDataObserver(androidx.recyclerview.widget.RecyclerView$AdapterDataObserver)
    public void onAttachedToRecyclerView()
    public void onDetachedFromRecyclerView()
androidx.fragment.app.Fragment:
    public final void restoreViewState(android.os.Bundle)
    public final android.os.Bundle getArguments()
    public final boolean isStateSaved()
    public final androidx.fragment.app.Fragment getTargetFragment()
    public android.content.Context getContext()
    public final android.content.Context requireContext()
    public final androidx.fragment.app.FragmentActivity getActivity()
    public final androidx.fragment.app.FragmentActivity requireActivity()
    public final java.lang.Object getHost()
    public final android.content.res.Resources getResources()
    public final androidx.fragment.app.FragmentManager getFragmentManager()
    public final androidx.fragment.app.Fragment getParentFragment()
    public void onHiddenChanged()
    public final boolean getRetainInstance()
    public void onActivityResult()
    public void onRequestPermissionsResult()
    public android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)
    public android.view.LayoutInflater getLayoutInflater()
    public void onInflate()
    public void onAttachFragment()
    public void onAttach()
    public void onAttach1()
    public android.view.animation.Animation onCreateAnimation()
    public android.animation.Animator onCreateAnimator()
    public void restoreChildFragmentState(android.os.Bundle)
    public void onViewCreated()
    public android.view.View getView()
    public void onActivityCreated()
    public void onViewStateRestored()
    public void onStart()
    public void onResume()
    public void onSaveInstanceState()
    public void onMultiWindowModeChanged()
    public void onPictureInPictureModeChanged()
    public void onPrimaryNavigationFragmentChanged()
    public void onPause()
    public void onStop()
    public void onDestroyView()
    public void onDestroy()
    public void initState()
    public void onDetach()
    public void onCreateOptionsMenu()
    public void onPrepareOptionsMenu()
    public void onDestroyOptionsMenu()
    public boolean onOptionsItemSelected()
    public void onOptionsMenuClosed()
    public boolean onContextItemSelected()
    public java.lang.Object getReturnTransition()
    public java.lang.Object getReenterTransition()
    public java.lang.Object getSharedElementReturnTransition()
    public boolean getAllowEnterTransitionOverlap()
    public boolean getAllowReturnTransitionOverlap()
    public void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
    public androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)
    public void performAttach()
    public void performCreate(android.os.Bundle)
    public void performActivityCreated(android.os.Bundle)
    public void performStart()
    public void performResume()
    public void noteStateNotSaved()
    public void performPrimaryNavigationFragmentChanged()
    public void performMultiWindowModeChanged(boolean)
    public void performPictureInPictureModeChanged(boolean)
    public void performConfigurationChanged(android.content.res.Configuration)
    public void performLowMemory()
    public boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)
    public boolean performPrepareOptionsMenu(android.view.Menu)
    public boolean performOptionsItemSelected(android.view.MenuItem)
    public boolean performContextItemSelected(android.view.MenuItem)
    public void performOptionsMenuClosed(android.view.Menu)
    public void performSaveInstanceState(android.os.Bundle)
    public void performPause()
    public void performStop()
    public void performDestroyView()
    public void performDestroy()
    public void performDetach()
    public void setNextTransition(int,int)
    public void getEnterTransitionCallback()
    public void getExitTransitionCallback()
    public void setStateAfterAnimating(int)
    public boolean isPostponed()
    public java.lang.Runnable mPostponedDurationRunnable
    public int mContentLayoutId
androidx.core.widget.NestedScrollView:
    public void dispatchNestedScroll(int,int,int,int,int[],int,int[])
    public boolean pageScroll(int)
    public final void smoothScrollTo(int,int)
    public final void initScrollView()
    public final boolean canScroll()
    public final boolean inChild(int,int)
    public final void initOrResetVelocityTracker()
    public final void initVelocityTrackerIfNotExists()
    public final android.view.View findFocusableViewInBounds(boolean,int,int)
    public final boolean isOffScreen(android.view.View)
    public final boolean scrollToChildRect(android.graphics.Rect,boolean)
androidx.appcompat.app.AlertDialog:
    public android.widget.ListView getListView()
androidx.collection.LruCache:
    public void entryRemoved()
    public java.lang.Object create()
    public int sizeOf()
    public final int safeSizeOf(java.lang.Object,java.lang.Object)
    public int createCount
androidx.appcompat.widget.AppCompatImageView:
    public void <init>(android.content.Context)
    public void <init>(android.content.Context,android.util.AttributeSet)
androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate:
    public androidx.core.view.AccessibilityDelegateCompat getItemDelegate()
androidx.interpolator.view.animation.LinearOutSlowInInterpolator
androidx.constraintlayout.solver.ArrayLinkedVariables:
    public final boolean containsKey(androidx.constraintlayout.solver.SolverVariable)
    public void invert()
    public void divideByAmount(float)
    public androidx.constraintlayout.solver.SolverVariable chooseSubject(androidx.constraintlayout.solver.LinearSystem)
    public final void updateFromRow(androidx.constraintlayout.solver.ArrayRow,androidx.constraintlayout.solver.ArrayRow,boolean)
    public void updateFromSystem(androidx.constraintlayout.solver.ArrayRow,androidx.constraintlayout.solver.ArrayRow[])
androidx.lifecycle.ReportFragment:
    public final void dispatchCreate(androidx.lifecycle.ReportFragment$ActivityInitializationListener)
    public final void dispatchStart(androidx.lifecycle.ReportFragment$ActivityInitializationListener)
    public final void dispatchResume(androidx.lifecycle.ReportFragment$ActivityInitializationListener)
androidx.appcompat.widget.ActionBarContextView$1:
    public final synthetic androidx.appcompat.widget.ActionBarContextView this$0
androidx.camera.core.FixedSizeSurfaceTextures
androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry:
    public java.lang.String getFileName()
    public int getWeight()
    public boolean isItalic()
    public java.lang.String getVariationSettings()
    public int getTtcIndex()
    public int getResourceId()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup:
    public void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)
    public final void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)
androidx.core.view.ViewParentCompat
androidx.core.widget.PopupWindowCompat
androidx.fragment.app.FragmentTransitionImpl$1:
    public final synthetic androidx.fragment.app.FragmentTransitionImpl this$0
androidx.core.view.NestedScrollingParentHelper:
    public void onNestedScrollAccepted(android.view.View,android.view.View,int)
    public void onNestedScrollAccepted(int,int)
    public int getNestedScrollAxes()
    public void onStopNestedScroll(int)
com.downloader.utils.Utils
androidx.appcompat.view.menu.CascadingMenuPopup:
    public final androidx.appcompat.widget.MenuPopupWindow createPopupWindow()
    public final int getInitialMenuPosition()
    public final int getNextMenuPosition(int)
    public final android.view.MenuItem findMenuItemForSubmenu(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuBuilder)
    public final android.view.View findParentViewForSubmenu(androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo,androidx.appcompat.view.menu.MenuBuilder)
    public final int findIndexOfAddedMenu(androidx.appcompat.view.menu.MenuBuilder)
androidx.constraintlayout.widget.ConstraintSet:
    public static int lookupID(android.content.res.TypedArray,int,int)
    public void clone(androidx.constraintlayout.widget.Constraints)
    public void applyToInternal(androidx.constraintlayout.widget.ConstraintLayout)
    public final void populateConstraint(androidx.constraintlayout.widget.ConstraintSet$Constraint,android.content.res.TypedArray)
androidx.appcompat.content.res.AppCompatResources:
    public static android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)
    public static boolean isColorInt(android.content.Context,int)
    public static android.util.TypedValue getTypedValue()
androidx.lifecycle.ViewModel:
    public static void closeWithRuntimeException(java.lang.Object)
    public volatile boolean mCleared
androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper:
    public void <init>()
androidx.camera.core.ImageAnalysisConfig$Builder:
    public void <init>()
    public androidx.camera.core.ImageAnalysisConfig$Builder setImageReaderMode(androidx.camera.core.ImageAnalysis$ImageReaderMode)
    public androidx.camera.core.ImageAnalysisConfig$Builder setImageQueueDepth(int)
    public androidx.camera.core.ImageAnalysisConfig$Builder setTargetClass(java.lang.Class)
    public androidx.camera.core.ImageAnalysisConfig$Builder setTargetName(java.lang.String)
    public androidx.camera.core.ImageAnalysisConfig$Builder setLensFacing(androidx.camera.core.CameraX$LensFacing)
    public androidx.camera.core.ImageAnalysisConfig$Builder setTargetAspectRatioCustom(android.util.Rational)
    public androidx.camera.core.ImageAnalysisConfig$Builder setTargetRotation(int)
    public androidx.camera.core.ImageAnalysisConfig$Builder setTargetResolution(android.util.Size)
    public androidx.camera.core.ImageAnalysisConfig$Builder setDefaultResolution(android.util.Size)
    public androidx.camera.core.ImageAnalysisConfig$Builder setMaxResolution(android.util.Size)
    public androidx.camera.core.ImageAnalysisConfig$Builder setDefaultSessionConfig(androidx.camera.core.SessionConfig)
    public androidx.camera.core.ImageAnalysisConfig$Builder setDefaultCaptureConfig(androidx.camera.core.CaptureConfig)
    public androidx.camera.core.ImageAnalysisConfig$Builder setSessionOptionUnpacker(androidx.camera.core.SessionConfig$OptionUnpacker)
    public androidx.camera.core.ImageAnalysisConfig$Builder setCaptureOptionUnpacker(androidx.camera.core.CaptureConfig$OptionUnpacker)
    public androidx.camera.core.ImageAnalysisConfig$Builder setSurfaceOccupancyPriority(int)
androidx.camera.core.ErrorHandler$PrintingErrorListener:
    public void onError(androidx.camera.core.CameraX$ErrorCode,java.lang.String)
androidx.camera.core.DeferrableSurfaces
androidx.lifecycle.Lifecycling$1:
    public final synthetic androidx.lifecycle.LifecycleEventObserver val$observer
androidx.fragment.app.FragmentViewLifecycleOwner:
    public void initialize()
    public boolean isInitialized()
    public void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)
androidx.core.view.ViewConfigurationCompat:
    public static float getScaledVerticalScrollFactor(android.view.ViewConfiguration,android.content.Context)
io.github.prabhuomkar.pytorchandroid.ui.adapters.TaskListAdapter$TaskView:
    public final synthetic io.github.prabhuomkar.pytorchandroid.ui.adapters.TaskListAdapter this$0
androidx.camera.core.PreviewConfig:
    public boolean containsOption(androidx.camera.core.Config$Option)
    public androidx.camera.core.ImageInfoProcessor getImageInfoProcessor(androidx.camera.core.ImageInfoProcessor)
    public androidx.camera.core.CaptureProcessor getCaptureProcessor(androidx.camera.core.CaptureProcessor)
androidx.constraintlayout.solver.widgets.ConstraintWidget:
    public static void <clinit>()
    public void setMaxWidth(int)
    public void setMaxHeight(int)
    public boolean isSpreadWidth()
    public boolean isSpreadHeight()
    public void updateResolutionNodes()
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getParent()
    public void setParent(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public void setWidthWrapContent(boolean)
    public void setHeightWrapContent(boolean)
    public void connectCircularConstraint(androidx.constraintlayout.solver.widgets.ConstraintWidget,float,int)
    public void setVisibility(int)
    public int getVisibility()
    public java.lang.String getDebugName()
    public void setDebugName(java.lang.String)
    public int getX()
    public int getY()
    public int getWrapWidth()
    public int getWrapHeight()
    public int getDrawX()
    public int getDrawY()
    public int getRootX()
    public int getRootY()
    public int getRight()
    public float getBiasPercent(int)
    public boolean hasBaseline()
    public int getBaselineDistance()
    public java.lang.Object getCompanionWidget()
    public void setX(int)
    public void setY(int)
    public void setOrigin(int,int)
    public void setHorizontalMatchStyle(int,int,int,float)
    public void setVerticalMatchStyle(int,int,int,float)
    public void setDimensionRatio(java.lang.String)
    public void setHorizontalBiasPercent(float)
    public void setVerticalBiasPercent(float)
    public void setMinWidth(int)
    public void setMinHeight(int)
    public void setWrapWidth(int)
    public void setWrapHeight(int)
    public void setFrame(int,int,int,int)
    public int getRelativePositioning(int)
    public void setRelativePositioning(int,int)
    public void setBaselineDistance(int)
    public void setCompanionWidget(java.lang.Object)
    public void setHorizontalWeight(float)
    public void setVerticalWeight(float)
    public void setHorizontalChainStyle(int)
    public void setVerticalChainStyle(int)
    public void resetAnchors()
    public boolean isInHorizontalChain()
    public boolean isInVerticalChain()
    public void setupDimensionRatio(boolean,boolean,boolean,boolean)
    public final void addAnchors()
    public boolean mIsWidthWrapContent
    public boolean mIsHeightWrapContent
    public int mDrawWidth
    public int mDrawHeight
    public int mContainerItemSkip
    public boolean mHorizontalWrapVisited
    public boolean mVerticalWrapVisited
    public boolean mHorizontalChainFixedPosition
    public boolean mVerticalChainFixedPosition
    public androidx.constraintlayout.solver.widgets.ConstraintWidget mHorizontalNextWidget
    public androidx.constraintlayout.solver.widgets.ConstraintWidget mVerticalNextWidget
androidx.camera.core.AutoValue_DeviceProperties:
    public java.lang.String manufacturer()
    public java.lang.String model()
    public int sdkVersion()
androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer:
    public void setOptimizationLevel(int)
    public int getOptimizationLevel()
    public boolean isWidthMeasuredTooSmall()
    public boolean isHeightMeasuredTooSmall()
    public void updateChildrenFromSolver(androidx.constraintlayout.solver.LinearSystem,boolean[])
    public void setRtl(boolean)
    public boolean isRtl()
    public void preOptimize()
    public void optimizeForDimensions(int,int)
    public void optimize()
    public boolean handlesInternalConstraints()
    public final void addHorizontalChain(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public final void addVerticalChain(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public int mDebugSolverPassCount
androidx.appcompat.view.menu.SubMenuBuilder:
    public android.view.Menu getParentMenu()
    public void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback)
androidx.core.provider.FontsContractCompat$2:
    public void onReply(androidx.core.provider.FontsContractCompat$TypefaceResult)
androidx.cursoradapter.widget.CursorAdapter:
    public void init(android.content.Context,android.database.Cursor,int)
    public android.database.Cursor getCursor()
    public abstract android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)
    public android.database.Cursor swapCursor(android.database.Cursor)
    public void onContentChanged()
androidx.recyclerview.widget.LinearLayoutManager$SavedState$1:
    public androidx.recyclerview.widget.LinearLayoutManager$SavedState createFromParcel(android.os.Parcel)
    public androidx.recyclerview.widget.LinearLayoutManager$SavedState[] newArray(int)
androidx.concurrent.futures.CallbackToFutureAdapter
android.support.v4.media.MediaMetadataCompat:
    public static android.support.v4.media.MediaMetadataCompat fromMediaMetadata(java.lang.Object)
    public java.lang.Object mMetadataObj
    public static final java.lang.String[] PREFERRED_DESCRIPTION_ORDER
    public static final java.lang.String[] PREFERRED_BITMAP_ORDER
    public static final java.lang.String[] PREFERRED_URI_ORDER
androidx.recyclerview.widget.DefaultItemAnimator:
    public void runPendingAnimations()
    public boolean animateRemove(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public boolean animateAdd(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public void animateAddImpl(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public void animateMoveImpl(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,int,int)
    public boolean animateChange(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ViewHolder,int,int,int,int)
    public void animateChangeImpl(androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo)
    public final void animateRemoveImpl(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public final void endChangeAnimationIfNecessary(androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo)
androidx.core.view.ViewGroupCompat
androidx.appcompat.widget.ContentFrameLayout$OnAttachListener:
    public abstract void onDetachedFromWindow()
    public abstract void onAttachedFromWindow()
androidx.appcompat.app.AlertController$AlertParams$OnPrepareListViewListener
androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat
androidx.camera.camera2.Camera2AppConfig
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem$1:
    public androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem createFromParcel(android.os.Parcel)
    public androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem[] newArray(int)
androidx.customview.view.AbsSavedState$2:
    public androidx.customview.view.AbsSavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)
    public androidx.customview.view.AbsSavedState createFromParcel(android.os.Parcel)
    public androidx.customview.view.AbsSavedState[] newArray(int)
androidx.fragment.app.FragmentState$1:
    public androidx.fragment.app.FragmentState createFromParcel(android.os.Parcel)
    public androidx.fragment.app.FragmentState[] newArray(int)
androidx.recyclerview.widget.AdapterHelper$Callback:
    public abstract androidx.recyclerview.widget.RecyclerView$ViewHolder findViewHolder(int)
    public abstract void offsetPositionsForRemovingInvisible(int,int)
    public abstract void offsetPositionsForRemovingLaidOutOrNewView(int,int)
    public abstract void markViewHoldersUpdated(int,int,java.lang.Object)
    public abstract void onDispatchFirstPass(androidx.recyclerview.widget.AdapterHelper$UpdateOp)
    public abstract void onDispatchSecondPass(androidx.recyclerview.widget.AdapterHelper$UpdateOp)
    public abstract void offsetPositionsForAdd(int,int)
    public abstract void offsetPositionsForMove(int,int)
androidx.camera.camera2.impl.Camera$StateCallback:
    public final void handleErrorOnOpen(android.hardware.camera2.CameraDevice,int)
    public final void reopenCameraAfterError()
androidx.recyclerview.widget.RecyclerView$RecycledViewPool:
    public void clear()
    public androidx.recyclerview.widget.RecyclerView$ViewHolder getRecycledView(int)
    public void putRecycledView(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public void factorInCreateTime(int,long)
    public void factorInBindTime(int,long)
    public boolean willCreateInTime(int,long,long)
    public boolean willBindInTime(int,long,long)
    public void attach()
    public void detach()
    public void onAdapterChanged(androidx.recyclerview.widget.RecyclerView$Adapter,androidx.recyclerview.widget.RecyclerView$Adapter,boolean)
androidx.camera.core.ImageReaderFormatRecommender$FormatCombo:
    public static androidx.camera.core.ImageReaderFormatRecommender$FormatCombo create(int,int)
    public abstract int imageCaptureFormat()
    public abstract int imageAnalysisFormat()
androidx.appcompat.view.menu.BaseMenuWrapper:
    public final void internalClear()
    public final void internalRemoveGroup(int)
    public final void internalRemoveItem(int)
androidx.camera.core.impl.utils.Threads
androidx.appcompat.view.ActionBarPolicy
android.support.v4.media.session.MediaControllerCompat$Callback$StubApi21
androidx.arch.core.executor.ArchTaskExecutor$2
androidx.appcompat.widget.SearchView$SearchAutoComplete:
    public boolean isEmpty()
    public void showSoftInputIfNecessary()
androidx.camera.core.OptionsBundle$2:
    public int compare(androidx.camera.core.Config$Option,androidx.camera.core.Config$Option)
androidx.recyclerview.widget.AdapterHelper$UpdateOp:
    public java.lang.String cmdToString()
androidx.appcompat.view.WindowCallbackWrapper:
    public boolean dispatchKeyEvent(android.view.KeyEvent)
    public boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
    public boolean onCreatePanelMenu(int,android.view.Menu)
    public boolean onPreparePanel(int,android.view.View,android.view.Menu)
    public boolean onMenuOpened(int,android.view.Menu)
    public void onPanelClosed(int,android.view.Menu)
    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)
    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)
    public void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)
    public final android.view.Window$Callback getWrapped()
androidx.lifecycle.MethodCallsLogger:
    public java.util.Map mCalledMethods
androidx.appcompat.widget.ListPopupWindow:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
    public void setPromptPosition(int)
    public boolean isModal()
    public void setAnimationStyle(int)
    public android.view.View getAnchorView()
    public void setAnchorView(android.view.View)
    public void setEpicenterBounds(android.graphics.Rect)
    public void setDropDownGravity(int)
    public int getWidth()
    public void setWidth(int)
    public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)
    public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)
    public void setInputMethodMode(int)
    public void setSelection(int)
    public void clearListSelection()
    public boolean isInputMethodNotNeeded()
    public void setOverlapAnchor(boolean)
    public final void removePromptView()
    public final int buildDropDown()
    public final void setPopupClipToScreenEnabled(boolean)
    public final int getMaxAvailableHeight(android.view.View,int,boolean)
    public boolean mIsAnimatedFromAnchor
    public android.view.View mPromptView
    public android.graphics.drawable.Drawable mDropDownListHighlight
    public android.widget.AdapterView$OnItemSelectedListener mItemSelectedListener
    public java.lang.Runnable mShowDropDownRunnable
androidx.appcompat.view.menu.ActionMenuItem:
    public androidx.core.internal.view.SupportMenuItem setActionView()
    public androidx.core.internal.view.SupportMenuItem setActionView1()
    public androidx.core.internal.view.SupportMenuItem setShowAsActionFlags(int)
    public final int mCategoryOrder
    public int mIconResId
    public android.view.MenuItem$OnMenuItemClickListener mClickListener
androidx.camera.camera2.Camera2Config$Builder:
    public androidx.camera.camera2.Camera2Config build()
androidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams:
    public boolean isFullSpan()
    public final int getSpanIndex()
androidx.fragment.app.FragmentManager$OnBackStackChangedListener
androidx.camera.core.impl.LiveDataObservable$Result:
    public static androidx.camera.core.impl.LiveDataObservable$Result fromValue(java.lang.Object)
    public boolean completedSuccessfully()
    public java.lang.Object getValue()
    public java.lang.Throwable getError()
androidx.concurrent.futures.AbstractResolvableFuture$Failure:
    public static final androidx.concurrent.futures.AbstractResolvableFuture$Failure FALLBACK_INSTANCE
androidx.appcompat.app.AlertController:
    public static boolean shouldCenterSingleButton(android.content.Context)
    public void installContent()
    public void setTitle(java.lang.CharSequence)
    public void setCustomTitle(android.view.View)
    public void setMessage(java.lang.CharSequence)
    public void setView(int)
    public void setView(android.view.View)
    public void setView(android.view.View,int,int,int,int)
    public void setIcon(android.graphics.drawable.Drawable)
    public int getIconAttributeResId(int)
    public android.widget.ListView getListView()
    public boolean onKeyDown(android.view.KeyEvent)
    public boolean onKeyUp(android.view.KeyEvent)
    public final int selectContentView()
    public final void setupView()
    public final void setScrollIndicators(android.view.ViewGroup,android.view.View,int,int)
    public final void setupCustomContent(android.view.ViewGroup)
    public final void setupTitle(android.view.ViewGroup)
    public final void setupContent(android.view.ViewGroup)
    public final void setupButtons(android.view.ViewGroup)
android.support.v4.media.MediaBrowserCompat$SearchCallback
androidx.camera.camera2.impl.compat.params.InputConfigurationCompat:
    public static androidx.camera.camera2.impl.compat.params.InputConfigurationCompat wrap(java.lang.Object)
    public java.lang.Object unwrap()
androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat
androidx.appcompat.widget.FitWindowsViewGroup
androidx.core.widget.TintableCompoundButton
androidx.appcompat.graphics.drawable.StateListDrawable$StateListState:
    public int addStateSet(int[],android.graphics.drawable.Drawable)
    public void growArray(int,int)
androidx.camera.camera2.impl.Camera2DeviceSurfaceManager:
    public final void init(android.content.Context,androidx.camera.camera2.impl.CamcorderProfileHelper)
androidx.constraintlayout.solver.widgets.ResolutionDimension:
    public void reset()
    public void remove()
android.support.v4.media.session.MediaSessionCompat$QueueItem:
    public void <init>(java.lang.Object,android.support.v4.media.MediaDescriptionCompat,long)
    public static android.support.v4.media.session.MediaSessionCompat$QueueItem fromQueueItem(java.lang.Object)
    public static java.util.List fromQueueItemList(java.util.List)
    public java.lang.Object mItem
androidx.appcompat.view.menu.MenuBuilder:
    public static int getOrdering(int)
    public static int findInsertIndex(java.util.ArrayList,int)
    public androidx.appcompat.view.menu.MenuBuilder setDefaultShowAsAction(int)
    public void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)
    public void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback)
    public void setExclusiveItemChecked(android.view.MenuItem)
    public int findItemIndex(int)
    public int findGroupIndex(int)
    public int findGroupIndex(int,int)
    public android.content.res.Resources getResources()
    public android.content.Context getContext()
    public void changeMenuMode()
    public void onItemVisibleChanged()
    public java.util.ArrayList getActionItems()
    public java.util.ArrayList getNonActionItems()
    public androidx.appcompat.view.menu.MenuBuilder setHeaderTitleInt(java.lang.CharSequence)
    public androidx.appcompat.view.menu.MenuBuilder setHeaderTitleInt(int)
    public androidx.appcompat.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable)
    public androidx.appcompat.view.menu.MenuBuilder setHeaderIconInt(int)
    public androidx.appcompat.view.menu.MenuBuilder setHeaderViewInt(android.view.View)
    public java.lang.CharSequence getHeaderTitle()
    public android.graphics.drawable.Drawable getHeaderIcon()
    public android.view.View getHeaderView()
    public boolean getOptionalIconsVisible()
    public androidx.appcompat.view.menu.MenuItemImpl getExpandedItem()
    public void setOverrideVisibleItems(boolean)
    public final void dispatchPresenterUpdate(boolean)
    public final boolean dispatchSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder,androidx.appcompat.view.menu.MenuPresenter)
    public final androidx.appcompat.view.menu.MenuItemImpl createNewMenuItem(int,int,int,int,java.lang.CharSequence,int)
    public final void setShortcutsVisibleInner(boolean)
    public android.view.ContextMenu$ContextMenuInfo mCurrentMenuInfo
androidx.recyclerview.widget.RecyclerView$ViewCacheExtension:
    public abstract android.view.View getViewForPositionAndType(androidx.recyclerview.widget.RecyclerView$Recycler,int,int)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat
androidx.appcompat.widget.ThemeUtils:
    public static android.util.TypedValue getTypedValue()
    public static int getThemeAttrColor(android.content.Context,int,float)
    public static final int[] ACTIVATED_STATE_SET
    public static final int[] SELECTED_STATE_SET
    public static final int[] NOT_PRESSED_OR_FOCUSED_STATE_SET
androidx.core.widget.AutoScrollHelper$ClampedScroller:
    public void setRampUpDuration(int)
    public void setRampDownDuration(int)
    public void start()
    public void requestStop()
    public boolean isFinished()
    public void computeScrollDelta()
    public void setTargetVelocity(float,float)
    public int getHorizontalDirection()
    public int getVerticalDirection()
    public int getDeltaX()
    public int getDeltaY()
    public final float interpolateValue(float)
androidx.appcompat.widget.RtlSpacingHelper:
    public int getLeft()
    public int getRight()
    public int getStart()
    public int getEnd()
    public void setAbsolute(int,int)
    public void setDirection(boolean)
androidx.recyclerview.widget.LinearLayoutManager$LayoutState:
    public void assignPositionFromScrapList()
    public android.view.View nextViewInLimitedList(android.view.View)
    public final android.view.View nextViewFromScrapList()
androidx.core.view.ActionProvider:
    public abstract android.view.View onCreateActionView()
    public boolean onPerformDefaultAction()
    public boolean hasSubMenu()
    public void onPrepareSubMenu(android.view.SubMenu)
    public void setSubUiVisibilityListener(androidx.core.view.ActionProvider$SubUiVisibilityListener)
    public void reset()
    public final android.content.Context mContext
    public androidx.core.view.ActionProvider$SubUiVisibilityListener mSubUiVisibilityListener
androidx.appcompat.widget.AppCompatButton:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
androidx.camera.core.ImageCapture$Metadata
androidx.collection.ArraySet:
    public void <init>(int)
    public void ensureCapacity(int)
    public java.lang.Object valueAt(int)
    public final androidx.collection.MapCollections getCollection()
androidx.camera.camera2.impl.ImageAnalysisConfigProvider:
    public androidx.camera.core.ImageAnalysisConfig getConfig(androidx.camera.core.CameraX$LensFacing)
androidx.camera.core.CameraRepository:
    public final void attachUseCasesToCamera(androidx.camera.core.BaseCamera,java.util.Set)
    public final void detachUseCasesFromCamera(androidx.camera.core.BaseCamera,java.util.Set)
    public final java.util.Set mReleasingCameras
androidx.savedstate.SavedStateRegistry:
    public android.os.Bundle consumeRestoredStateForKey(java.lang.String)
    public void performRestore(androidx.lifecycle.Lifecycle,android.os.Bundle)
    public void performSave(android.os.Bundle)
androidx.core.text.PrecomputedTextCompat$Params:
    public android.text.TextPaint getTextPaint()
    public android.text.TextDirectionHeuristic getTextDirection()
    public int getBreakStrategy()
    public int getHyphenationFrequency()
androidx.appcompat.widget.AppCompatSpinner:
    public void <init>(android.content.Context,android.util.AttributeSet)
    public void <init>(android.content.Context,android.util.AttributeSet,int,int)
    public void <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources$Theme)
androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapper:
    public android.view.View onCreateActionView()
    public boolean onPerformDefaultAction()
    public boolean hasSubMenu()
    public void onPrepareSubMenu(android.view.SubMenu)
androidx.core.content.res.ColorStateListInflaterCompat
androidx.appcompat.view.menu.MenuItemWrapperICS$CollapsibleActionViewWrapper:
    public android.view.View getWrappedView()
androidx.camera.core.Preview:
    public void clearPipeline()
    public void removePreviewOutputListener()
    public androidx.camera.core.Preview$OnPreviewOutputUpdateListener getOnPreviewOutputUpdateListener()
    public void setOnPreviewOutputUpdateListener(androidx.camera.core.Preview$OnPreviewOutputUpdateListener)
    public void setOnPreviewOutputUpdateListener(java.util.concurrent.Executor,androidx.camera.core.Preview$OnPreviewOutputUpdateListener)
    public final void updateListener(androidx.camera.core.Preview$OnPreviewOutputUpdateListener,androidx.camera.core.Preview$PreviewOutput)
    public final androidx.camera.core.PreviewConfig$Builder mUseCaseConfigBuilder
    public androidx.camera.core.Preview$PreviewSurfaceCallback mPreviewSurfaceCallback
android.support.v4.media.session.MediaSessionCompat$Token$1:
    public android.support.v4.media.session.MediaSessionCompat$Token createFromParcel(android.os.Parcel)
    public android.support.v4.media.session.MediaSessionCompat$Token[] newArray(int)
androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor
androidx.appcompat.widget.ScrollingTabContainerView:
    public void animateToTab(int)
    public androidx.appcompat.widget.ScrollingTabContainerView$TabView createTabView(androidx.appcompat.app.ActionBar$Tab,boolean)
    public final boolean isCollapsed()
    public final void performCollapse()
    public final boolean performExpand()
    public final android.widget.Spinner createSpinner()
    public androidx.appcompat.widget.ScrollingTabContainerView$TabClickListener mTabClickListener
    public androidx.appcompat.widget.LinearLayoutCompat mTabLayout
    public android.widget.Spinner mTabSpinner
    public static final android.view.animation.Interpolator sAlphaInterpolator
androidx.fragment.app.FragmentTransitionCompat21$1:
    public final synthetic androidx.fragment.app.FragmentTransitionCompat21 this$0
androidx.camera.core.VideoCaptureConfig:
    public int getVideoFrameRate()
    public int getBitRate()
    public int getIFrameInterval()
    public int getAudioBitRate()
    public int getAudioSampleRate()
    public int getAudioChannelCount()
    public int getAudioRecordSource()
    public int getAudioMinBufferSize()
    public boolean containsOption(androidx.camera.core.Config$Option)
androidx.core.graphics.drawable.TintAwareDrawable:
    public abstract void setTint(int)
    public abstract void setTintList(android.content.res.ColorStateList)
    public abstract void setTintMode(android.graphics.PorterDuff$Mode)
androidx.appcompat.view.menu.ListMenuPresenter:
    public void <init>(int,int)
    public androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)
androidx.recyclerview.widget.GridLayoutManager:
    public static int[] calculateItemBorders(int[],int,int)
    public void setSpanCount(int)
    public final void clearPreLayoutSpanMappingCache()
    public final void cachePreLayoutSpanMapping()
    public final void ensureAnchorIsInCorrectSpan(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo,int)
    public final void guessMeasurement(float,int)
    public final void assignSpans(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,int,boolean)
    public final int computeScrollRangeWithSpanInfo(androidx.recyclerview.widget.RecyclerView$State)
    public final int computeScrollOffsetWithSpanInfo(androidx.recyclerview.widget.RecyclerView$State)
    public boolean mUsingSpansToEstimateScrollBarDimensions
androidx.camera.core.UseCaseGroupLifecycleController:
    public void <init>(androidx.lifecycle.Lifecycle,androidx.camera.core.UseCaseGroup)
androidx.lifecycle.ViewModelStore:
    public final void put(java.lang.String,androidx.lifecycle.ViewModel)
    public final androidx.lifecycle.ViewModel get(java.lang.String)
com.squareup.picasso.PicassoProvider:
    public static android.content.Context context
androidx.activity.OnBackPressedDispatcher:
    public androidx.activity.Cancellable addCancellableCallback(androidx.activity.OnBackPressedCallback)
    public void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)
androidx.camera.core.ImageProxyDownsampler$2
androidx.camera.core.impl.utils.futures.Futures$2
androidx.camera.core.UseCaseAttachState$1
android.support.v4.media.session.MediaSessionCompatApi21$QueueItem
androidx.core.view.KeyEventDispatcher:
    public static boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)
    public static boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent)
    public static boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent)
    public static android.content.DialogInterface$OnKeyListener getDialogKeyListenerPre28(android.app.Dialog)
    public static boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent)
    public static void <clinit>()
android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo
androidx.core.content.res.TypedArrayUtils
com.downloader.core.ExecutorSupplier:
    public abstract com.downloader.core.DownloadExecutor forDownloadTasks()
    public abstract java.util.concurrent.Executor forBackgroundTasks()
    public abstract java.util.concurrent.Executor forMainThreadTasks()
androidx.fragment.app.FragmentTransitionImpl$2:
    public final synthetic androidx.fragment.app.FragmentTransitionImpl this$0
io.github.prabhuomkar.pytorchandroid.ui.adapters.ModelListAdapter:
    public static synthetic android.content.Context access$000(io.github.prabhuomkar.pytorchandroid.ui.adapters.ModelListAdapter)
    public static synthetic java.util.List access$100(io.github.prabhuomkar.pytorchandroid.ui.adapters.ModelListAdapter)
    public io.github.prabhuomkar.pytorchandroid.ui.adapters.ModelListAdapter$ModelView onCreateViewHolder(android.view.ViewGroup)
    public void onBindViewHolder(io.github.prabhuomkar.pytorchandroid.ui.adapters.ModelListAdapter$ModelView,int)
androidx.camera.core.CaptureBundles
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState:
    public int addStateSet(int[],android.graphics.drawable.Drawable,int)
    public int indexOfTransition(int,int)
    public boolean isTransitionReversed(int,int)
    public boolean transitionHasReversibleFlag(int,int)
io.github.prabhuomkar.pytorchandroid.helpers.CameraHelper$1:
    public void onUpdated(androidx.camera.core.Preview$PreviewOutput)
androidx.core.view.TintableBackgroundView
androidx.appcompat.app.AppCompatViewInflater$DeclaredOnClickListener:
    public final void resolveMethod(android.content.Context)
androidx.camera.camera2.impl.Camera2CaptureCallbacks
android.support.v4.media.session.IMediaSession$Stub
androidx.appcompat.widget.ToolbarWidgetWrapper:
    public void <init>(androidx.appcompat.widget.Toolbar,boolean,int)
    public void setDefaultNavigationContentDescription(int)
    public void setTitle(java.lang.CharSequence)
    public void setSubtitle(java.lang.CharSequence)
    public void setLogo(android.graphics.drawable.Drawable)
    public void setNavigationIcon(android.graphics.drawable.Drawable)
    public void setNavigationContentDescription(java.lang.CharSequence)
    public void setNavigationContentDescription(int)
    public final int detectDisplayOptions()
    public final void setTitleInt(java.lang.CharSequence)
androidx.core.provider.FontsContractCompat$1:
    public androidx.core.provider.FontsContractCompat$TypefaceResult call()
androidx.fragment.app.Fragment$1
androidx.loader.content.Loader
androidx.camera.camera2.impl.SupportedSurfaceCombination:
    public java.util.Map getSuggestedResolutions(java.util.List,java.util.List)
    public boolean requiresCorrectedAspectRatio()
    public android.util.Rational getCorrectedAspectRatio(androidx.camera.core.UseCaseConfig)
    public androidx.camera.core.SurfaceSizeDefinition getSurfaceSizeDefinition()
    public java.util.List getLegacySupportedCombinationList()
    public java.util.List getLimitedSupportedCombinationList()
    public java.util.List getFullSupportedCombinationList()
    public java.util.List getRAWSupportedCombinationList()
    public java.util.List getBurstSupportedCombinationList()
    public java.util.List getLevel3SupportedCombinationList()
    public final java.util.List getUseCasesPriorityOrder(java.util.List)
    public final java.util.List getSupportedOutputSizes(androidx.camera.core.UseCase)
    public final boolean hasMatchingAspectRatio(android.util.Size,android.util.Rational)
    public final boolean isPossibleMod16FromAspectRatio(android.util.Size,android.util.Rational)
    public final java.util.List getAllPossibleSizeArrangements(java.util.List)
    public final android.util.Size[] getAllOutputSizesByFormat(int)
    public final void init(android.content.Context)
    public final void checkCustomization()
    public final android.util.Size getPreviewSize(android.view.WindowManager)
    public final android.util.Size getRecordSize()
androidx.lifecycle.ClassesInfoCache:
    public boolean hasLifecycleMethods(java.lang.Class)
    public final java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)
androidx.constraintlayout.widget.ConstraintLayout:
    public void solveLinearSystem()
    public androidx.constraintlayout.widget.ConstraintLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)
    public android.view.View getViewById(int)
    public final void updateHierarchy()
    public final void setChildrenConstraints()
    public final void updatePostMeasures()
    public final void setSelfDimensionBehaviour(int,int)
    public int mLastMeasureWidthSize
    public int mLastMeasureHeightSize
    public int mLastMeasureWidthMode
    public int mLastMeasureHeightMode
    public androidx.constraintlayout.solver.Metrics mMetrics
androidx.camera.core.ImageProxy:
    public abstract void setCropRect(android.graphics.Rect)
androidx.core.view.MarginLayoutParamsCompat
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat:
    public void <init>(android.content.Context)
    public static androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
    public final void setupColorAnimator(android.animation.Animator)
    public final void setupAnimatorsForTarget(java.lang.String,android.animation.Animator)
    public android.animation.Animator$AnimatorListener mAnimatorListener
    public java.util.ArrayList mAnimationCallbacks
androidx.core.content.res.FontResourcesParserCompat$ProviderResourceEntry:
    public androidx.core.provider.FontRequest getRequest()
    public int getFetchStrategy()
    public int getTimeout()
androidx.appcompat.app.AlertController$RecycleListView:
    public void setHasDecor(boolean,boolean)
androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks:
    public abstract android.graphics.drawable.Drawable createDrawableFor(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)
    public abstract boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)
    public abstract android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)
    public abstract boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)
    public abstract android.graphics.PorterDuff$Mode getTintModeForDrawableRes(int)
androidx.concurrent.futures.CallbackToFutureAdapter$Completer:
    public void addCancellationListener(java.lang.Runnable,java.util.concurrent.Executor)
    public void fireCancellationListeners()
    public final void setCompletedNormally()
androidx.camera.camera2.impl.Camera2LensFacingCameraIdFilter:
    public final java.lang.Integer cameraXLensFacingToCamera2LensFacing(androidx.camera.core.CameraX$LensFacing)
com.downloader.internal.DownloadTask:
    public static com.downloader.internal.DownloadTask create(com.downloader.request.DownloadRequest)
    public com.downloader.Response run()
    public final boolean isSuccessful()
    public final void setResumeSupportedOrNot()
    public final boolean isETagChanged(com.downloader.database.DownloadModel)
androidx.camera.camera2.impl.compat.CameraManagerCompat:
    public static androidx.camera.camera2.impl.compat.CameraManagerCompat from(android.content.Context)
    public void registerAvailabilityCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager$AvailabilityCallback)
    public void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)
    public void openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)
androidx.appcompat.widget.ScrollingTabContainerView$TabAdapter
androidx.camera.camera2.impl.VideoCaptureConfigProvider:
    public androidx.camera.core.VideoCaptureConfig getConfig(androidx.camera.core.CameraX$LensFacing)
androidx.core.widget.ListViewCompat
androidx.camera.core.UseCaseGroupRepository$UseCaseGroupSetup:
    public abstract void setup(androidx.camera.core.UseCaseGroup)
androidx.recyclerview.widget.GridLayoutManager$DefaultSpanSizeLookup:
    public int getSpanSize(int)
    public int getSpanIndex(int,int)
androidx.camera.core.OptionsBundle$1:
    public int compare(androidx.camera.core.Config$Option,androidx.camera.core.Config$Option)
androidx.camera.camera2.impl.FocusMeteringControl:
    public void addFocusMeteringOptions(androidx.camera.camera2.Camera2Config$Builder)
    public final java.util.concurrent.Executor mExecutor
    public final java.util.concurrent.ScheduledExecutorService mScheduler
    public java.lang.Integer mCurrentAfState
    public long mFocusTimeoutCounter
    public androidx.camera.camera2.impl.Camera2CameraControl$CaptureResultListener mSessionListenerForFocus
androidx.recyclerview.widget.RecyclerView$SavedState:
    public void copyFrom(androidx.recyclerview.widget.RecyclerView$SavedState)
androidx.vectordrawable.graphics.drawable.ArgbEvaluator:
    public static androidx.vectordrawable.graphics.drawable.ArgbEvaluator getInstance()
androidx.constraintlayout.solver.widgets.ConstraintWidget$1
androidx.appcompat.widget.AppCompatSeekBarHelper:
    public void setTickMark(android.graphics.drawable.Drawable)
    public void jumpDrawablesToCurrentState()
    public void drawableStateChanged()
androidx.recyclerview.widget.RecyclerView$ViewFlinger:
    public void fling(int,int)
    public void smoothScrollBy(int,int,int,android.view.animation.Interpolator)
    public void stop()
    public final void internalPostOnAnimation()
    public final float distanceInfluenceForSnapDuration(float)
    public final int computeScrollDuration(int,int,int,int)
androidx.core.text.PrecomputedTextCompat$Params$Builder
androidx.appcompat.app.AlertController$4:
    public final synthetic androidx.appcompat.app.AlertController this$0
io.github.prabhuomkar.pytorchandroid.playground.ImageClassificationActivity:
    public final void startCamera()
    public final void updateUIWithResults(java.util.List)
androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatApi24Impl:
    public static androidx.camera.camera2.impl.compat.params.OutputConfigurationCompatApi24Impl wrap(android.hardware.camera2.params.OutputConfiguration)
io.github.prabhuomkar.pytorchandroid.models.Model:
    public java.lang.String getName()
    public java.lang.String getDescription()
    public java.lang.String getPaperLink()
    public java.lang.String getSourceLink()
    public java.lang.String getDownloadLink()
    public int getSize()
    public java.lang.String imageLink
androidx.constraintlayout.solver.widgets.ConstraintWidgetGroup:
    public java.util.List getStartWidgets(int)
    public java.util.Set getWidgetsToSet(int)
    public java.util.List getWidgetsToSolve()
    public void updateUnresolvedWidgets()
io.github.prabhuomkar.pytorchandroid.helpers.PermissionsHelper:
    public static boolean hasAllPermissions(androidx.appcompat.app.AppCompatActivity)
    public static void checkPermissions(androidx.appcompat.app.AppCompatActivity,int,int[])
androidx.camera.core.ImageUtil
androidx.camera.camera2.impl.Camera2CaptureRequestBuilder
androidx.camera.core.Config$Option:
    public static androidx.camera.core.Config$Option create(java.lang.String,java.lang.Class,java.lang.Object)
    public abstract java.lang.String getId()
    public abstract java.lang.Class getValueClass()
    public abstract java.lang.Object getToken()
androidx.recyclerview.widget.OpReorderer$Callback:
    public abstract androidx.recyclerview.widget.AdapterHelper$UpdateOp obtainUpdateOp(int,int,int,java.lang.Object)
    public abstract void recycleUpdateOp(androidx.recyclerview.widget.AdapterHelper$UpdateOp)
androidx.constraintlayout.solver.widgets.ConstraintAnchor:
    public androidx.constraintlayout.solver.widgets.ResolutionAnchor getResolutionNode()
    public androidx.constraintlayout.solver.SolverVariable getSolverVariable()
    public androidx.constraintlayout.solver.widgets.ConstraintWidget getOwner()
    public androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type getType()
    public androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength getStrength()
    public androidx.constraintlayout.solver.widgets.ConstraintAnchor getTarget()
    public int getConnectionCreator()
    public boolean connect(androidx.constraintlayout.solver.widgets.ConstraintAnchor,int,androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength,int)
    public boolean isValidConnection(androidx.constraintlayout.solver.widgets.ConstraintAnchor)
    public androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType mConnectionType
androidx.appcompat.app.TwilightManager$TwilightState:
    public long yesterdaySunset
    public long todaySunrise
    public long todaySunset
    public long tomorrowSunrise
androidx.camera.core.ImageAnalysis$Defaults:
    public androidx.camera.core.ImageAnalysisConfig getConfig()
androidx.camera.camera2.impl.Camera2DeviceSurfaceManager$1:
    public boolean hasProfile(int,int)
    public final synthetic androidx.camera.camera2.impl.Camera2DeviceSurfaceManager this$0
androidx.core.content.ContextCompat:
    public static android.util.TypedValue sTempValue
androidx.core.widget.EdgeEffectCompat
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath:
    public void toPath(android.graphics.Path)
androidx.camera.camera2.impl.Camera$14:
    public final synthetic androidx.camera.camera2.impl.Camera this$0
androidx.collection.MapCollections:
    public static boolean containsAllHelper(java.util.Map,java.util.Collection)
    public static boolean removeAllHelper(java.util.Map,java.util.Collection)
    public java.util.Set getEntrySet()
    public java.util.Set getKeySet()
    public java.util.Collection getValues()
androidx.appcompat.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback:
    public abstract void onWindowVisibilityChanged(int)
    public abstract void showForSystem()
    public abstract void hideForSystem()
    public abstract void enableContentAnimations(boolean)
    public abstract void onContentScrollStarted()
    public abstract void onContentScrollStopped()
androidx.lifecycle.LiveData:
    public void observe(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer)
    public void observeForever(androidx.lifecycle.Observer)
    public java.lang.Object getValue()
    public boolean hasActiveObservers()
androidx.camera.core.CaptureBundle:
    public abstract java.util.List getCaptureStages()
androidx.appcompat.app.AppCompatDelegateImpl$3:
    public androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)
androidx.camera.camera2.impl.Camera2CameraInfo:
    public androidx.camera.core.CameraX$LensFacing getLensFacing()
    public int getSensorOrientation()
    public int getSupportedHardwareLevel()
    public final void logDeviceInfo()
    public final void logDeviceLevel()
    public androidx.lifecycle.MutableLiveData mFlashAvailability
com.downloader.core.PriorityThreadFactory:
    public static synthetic int access$000(com.downloader.core.PriorityThreadFactory)
androidx.camera.core.ProcessingSurfaceTexture$2:
    public final synthetic androidx.camera.core.ProcessingSurfaceTexture this$0
androidx.core.view.MenuItemCompat
androidx.appcompat.app.ActionBar:
    public boolean openOptionsMenu()
    public boolean closeOptionsMenu()
    public boolean invalidateOptionsMenu()
    public boolean onMenuKeyEvent()
    public void onDestroy()
androidx.concurrent.futures.AbstractResolvableFuture:
    public static java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String,java.lang.Throwable)
    public void interruptTask()
    public void afterDone()
    public final void releaseWaiters()
    public final androidx.concurrent.futures.AbstractResolvableFuture$Listener clearListeners(androidx.concurrent.futures.AbstractResolvableFuture$Listener)
    public final java.lang.String userObjectToString(java.lang.Object)
androidx.loader.content.Loader$OnLoadCompleteListener
android.support.v4.media.session.MediaSessionCompat$QueueItem$1:
    public android.support.v4.media.session.MediaSessionCompat$QueueItem createFromParcel(android.os.Parcel)
    public android.support.v4.media.session.MediaSessionCompat$QueueItem[] newArray(int)
androidx.recyclerview.widget.RecyclerView:
    public void initAdapterManager()
    public boolean removeAnimatingView(android.view.View)
    public void addItemDecoration(androidx.recyclerview.widget.RecyclerView$ItemDecoration,int)
    public void removeItemDecoration(androidx.recyclerview.widget.RecyclerView$ItemDecoration)
    public void addOnScrollListener(androidx.recyclerview.widget.RecyclerView$OnScrollListener)
    public void removeOnScrollListener(androidx.recyclerview.widget.RecyclerView$OnScrollListener)
    public void smoothScrollBy(int,int)
    public void smoothScrollBy(int,int,android.view.animation.Interpolator)
    public void smoothScrollBy(int,int,android.view.animation.Interpolator,int)
    public boolean fling(int,int)
    public void absorbGlows(int,int)
    public void addOnItemTouchListener(androidx.recyclerview.widget.RecyclerView$OnItemTouchListener)
    public void removeOnItemTouchListener(androidx.recyclerview.widget.RecyclerView$OnItemTouchListener)
    public void onExitLayoutOrScroll()
    public boolean isAccessibilityEnabled()
    public boolean shouldDeferAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    public void animateAppearance(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public void animateDisappearance(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo)
    public void saveOldPositions()
    public void offsetPositionRecordsForMove(int,int)
    public void offsetPositionRecordsForInsert(int,int)
    public void viewRangeUpdate(int,int,java.lang.Object)
    public boolean canReuseUpdatedViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public void processDataSetCompletelyChanged(boolean)
    public void markKnownViewsInvalid()
    public androidx.recyclerview.widget.RecyclerView$ViewHolder findContainingViewHolder(android.view.View)
    public androidx.recyclerview.widget.RecyclerView$ViewHolder findViewHolderForPosition(int,boolean)
    public androidx.recyclerview.widget.RecyclerView$ViewHolder findViewHolderForItemId(long)
    public void offsetChildrenVertical(int)
    public void onChildAttachedToWindow()
    public void onChildDetachedFromWindow()
    public void offsetChildrenHorizontal(int)
    public void getDecoratedBoundsWithMargins(android.view.View,android.graphics.Rect)
    public void onScrolled()
    public void onScrollStateChanged()
    public void dispatchOnScrollStateChanged(int)
    public void repositionShadowingViews()
    public void dispatchChildAttached(android.view.View)
    public void dispatchPendingImportantForAccessibilityChanges()
    public void initFastScroller(android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable)
    public final void initAutofill()
    public final void createLayoutManager(android.content.Context,java.lang.String,android.util.AttributeSet,int,int)
    public final java.lang.String getFullClassName(android.content.Context,java.lang.String)
    public final void initChildrenHelper()
    public final void setAdapterInternal(androidx.recyclerview.widget.RecyclerView$Adapter,boolean,boolean)
    public final boolean hasUpdatedView()
    public final void pullGlows(float,float,float,float)
    public final void releaseGlows()
    public final boolean isPreferredNextFocus(android.view.View,android.view.View,int)
    public final boolean dispatchToOnItemTouchListeners(android.view.MotionEvent)
    public final void dispatchContentChangedIfNecessary()
    public final boolean predictiveItemAnimationsEnabled()
    public final void saveFocusInfo()
    public final void resetFocusInfo()
    public final android.view.View findNextViewToFocus()
    public final void recoverFocusFromState()
    public final int getDeepestFocusedViewWithId(android.view.View)
    public final void dispatchLayoutStep3()
    public final void handleMissingPreInfoForChangeError(long,androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ViewHolder)
    public final boolean didChildRangeChange(int,int)
    public final void animateChange(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,androidx.recyclerview.widget.RecyclerView$ItemAnimator$ItemHolderInfo,boolean,boolean)
    public final java.lang.Runnable mUpdateChildViewsRunnable
    public java.util.List mOnChildAttachStateListeners
    public static final boolean POST_UPDATES_ON_ANIMATION
androidx.appcompat.app.AppCompatDelegate:
    public static int getDefaultNightMode()
    public abstract androidx.appcompat.app.ActionBar getSupportActionBar()
    public abstract android.view.MenuInflater getMenuInflater()
    public abstract void onPostCreate(android.os.Bundle)
    public abstract void onConfigurationChanged(android.content.res.Configuration)
    public abstract void onStart()
    public abstract void onPostResume()
    public void setTheme(int)
    public abstract android.view.View findViewById(int)
    public void attachBaseContext(android.content.Context)
    public abstract void onDestroy()
    public abstract void onSaveInstanceState(android.os.Bundle)
    public int getLocalNightMode()
    public static int sDefaultNightMode
androidx.camera.core.CameraDeviceStateCallbacks
androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener:
    public abstract void onFitSystemWindows(android.graphics.Rect)
androidx.constraintlayout.solver.widgets.Guideline$1
io.github.prabhuomkar.pytorchandroid.datasets.imagenet.Runner
androidx.camera.camera2.impl.compat.CameraManagerCompatBaseImpl:
    public android.hardware.camera2.CameraManager getCameraManager()
android.support.v4.media.MediaDescriptionCompatApi21
android.support.v4.media.session.MediaSessionCompat$Token:
    public void <init>(java.lang.Object,android.support.v4.media.session.IMediaSession,android.os.Bundle)
    public android.support.v4.media.session.IMediaSession getExtraBinder()
    public void setExtraBinder(android.support.v4.media.session.IMediaSession)
    public void setSessionToken2Bundle(android.os.Bundle)
    public android.os.Bundle mSessionToken2Bundle
androidx.camera.core.ImageAnalysis$2:
    public final synthetic androidx.camera.core.ImageAnalysis this$0
androidx.core.provider.FontsContractCompat$FontInfo:
    public android.net.Uri getUri()
    public int getTtcIndex()
    public int getWeight()
    public boolean isItalic()
    public int getResultCode()
androidx.constraintlayout.solver.ArrayRow:
    public boolean hasKeyVariable()
    public java.lang.String toReadableString()
    public void reset()
    public boolean hasVariable(androidx.constraintlayout.solver.SolverVariable)
    public androidx.constraintlayout.solver.ArrayRow createRowDefinition(androidx.constraintlayout.solver.SolverVariable,int)
    public androidx.constraintlayout.solver.ArrayRow createRowEquals(androidx.constraintlayout.solver.SolverVariable,int)
    public androidx.constraintlayout.solver.ArrayRow createRowEquals(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)
    public androidx.constraintlayout.solver.ArrayRow addSingleError(androidx.constraintlayout.solver.SolverVariable,int)
    public androidx.constraintlayout.solver.ArrayRow createRowEqualMatchDimensions(float,float,float,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable)
    public androidx.constraintlayout.solver.ArrayRow createRowCentering(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,float,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)
    public androidx.constraintlayout.solver.ArrayRow createRowDimensionPercent(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float)
    public void ensurePositiveConstant()
    public boolean chooseSubject(androidx.constraintlayout.solver.LinearSystem)
    public androidx.constraintlayout.solver.SolverVariable pickPivot(androidx.constraintlayout.solver.SolverVariable)
    public boolean isEmpty()
    public androidx.constraintlayout.solver.SolverVariable getPivotCandidate(androidx.constraintlayout.solver.LinearSystem,boolean[])
    public void clear()
    public void initFromRow(androidx.constraintlayout.solver.LinearSystem$Row)
    public androidx.constraintlayout.solver.SolverVariable getKey()
io.github.prabhuomkar.pytorchandroid.helpers.UIHelper
androidx.appcompat.app.ToolbarActionBar
org.pytorch.torchvision.TensorImageUtils:
    public static org.pytorch.Tensor imageYUV420CenterCropToFloat32Tensor(android.media.Image,int,int,int,float[],float[])
    public static void imageYUV420CenterCropToFloatBuffer(android.media.Image,int,int,int,float[],float[],java.nio.FloatBuffer,int)
    public static void checkOutBufferCapacity(java.nio.FloatBuffer,int,int,int)
    public static void checkTensorSize(int,int)
    public static void checkNormStdArg(float[])
    public static void checkNormMeanArg(float[])
    public static float[] TORCHVISION_NORM_STD_RGB
androidx.camera.core.ImageReaderFormatRecommender
androidx.core.widget.TintableImageSourceView
androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo:
    public void saveSpanReferenceLines(androidx.recyclerview.widget.StaggeredGridLayoutManager$Span[])
    public void assignCoordinateFromPadding(int)
androidx.appcompat.widget.DropDownListView$GateKeeperDrawable:
    public void setEnabled(boolean)
androidx.core.util.Preconditions
androidx.core.widget.CompoundButtonCompat
io.github.prabhuomkar.pytorchandroid.helpers.DataHelper
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper$1:
    public android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper createFromParcel(android.os.Parcel)
    public android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper[] newArray(int)
androidx.camera.core.ImageCapture$ImageCaptureRequest:
    public void dispatchImage(androidx.camera.core.ImageProxy)
    public int mRotationDegrees
    public android.util.Rational mTargetRatio
    public java.util.concurrent.Executor mListenerExecutor
    public androidx.camera.core.ImageCapture$OnImageCapturedListener mListener
androidx.appcompat.app.AppCompatDialog:
    public static int getThemeResId(android.content.Context,int)
    public boolean supportRequestWindowFeature(int)
androidx.constraintlayout.solver.LinearSystem:
    public static void getMetrics()
    public static androidx.constraintlayout.solver.ArrayRow createRowDimensionPercent(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float,boolean)
    public static void <clinit>()
    public androidx.constraintlayout.solver.SolverVariable createExtraVariable()
    public void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int)
    public void minimize()
    public androidx.constraintlayout.solver.Cache getCache()
    public void addGreaterBarrier(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,boolean)
    public void addLowerBarrier(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,boolean)
    public void addCenterPoint(androidx.constraintlayout.solver.widgets.ConstraintWidget,androidx.constraintlayout.solver.widgets.ConstraintWidget,float,int)
    public final void addError(androidx.constraintlayout.solver.ArrayRow)
    public final int enforceBFS()
    public androidx.constraintlayout.solver.ArrayRow[] tempClientsCopy
    public static androidx.constraintlayout.solver.Metrics sMetrics
androidx.camera.core.LensFacingCameraIdFilter:
    public static androidx.camera.core.LensFacingCameraIdFilter createLensFacingCameraIdFilterWithIdSet(androidx.camera.core.CameraX$LensFacing,java.util.Set)
    public static androidx.camera.core.LensFacingCameraIdFilter createLensFacingCameraIdFilter(androidx.camera.core.CameraX$LensFacing)
android.support.v4.media.MediaDescriptionCompat$Builder
androidx.camera.camera2.impl.SupportedSurfaceCombination$CompareSizesByArea:
    public int compare(android.util.Size,android.util.Size)
androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo:
    public void <init>(androidx.recyclerview.widget.RecyclerView$ViewHolder,androidx.recyclerview.widget.RecyclerView$ViewHolder)
androidx.fragment.app.FragmentActivity:
    public final android.view.View dispatchFragmentsOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)
    public void onResumeFragments()
    public boolean onPrepareOptionsPanel(android.view.View,android.view.Menu)
    public void onAttachFragment()
    public final void markFragmentsCreated()
    public boolean mRequestedPermissionsFromFragment
    public boolean mStartedIntentSenderFromFragment
    public boolean mStartedActivityFromFragment
com.downloader.database.DbHelper
androidx.appcompat.view.ViewPropertyAnimatorCompatSet:
    public androidx.appcompat.view.ViewPropertyAnimatorCompatSet play(androidx.core.view.ViewPropertyAnimatorCompat)
    public androidx.appcompat.view.ViewPropertyAnimatorCompatSet playSequentially(androidx.core.view.ViewPropertyAnimatorCompat,androidx.core.view.ViewPropertyAnimatorCompat)
    public void onAnimationsEnded()
    public androidx.appcompat.view.ViewPropertyAnimatorCompatSet setDuration(long)
    public androidx.appcompat.view.ViewPropertyAnimatorCompatSet setInterpolator(android.view.animation.Interpolator)
    public androidx.appcompat.view.ViewPropertyAnimatorCompatSet setListener(androidx.core.view.ViewPropertyAnimatorListener)
androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture:
    public boolean set(java.lang.Object)
    public boolean setException(java.lang.Throwable)
androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState:
    public boolean hasPanelItems()
    public void setStyle(android.content.Context)
    public androidx.appcompat.view.menu.MenuView getListMenuView(androidx.appcompat.view.menu.MenuPresenter$Callback)
androidx.camera.core.ProcessingImageReader$1
androidx.core.view.ViewCompat$4:
    public java.lang.CharSequence frameworkGet(android.view.View)
androidx.arch.core.internal.FastSafeIterableMap:
    public java.util.Map$Entry ceil(java.lang.Object)
androidx.appcompat.widget.Toolbar:
    public boolean canShowOverflowMenu()
    public boolean isOverflowMenuShowPending()
    public boolean hideOverflowMenu()
    public void setMenu(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.widget.ActionMenuPresenter)
    public void dismissPopupMenus()
    public boolean hasExpandedActionView()
    public void collapseActionView()
    public void setTitleTextAppearance(android.content.Context,int)
    public void setSubtitleTextAppearance(android.content.Context,int)
    public void inflateMenu(int)
    public void setContentInsetsRelative(int,int)
    public androidx.appcompat.widget.Toolbar$LayoutParams generateLayoutParams(android.util.AttributeSet)
    public void removeChildrenForExpandedActionView()
    public void addChildrenForExpandedActionView()
    public final void ensureLogoView()
    public final void postShowOverflowMenu()
    public final boolean shouldCollapse()
    public final int getViewListMeasuredWidth(java.util.List,int[])
    public final int getChildVerticalGravity(int)
    public androidx.appcompat.view.menu.MenuPresenter$Callback mActionMenuPresenterCallback
    public androidx.appcompat.view.menu.MenuBuilder$Callback mMenuBuilderCallback
androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton:
    public final float[] mTempPts
androidx.fragment.app.FragmentManagerViewModel:
    public static androidx.fragment.app.FragmentManagerViewModel getInstance(androidx.lifecycle.ViewModelStore)
    public boolean isCleared()
    public boolean addRetainedFragment(androidx.fragment.app.Fragment)
    public java.util.Collection getRetainedFragments()
    public boolean removeRetainedFragment(androidx.fragment.app.Fragment)
    public androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)
    public androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment)
    public void clearNonConfigState(androidx.fragment.app.Fragment)
androidx.lifecycle.LiveData$AlwaysActiveObserver:
    public final synthetic androidx.lifecycle.LiveData this$0
androidx.camera.core.ProcessingImageReader$2
androidx.camera.core.CameraCaptureCallbacks$ComboCameraCaptureCallback:
    public java.util.List getCallbacks()
    public final java.util.List mCallbacks
androidx.camera.camera2.impl.Camera2CameraControl:
    public void setPreviewAspectRatio(android.util.Rational)
    public androidx.camera.core.Config getSessionOptions()
    public int getSupportedAfMode(int)
    public final int getDefaultTemplate()
    public final int getSupportedAeMode(int)
    public final int getSupportedAwbMode(int)
    public volatile android.util.Rational mPreviewAspectRatio
androidx.appcompat.widget.AppCompatHintHelper
androidx.recyclerview.widget.RecyclerView$LayoutManager:
    public final boolean isItemPrefetchEnabled()
    public void dispatchAttachedToWindow(androidx.recyclerview.widget.RecyclerView)
    public void dispatchDetachedFromWindow(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$Recycler)
    public boolean isAttachedToWindow()
    public boolean removeCallbacks(java.lang.Runnable)
    public void onAttachedToWindow()
    public void onDetachedFromWindow()
    public boolean getClipToPadding()
    public boolean isSmoothScrolling()
    public void addDisappearingView(android.view.View)
    public void addDisappearingView(android.view.View,int)
    public void addView(android.view.View,int)
    public void removeView(android.view.View)
    public int getBaseline()
    public void detachViewAt(int)
    public void attachView(android.view.View,int,androidx.recyclerview.widget.RecyclerView$LayoutParams)
    public void attachView(android.view.View,int)
    public void moveView(int,int)
    public int getWidthMode()
    public int getHeightMode()
    public int getWidth()
    public int getHeight()
    public void measureChildWithMargins(android.view.View,int,int)
    public void getDecoratedBoundsWithMargins(android.view.View,android.graphics.Rect)
    public int getDecoratedLeft(android.view.View)
    public int getDecoratedTop(android.view.View)
    public int getDecoratedRight(android.view.View)
    public int getDecoratedBottom(android.view.View)
    public void calculateItemDecorationsForChild(android.view.View,android.graphics.Rect)
    public int getTopDecorationHeight(android.view.View)
    public int getBottomDecorationHeight(android.view.View)
    public int getLeftDecorationWidth(android.view.View)
    public int getRightDecorationWidth(android.view.View)
    public android.view.View onInterceptFocusSearch()
    public boolean requestChildRectangleOnScreen(androidx.recyclerview.widget.RecyclerView,android.view.View,android.graphics.Rect,boolean)
    public boolean isViewPartiallyVisible(android.view.View,boolean)
    public boolean onRequestChildFocus(androidx.recyclerview.widget.RecyclerView)
    public boolean onRequestChildFocus1(androidx.recyclerview.widget.RecyclerView,android.view.View,android.view.View)
    public void onAdapterChanged()
    public boolean onAddFocusables()
    public void onItemsUpdated()
    public void onMeasure(int,int)
    public void setMeasuredDimension(int,int)
    public void stopSmoothScroller()
    public void onInitializeAccessibilityNodeInfo(androidx.core.view.accessibility.AccessibilityNodeInfoCompat)
    public void onInitializeAccessibilityNodeInfo(androidx.recyclerview.widget.RecyclerView$Recycler,androidx.recyclerview.widget.RecyclerView$State,androidx.core.view.accessibility.AccessibilityNodeInfoCompat)
    public void onInitializeAccessibilityEvent1(android.view.accessibility.AccessibilityEvent)
    public void requestSimpleAnimationsInNextLayout()
    public int getSelectionModeForAccessibility()
    public boolean isLayoutHierarchical()
    public boolean performAccessibilityAction(int,android.os.Bundle)
    public boolean performAccessibilityAction(int)
    public boolean performAccessibilityActionForItem(android.view.View,int,android.os.Bundle)
    public boolean performAccessibilityActionForItem()
    public boolean hasFlexibleChildInBothOrientations()
    public final void detachViewInternal(int)
    public final void scrapOrRecycleView(androidx.recyclerview.widget.RecyclerView$Recycler,int,android.view.View)
    public final int[] getChildRectangleOnScreenScrollAmount(android.view.View,android.graphics.Rect)
    public final boolean isFocusedChildVisibleAfterScrolling(androidx.recyclerview.widget.RecyclerView,int,int)
    public androidx.recyclerview.widget.RecyclerView$SmoothScroller mSmoothScroller
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraCallback
org.pytorch.Module
androidx.camera.core.VideoCapture:
    public static android.media.MediaFormat createMediaFormat(androidx.camera.core.VideoCaptureConfig,android.util.Size)
    public final android.media.MediaFormat createAudioMediaFormat()
    public final android.media.AudioRecord autoConfigAudioRecordSource(androidx.camera.core.VideoCaptureConfig)
    public final void setAudioParametersByCamcorderProfile(android.util.Size,java.lang.String)
    public final android.os.HandlerThread mVideoHandlerThread
    public final android.os.HandlerThread mAudioHandlerThread
    public int mVideoTrackIndex
    public int mAudioTrackIndex
    public int mAudioBufferSize
    public boolean mIsRecording
    public static final androidx.camera.core.VideoCapture$Metadata EMPTY_METADATA
androidx.camera.core.ImageCapture$Defaults:
    public androidx.camera.core.ImageCaptureConfig getConfig()
androidx.camera.core.UseCaseAttachState$UseCaseAttachInfo:
    public androidx.camera.core.SessionConfig getSessionConfig()
    public boolean getOnline()
    public void setOnline(boolean)
    public boolean getActive()
    public void setActive(boolean)
androidx.core.view.GravityCompat
androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState:
    public void invalidateCache()
    public final int getCapacity()
    public final int getChildCount()
    public final boolean setLayoutDirection(int,int)
    public final void applyTheme(android.content.res.Resources$Theme)
    public final void setVariablePadding(boolean)
    public final android.graphics.Rect getConstantPadding()
    public final void setConstantSize(boolean)
    public final boolean isConstantSize()
    public final int getConstantWidth()
    public final int getConstantHeight()
    public final int getConstantMinimumWidth()
    public final int getConstantMinimumHeight()
    public final void setEnterFadeDuration(int)
    public final void setExitFadeDuration(int)
    public final int getOpacity()
    public void growArray(int,int)
    public final android.graphics.drawable.Drawable prepareDrawable(android.graphics.drawable.Drawable)
androidx.appcompat.app.AlertController$AlertParams$1
androidx.recyclerview.widget.ScrollbarHelper
com.downloader.internal.stream.FileDownloadRandomAccessFile:
    public static com.downloader.internal.stream.FileDownloadRandomAccessFile create(java.io.File)
    public void write(byte[],int,int)
    public void flushAndSync()
    public void close()
    public void seek(long)
androidx.camera.core.VideoCapture$3:
    public final synthetic androidx.camera.core.VideoCapture this$0
androidx.arch.core.executor.DefaultTaskExecutor:
    public void executeOnDiskIO(java.lang.Runnable)
androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener:
    public androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener withFinalVisibility(androidx.core.view.ViewPropertyAnimatorCompat,int)
androidx.camera.core.SessionConfig$ValidatingBuilder:
    public boolean isValid()
androidx.core.view.NestedScrollingParent
androidx.camera.core.ImageReaderProxy:
    public abstract int getImageFormat()
    public abstract void setOnImageAvailableListener(androidx.camera.core.ImageReaderProxy$OnImageAvailableListener,android.os.Handler)
androidx.appcompat.widget.MenuPopupWindow:
    public void setEnterTransition(java.lang.Object)
    public void setExitTransition(java.lang.Object)
    public void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener)
    public void setTouchModal(boolean)
androidx.appcompat.app.AppCompatDelegateImpl$4:
    public void <init>(androidx.appcompat.app.AppCompatDelegateImpl)
    public void onFitSystemWindows(android.graphics.Rect)
androidx.camera.camera2.Camera2Config$1:
    public boolean onOptionMatched(androidx.camera.core.Config$Option)
    public final synthetic androidx.camera.camera2.Camera2Config this$0
androidx.appcompat.view.menu.MenuPopup:
    public static androidx.appcompat.view.menu.MenuAdapter toMenuAdapter(android.widget.ListAdapter)
    public void setEpicenterBounds(android.graphics.Rect)
    public android.graphics.Rect getEpicenterBounds()
androidx.core.graphics.drawable.DrawableCompat
androidx.constraintlayout.solver.widgets.Guideline:
    public int getOrientation()
    public void setGuidePercent(float)
    public void setGuideBegin(int)
    public void setGuideEnd(int)
    public int mMinimumPosition
    public androidx.constraintlayout.solver.widgets.Rectangle mHead
    public int mHeadSize
androidx.appcompat.view.menu.ExpandedMenuView:
    public int mAnimations
androidx.camera.core.AutoValue_Config_Option:
    public java.lang.String getId()
    public java.lang.Class getValueClass()
    public java.lang.Object getToken()
androidx.concurrent.futures.ResolvableFuture:
    public static androidx.concurrent.futures.ResolvableFuture create()
androidx.collection.MapCollections$EntrySet:
    public boolean add()
androidx.camera.core.SessionConfig:
    public androidx.camera.core.Config getImplementationOptions()
    public int getTemplateType()
    public java.util.List getDeviceStateCallbacks()
    public java.util.List getSessionStateCallbacks()
    public java.util.List getRepeatingCameraCaptureCallbacks()
    public java.util.List getErrorListeners()
    public java.util.List getSingleCameraCaptureCallbacks()
    public androidx.camera.core.CaptureConfig getRepeatingCaptureConfig()
androidx.recyclerview.widget.RecyclerView$6:
    public void offsetPositionsForRemovingInvisible(int,int)
    public void offsetPositionsForRemovingLaidOutOrNewView(int,int)
    public void onDispatchFirstPass(androidx.recyclerview.widget.AdapterHelper$UpdateOp)
    public void onDispatchSecondPass(androidx.recyclerview.widget.AdapterHelper$UpdateOp)
androidx.core.widget.AutoScrollHelper:
    public static int constrain(int,int,int)
    public androidx.core.widget.AutoScrollHelper setEnabled(boolean)
    public androidx.core.widget.AutoScrollHelper setMaximumVelocity(float,float)
    public androidx.core.widget.AutoScrollHelper setMinimumVelocity(float,float)
    public androidx.core.widget.AutoScrollHelper setRelativeVelocity(float,float)
    public androidx.core.widget.AutoScrollHelper setEdgeType(int)
    public androidx.core.widget.AutoScrollHelper setRelativeEdges(float,float)
    public androidx.core.widget.AutoScrollHelper setMaximumEdges(float,float)
    public androidx.core.widget.AutoScrollHelper setActivationDelay(int)
    public androidx.core.widget.AutoScrollHelper setRampUpDuration(int)
    public androidx.core.widget.AutoScrollHelper setRampDownDuration(int)
    public abstract void scrollTargetBy(int,int)
    public abstract boolean canTargetScrollHorizontally(int)
    public abstract boolean canTargetScrollVertically(int)
    public void cancelTargetTouch()
    public final void startAnimating()
    public final float getEdgeValue(float,float,float,float)
    public boolean mExclusive
androidx.camera.core.impl.utils.futures.ImmediateFuture:
    public static com.google.common.util.concurrent.ListenableFuture nullFuture()
com.facebook.soloader.nativeloader.NativeLoaderDelegate
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat:
    public static androidx.core.view.accessibility.AccessibilityNodeInfoCompat wrap(android.view.accessibility.AccessibilityNodeInfo)
    public static java.lang.String getActionSymbolicName(int)
    public static void <clinit>()
    public android.view.accessibility.AccessibilityNodeInfo unwrap()
    public int getActions()
    public void addAction(int)
    public void addAction(androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat)
    public boolean performAction(int,android.os.Bundle)
    public void getBoundsInParent(android.graphics.Rect)
    public void getBoundsInScreen(android.graphics.Rect)
    public boolean isCheckable()
    public boolean isChecked()
    public boolean isFocusable()
    public boolean isFocused()
    public boolean isSelected()
    public boolean isClickable()
    public boolean isLongClickable()
    public boolean isEnabled()
    public boolean isPassword()
    public boolean isScrollable()
    public void setScrollable(boolean)
    public java.lang.CharSequence getPackageName()
    public java.lang.CharSequence getClassName()
    public void setClassName(java.lang.CharSequence)
    public java.lang.CharSequence getText()
    public void addSpansToExtras(java.lang.CharSequence,android.view.View)
    public java.lang.CharSequence getContentDescription()
    public java.lang.String getViewIdResourceName()
    public void setCollectionInfo(java.lang.Object)
    public void setPaneTitle(java.lang.CharSequence)
    public void setScreenReaderFocusable(boolean)
    public void setHeading(boolean)
    public final android.util.SparseArray getOrCreateSpansFromViewTags(android.view.View)
    public final android.util.SparseArray getSpansFromViewTags(android.view.View)
    public final int idForClickableSpan(android.text.style.ClickableSpan,android.util.SparseArray)
    public final boolean hasSpans()
    public final void clearExtrasSpans()
    public final void addSpanLocationToExtras(android.text.style.ClickableSpan,android.text.Spanned,int)
    public final void removeCollectedSpans(android.view.View)
androidx.appcompat.widget.SuggestionsAdapter:
    public void setQueryRefinement(int)
    public android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)
    public final java.lang.CharSequence formatUrl(java.lang.CharSequence)
    public final void setViewText(android.widget.TextView,java.lang.CharSequence)
    public final android.graphics.drawable.Drawable getIcon1(android.database.Cursor)
    public final android.graphics.drawable.Drawable getIcon2(android.database.Cursor)
    public final void setViewDrawable(android.widget.ImageView,android.graphics.drawable.Drawable,int)
    public final android.graphics.drawable.Drawable getDrawable(android.net.Uri)
    public final android.graphics.drawable.Drawable checkIconCache(java.lang.String)
    public final void storeInIconCache(java.lang.String,android.graphics.drawable.Drawable)
    public final android.graphics.drawable.Drawable getDefaultIcon1()
    public final android.graphics.drawable.Drawable getActivityIconWithCache(android.content.ComponentName)
    public final android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)
    public final android.app.SearchManager mSearchManager
androidx.camera.core.impl.utils.executor.HandlerScheduledExecutorService:
    public static java.util.concurrent.ScheduledExecutorService currentThreadExecutor()
androidx.core.view.WindowInsetsCompat:
    public static androidx.core.view.WindowInsetsCompat wrap(java.lang.Object)
    public static java.lang.Object unwrap(androidx.core.view.WindowInsetsCompat)
    public int getSystemWindowInsetLeft()
    public int getSystemWindowInsetTop()
    public int getSystemWindowInsetRight()
    public int getSystemWindowInsetBottom()
    public androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int)
androidx.appcompat.widget.TooltipPopup:
    public static android.view.View getAppRootView(android.view.View)
    public void show(android.view.View,int,int,boolean,java.lang.CharSequence)
    public boolean isShowing()
    public final void computePosition(android.view.View,int,int,boolean,android.view.WindowManager$LayoutParams)
androidx.appcompat.app.AppCompatActivity:
    public void onCreateSupportNavigateUpTaskStack(androidx.core.app.TaskStackBuilder)
    public void onPrepareSupportNavigateUpTaskStack()
    public boolean onSupportNavigateUp()
    public boolean supportShouldUpRecreateTask(android.content.Intent)
    public void supportNavigateUpTo(android.content.Intent)
    public void onSupportContentChanged()
    public void onNightModeChanged()
    public final boolean performMenuItemShortcut(android.view.KeyEvent)
androidx.appcompat.widget.ForwardingListener:
    public static boolean pointInView(android.view.View,float,float,float)
    public void onLongPress()
    public final boolean onTouchObserved(android.view.MotionEvent)
    public final boolean onTouchForwarded(android.view.MotionEvent)
    public final boolean toLocalMotionEvent(android.view.View,android.view.MotionEvent)
    public final boolean toGlobalMotionEvent(android.view.View,android.view.MotionEvent)
androidx.recyclerview.widget.ViewInfoStore$InfoRecord:
    public static void drainCache()
androidx.appcompat.widget.AppCompatRatingBar:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
androidx.appcompat.widget.ScrollingTabContainerView$1
android.support.v4.media.session.PlaybackStateCompatApi22
androidx.appcompat.view.ViewPropertyAnimatorCompatSet$1:
    public void onEnd()
androidx.constraintlayout.widget.ConstraintSet$Constraint:
    public synthetic void <init>(androidx.constraintlayout.widget.ConstraintSet$1)
    public static synthetic void access$200(androidx.constraintlayout.widget.ConstraintSet$Constraint,androidx.constraintlayout.widget.ConstraintHelper,int,androidx.constraintlayout.widget.Constraints$LayoutParams)
    public static synthetic void access$300(androidx.constraintlayout.widget.ConstraintSet$Constraint,int,androidx.constraintlayout.widget.Constraints$LayoutParams)
    public androidx.constraintlayout.widget.ConstraintSet$Constraint clone()
    public final void fillFromConstraints(androidx.constraintlayout.widget.ConstraintHelper,int,androidx.constraintlayout.widget.Constraints$LayoutParams)
    public final void fillFrom(int,androidx.constraintlayout.widget.ConstraintLayout$LayoutParams)
androidx.camera.core.CheckedSurfaceTexture$2:
    public final synthetic androidx.camera.core.CheckedSurfaceTexture this$0
androidx.camera.core.AndroidImageProxy:
    public synchronized void setCropRect(android.graphics.Rect)
androidx.camera.core.ImageCapture$4:
    public final synthetic androidx.camera.core.ImageCapture this$0
androidx.camera.camera2.impl.compat.CameraCaptureSessionCompat:
    public static androidx.camera.camera2.impl.compat.CameraCaptureSessionCompat$CameraCaptureSessionCompatImpl chooseImplementation()
    public static int captureBurstRequests(android.hardware.camera2.CameraCaptureSession,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)
    public static int setSingleRepeatingRequest(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener:
    public void onStartEnterTransition()
    public void startListening()
    public boolean isReady()
    public void cancelTransaction()
androidx.core.graphics.TypefaceCompatApi21Impl:
    public static java.lang.Object newFamily()
    public static android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object)
    public static void <clinit>()
    public final java.io.File getFile(android.os.ParcelFileDescriptor)
androidx.appcompat.widget.AppCompatDrawableManager:
    public static synthetic android.graphics.PorterDuff$Mode access$000()
androidx.recyclerview.widget.DividerItemDecoration:
    public void setOrientation(int)
    public final void drawVertical(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView)
    public final void drawHorizontal(android.graphics.Canvas,androidx.recyclerview.widget.RecyclerView)
androidx.camera.camera2.impl.compat.params.SessionConfigurationCompat:
    public static java.util.List transformToCompat(java.util.List)
    public void setSessionParameters(android.hardware.camera2.CaptureRequest)
    public java.lang.Object unwrap()
androidx.core.view.ViewCompat:
    public static void setImportantForAutofill(android.view.View,int)
    public static androidx.core.view.AccessibilityDelegateCompat getAccessibilityDelegate(android.view.View)
    public static int getAccessibilityLiveRegion(android.view.View)
    public static android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
    public static androidx.core.view.ViewCompat$AccessibilityViewProperty screenReaderFocusableProperty()
    public static java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
    public static androidx.core.view.ViewCompat$AccessibilityViewProperty paneTitleProperty()
    public static boolean isAccessibilityHeading(android.view.View)
    public static androidx.core.view.ViewCompat$AccessibilityViewProperty accessibilityHeadingProperty()
    public static void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int)
    public static final java.util.concurrent.atomic.AtomicInteger sNextGeneratedId
    public static java.lang.reflect.Field sMinWidthField
    public static boolean sMinWidthFieldFetched
    public static java.lang.reflect.Field sMinHeightField
    public static boolean sMinHeightFieldFetched
    public static java.util.WeakHashMap sTransitionNameMap
    public static final int[] ACCESSIBILITY_ACTIONS_RESOURCE_IDS
    public static androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager sAccessibilityPaneVisibilityManager
androidx.appcompat.widget.ResourcesWrapper:
    public void <init>(android.content.res.Resources)
    public java.lang.CharSequence getText(int)
    public java.lang.CharSequence getQuantityText(int,int)
    public java.lang.String getString(int)
    public varargs java.lang.String getString(int,java.lang.Object[])
    public varargs java.lang.String getQuantityString(int,int,java.lang.Object[])
    public java.lang.String getQuantityString(int,int)
    public java.lang.CharSequence getText(int,java.lang.CharSequence)
    public java.lang.CharSequence[] getTextArray(int)
    public java.lang.String[] getStringArray(int)
    public int[] getIntArray(int)
    public android.content.res.TypedArray obtainTypedArray(int)
    public float getDimension(int)
    public int getDimensionPixelOffset(int)
    public int getDimensionPixelSize(int)
    public float getFraction(int,int,int)
    public android.graphics.drawable.Drawable getDrawable(int)
    public android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)
    public android.graphics.drawable.Drawable getDrawableForDensity(int,int)
    public android.graphics.drawable.Drawable getDrawableForDensity(int,int,android.content.res.Resources$Theme)
    public android.graphics.Movie getMovie(int)
    public int getColor(int)
    public android.content.res.ColorStateList getColorStateList(int)
    public boolean getBoolean(int)
    public int getInteger(int)
    public android.content.res.XmlResourceParser getLayout(int)
    public android.content.res.XmlResourceParser getAnimation(int)
    public android.content.res.XmlResourceParser getXml(int)
    public java.io.InputStream openRawResource(int)
    public java.io.InputStream openRawResource(int,android.util.TypedValue)
    public android.content.res.AssetFileDescriptor openRawResourceFd(int)
    public void getValue(int,android.util.TypedValue,boolean)
    public void getValueForDensity(int,int,android.util.TypedValue,boolean)
    public void getValue(java.lang.String,android.util.TypedValue,boolean)
    public android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])
    public void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)
    public android.util.DisplayMetrics getDisplayMetrics()
    public android.content.res.Configuration getConfiguration()
    public int getIdentifier(java.lang.String,java.lang.String,java.lang.String)
    public java.lang.String getResourceName(int)
    public java.lang.String getResourcePackageName(int)
    public java.lang.String getResourceTypeName(int)
    public java.lang.String getResourceEntryName(int)
    public void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)
    public void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)
    public final android.content.res.Resources mResources
androidx.camera.core.SurfaceSizeDefinition:
    public static androidx.camera.core.SurfaceSizeDefinition create(android.util.Size,android.util.Size,android.util.Size)
    public abstract android.util.Size getAnalysisSize()
    public abstract android.util.Size getPreviewSize()
    public abstract android.util.Size getRecordSize()
androidx.recyclerview.widget.RecyclerView$SmoothScroller
androidx.appcompat.widget.Toolbar$LayoutParams:
    public void copyMarginsFromCompat(android.view.ViewGroup$MarginLayoutParams)
androidx.fragment.app.FragmentState:
    public androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,androidx.fragment.app.FragmentFactory)
androidx.camera.core.ErrorHandler$1:
    public final synthetic androidx.camera.core.ErrorHandler this$0
androidx.camera.core.SettableImageProxyBundle$1
androidx.appcompat.widget.AppCompatSpinner$DropdownPopup:
    public boolean isVisibleToUser(android.view.View)
    public int getHorizontalOriginalOffset()
com.facebook.soloader.nativeloader.SystemDelegate:
    public boolean loadLibrary(java.lang.String)
androidx.appcompat.app.WindowDecorActionBar:
    public static boolean checkShowingFlags(boolean,boolean,boolean)
    public void setElevation(float)
    public void completeDeferredDestroyActionMode()
    public void onWindowVisibilityChanged(int)
    public void setDisplayHomeAsUpEnabled(boolean)
    public void setHomeButtonEnabled(boolean)
    public void setDisplayOptions(int,int)
    public int getNavigationMode()
    public void enableContentAnimations(boolean)
    public void showForSystem()
    public void hideForSystem()
    public void setHideOnContentScrollEnabled(boolean)
    public void doShow(boolean)
    public void doHide(boolean)
    public void onContentScrollStarted()
    public void onContentScrollStopped()
    public void setCustomView(android.view.View)
    public final androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View)
    public final void showForActionMode()
    public final void hideForActionMode()
    public final boolean shouldAnimateContextView()
    public android.app.Activity mActivity
    public android.app.Dialog mDialog
    public androidx.appcompat.widget.ScrollingTabContainerView mTabScrollView
    public java.util.ArrayList mTabs
    public int mSavedTabPosition
    public static final synthetic boolean $assertionsDisabled
androidx.lifecycle.ClassesInfoCache$MethodReference:
    public void invokeCallback(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)
androidx.core.view.ViewCompat$UnhandledKeyEventManager:
    public boolean dispatch(android.view.View,android.view.KeyEvent)
    public boolean preDispatch(android.view.KeyEvent)
    public final android.util.SparseArray getCapturedKeys()
android.support.v4.media.session.MediaControllerCompatApi21$Callback
androidx.appcompat.widget.AppCompatToggleButton:
    public void <init>(android.content.Context,android.util.AttributeSet,int)
androidx.camera.core.ProcessingImageReader$2$1
androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState:
    public void invalidateSpanInfo()
androidx.core.app.BundleCompat
androidx.recyclerview.widget.RecyclerView$SavedState$1:
    public androidx.recyclerview.widget.RecyclerView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)
    public androidx.recyclerview.widget.RecyclerView$SavedState createFromParcel(android.os.Parcel)
    public androidx.recyclerview.widget.RecyclerView$SavedState[] newArray(int)
androidx.core.app.NavUtils
androidx.core.graphics.ColorUtils:
    public static int compositeAlpha(int,int)
    public static final java.lang.ThreadLocal TEMP_ARRAY
androidx.constraintlayout.widget.Placeholder:
    public void updatePreLayout(androidx.constraintlayout.widget.ConstraintLayout)
    public void updatePostMeasure()
androidx.core.content.res.ResourcesCompat
androidx.fragment.app.FragmentTransitionImpl:
    public static void bfsAddViewChildren(java.util.List,android.view.View)
    public static java.lang.String findKeyForValue(java.util.Map,java.lang.String)
    public abstract boolean canHandle(java.lang.Object)
    public abstract java.lang.Object wrapTransitionInSet(java.lang.Object)
    public abstract void setEpicenter(java.lang.Object,android.view.View)
    public abstract java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object)
    public abstract void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList)
    public abstract java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object)
    public abstract void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)
    public java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList)
    public void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)
    public void setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map)
    public abstract void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)
    public abstract void addTarget(java.lang.Object,android.view.View)
    public abstract void removeTarget(java.lang.Object,android.view.View)
    public abstract void setEpicenter(java.lang.Object,android.graphics.Rect)
    public void scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map)
androidx.core.view.ViewCompat$3:
    public java.lang.Boolean frameworkGet(android.view.View)
androidx.arch.core.executor.TaskExecutor:
    public abstract void executeOnDiskIO(java.lang.Runnable)
android.support.v4.media.session.MediaControllerCompatApi21$CallbackProxy
androidx.constraintlayout.solver.widgets.Helper:
    public void add(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    public void removeAllIds()
androidx.camera.core.ImageAnalysisAbstractAnalyzer:
    public void open()
    public void close()
androidx.recyclerview.widget.RecyclerView$ItemDecoration:
    public void onDraw()
    public void onDrawOver()
    public void getItemOffsets(android.graphics.Rect)
androidx.constraintlayout.widget.Constraints:
    public androidx.constraintlayout.widget.Constraints$LayoutParams generateLayoutParams(android.util.AttributeSet)
    public androidx.constraintlayout.widget.Constraints$LayoutParams generateDefaultLayoutParams()
androidx.camera.camera2.impl.CamcorderProfileHelper:
    public abstract boolean hasProfile(int,int)
androidx.camera.core.DeferrableSurface$SurfaceClosedException:
    public androidx.camera.core.DeferrableSurface getDeferrableSurface()
android.support.v4.media.MediaBrowserCompat$CustomActionCallback
androidx.core.view.ViewCompat$AccessibilityViewProperty:
    public final boolean frameworkAvailable()
    public final boolean extrasAvailable()
    public final int mContentChangeType
androidx.appcompat.widget.ListPopupWindow$2
androidx.activity.ImmLeaksCleaner:
    public static void initializeReflectiveFields()
    public static void <clinit>()
androidx.appcompat.widget.ScrollingTabContainerView$TabView:
    public void <init>(androidx.appcompat.widget.ScrollingTabContainerView,android.content.Context,androidx.appcompat.app.ActionBar$Tab,boolean)
    public void bindTab(androidx.appcompat.app.ActionBar$Tab)
    public void update()
    public androidx.appcompat.app.ActionBar$Tab getTab()
    public final int[] BG_ATTRS
    public android.widget.TextView mTextView
    public android.widget.ImageView mIconView
    public android.view.View mCustomView
androidx.camera.core.SurfaceConfig:
    public static androidx.camera.core.SurfaceConfig create(androidx.camera.core.SurfaceConfig$ConfigType,androidx.camera.core.SurfaceConfig$ConfigSize)
    public abstract androidx.camera.core.SurfaceConfig$ConfigType getConfigType()
    public abstract androidx.camera.core.SurfaceConfig$ConfigSize getConfigSize()
    public final boolean isSupported(androidx.camera.core.SurfaceConfig)
androidx.camera.camera2.Camera2Config:
    public java.util.Set getCaptureRequestOptions()
    public int getCaptureRequestTemplate(int)
    public android.hardware.camera2.CameraDevice$StateCallback getDeviceStateCallback(android.hardware.camera2.CameraDevice$StateCallback)
    public android.hardware.camera2.CameraCaptureSession$StateCallback getSessionStateCallback(android.hardware.camera2.CameraCaptureSession$StateCallback)
    public android.hardware.camera2.CameraCaptureSession$CaptureCallback getSessionCaptureCallback(android.hardware.camera2.CameraCaptureSession$CaptureCallback)
    public androidx.camera.camera2.impl.CameraEventCallbacks getCameraEventCallback(androidx.camera.camera2.impl.CameraEventCallbacks)
    public boolean containsOption(androidx.camera.core.Config$Option)
androidx.recyclerview.widget.RecyclerView$LayoutManager$LayoutPrefetchRegistry:
    public abstract void addPosition(int,int)
androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags:
    public void setBounds(int,int,int,int)
    public void addFlags(int)
    public void resetFlags()
android.support.v4.media.session.MediaControllerCompat$Callback
androidx.appcompat.view.menu.BaseMenuPresenter:
    public void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)
    public androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)
    public void addItemView(android.view.View,int)
    public boolean filterLeftoverView(android.view.ViewGroup,int)
    public androidx.appcompat.view.menu.MenuPresenter$Callback getCallback()
    public androidx.appcompat.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup)
    public abstract void bindItemView(androidx.appcompat.view.menu.MenuItemImpl,androidx.appcompat.view.menu.MenuView$ItemView)
    public abstract boolean shouldIncludeItem(int,androidx.appcompat.view.menu.MenuItemImpl)
    public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean)
    public void setId(int)
    public android.view.LayoutInflater mInflater
    public int mId
androidx.appcompat.view.StandaloneActionMode:
    public boolean mFocusable
androidx.core.view.AccessibilityDelegateCompat:
    public static java.util.List getActionList(android.view.View)
    public android.view.View$AccessibilityDelegate getBridge()
    public final boolean performClickableSpanAction(int,android.view.View)
    public final boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View)
